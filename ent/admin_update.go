// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/admin"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/notification"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/role"
)

// AdminUpdate is the builder for updating Admin entities.
type AdminUpdate struct {
	config
	hooks    []Hook
	mutation *AdminMutation
}

// Where appends a list predicates to the AdminUpdate builder.
func (au *AdminUpdate) Where(ps ...predicate.Admin) *AdminUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AdminUpdate) SetUpdatedAt(t time.Time) *AdminUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUsername sets the "username" field.
func (au *AdminUpdate) SetUsername(s string) *AdminUpdate {
	au.mutation.SetUsername(s)
	return au
}

// SetPassword sets the "password" field.
func (au *AdminUpdate) SetPassword(b []byte) *AdminUpdate {
	au.mutation.SetPassword(b)
	return au
}

// SetLastName sets the "last_name" field.
func (au *AdminUpdate) SetLastName(s string) *AdminUpdate {
	au.mutation.SetLastName(s)
	return au
}

// SetOtherName sets the "other_name" field.
func (au *AdminUpdate) SetOtherName(s string) *AdminUpdate {
	au.mutation.SetOtherName(s)
	return au
}

// SetPhone sets the "phone" field.
func (au *AdminUpdate) SetPhone(s string) *AdminUpdate {
	au.mutation.SetPhone(s)
	return au
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (au *AdminUpdate) SetNillablePhone(s *string) *AdminUpdate {
	if s != nil {
		au.SetPhone(*s)
	}
	return au
}

// ClearPhone clears the value of the "phone" field.
func (au *AdminUpdate) ClearPhone() *AdminUpdate {
	au.mutation.ClearPhone()
	return au
}

// SetOtherPhone sets the "other_phone" field.
func (au *AdminUpdate) SetOtherPhone(s string) *AdminUpdate {
	au.mutation.SetOtherPhone(s)
	return au
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (au *AdminUpdate) SetNillableOtherPhone(s *string) *AdminUpdate {
	if s != nil {
		au.SetOtherPhone(*s)
	}
	return au
}

// ClearOtherPhone clears the value of the "other_phone" field.
func (au *AdminUpdate) ClearOtherPhone() *AdminUpdate {
	au.mutation.ClearOtherPhone()
	return au
}

// SetStatus sets the "status" field.
func (au *AdminUpdate) SetStatus(a admin.Status) *AdminUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AdminUpdate) SetNillableStatus(a *admin.Status) *AdminUpdate {
	if a != nil {
		au.SetStatus(*a)
	}
	return au
}

// SetLastActive sets the "last_active" field.
func (au *AdminUpdate) SetLastActive(s string) *AdminUpdate {
	au.mutation.SetLastActive(s)
	return au
}

// SetNillableLastActive sets the "last_active" field if the given value is not nil.
func (au *AdminUpdate) SetNillableLastActive(s *string) *AdminUpdate {
	if s != nil {
		au.SetLastActive(*s)
	}
	return au
}

// ClearLastActive clears the value of the "last_active" field.
func (au *AdminUpdate) ClearLastActive() *AdminUpdate {
	au.mutation.ClearLastActive()
	return au
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (au *AdminUpdate) AddRoleIDs(ids ...int) *AdminUpdate {
	au.mutation.AddRoleIDs(ids...)
	return au
}

// AddRoles adds the "roles" edges to the Role entity.
func (au *AdminUpdate) AddRoles(r ...*Role) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRoleIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (au *AdminUpdate) AddNotificationIDs(ids ...int) *AdminUpdate {
	au.mutation.AddNotificationIDs(ids...)
	return au
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (au *AdminUpdate) AddNotifications(n ...*Notification) *AdminUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.AddNotificationIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (au *AdminUpdate) AddCustomerIDs(ids ...int) *AdminUpdate {
	au.mutation.AddCustomerIDs(ids...)
	return au
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (au *AdminUpdate) AddCustomers(c ...*Customer) *AdminUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCustomerIDs(ids...)
}

// Mutation returns the AdminMutation object of the builder.
func (au *AdminUpdate) Mutation() *AdminMutation {
	return au.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (au *AdminUpdate) ClearRoles() *AdminUpdate {
	au.mutation.ClearRoles()
	return au
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (au *AdminUpdate) RemoveRoleIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveRoleIDs(ids...)
	return au
}

// RemoveRoles removes "roles" edges to Role entities.
func (au *AdminUpdate) RemoveRoles(r ...*Role) *AdminUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRoleIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (au *AdminUpdate) ClearNotifications() *AdminUpdate {
	au.mutation.ClearNotifications()
	return au
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (au *AdminUpdate) RemoveNotificationIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveNotificationIDs(ids...)
	return au
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (au *AdminUpdate) RemoveNotifications(n ...*Notification) *AdminUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.RemoveNotificationIDs(ids...)
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (au *AdminUpdate) ClearCustomers() *AdminUpdate {
	au.mutation.ClearCustomers()
	return au
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (au *AdminUpdate) RemoveCustomerIDs(ids ...int) *AdminUpdate {
	au.mutation.RemoveCustomerIDs(ids...)
	return au
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (au *AdminUpdate) RemoveCustomers(c ...*Customer) *AdminUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCustomerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AdminUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AdminUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AdminUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AdminUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AdminUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := admin.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AdminUpdate) check() error {
	if v, ok := au.mutation.Username(); ok {
		if err := admin.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Admin.username": %w`, err)}
		}
	}
	if v, ok := au.mutation.Password(); ok {
		if err := admin.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Admin.password": %w`, err)}
		}
	}
	if v, ok := au.mutation.LastName(); ok {
		if err := admin.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Admin.last_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.OtherName(); ok {
		if err := admin.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "Admin.other_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.Status(); ok {
		if err := admin.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Admin.status": %w`, err)}
		}
	}
	return nil
}

func (au *AdminUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(admin.Table, admin.Columns, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(admin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Username(); ok {
		_spec.SetField(admin.FieldUsername, field.TypeString, value)
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeBytes, value)
	}
	if value, ok := au.mutation.LastName(); ok {
		_spec.SetField(admin.FieldLastName, field.TypeString, value)
	}
	if value, ok := au.mutation.OtherName(); ok {
		_spec.SetField(admin.FieldOtherName, field.TypeString, value)
	}
	if value, ok := au.mutation.Phone(); ok {
		_spec.SetField(admin.FieldPhone, field.TypeString, value)
	}
	if au.mutation.PhoneCleared() {
		_spec.ClearField(admin.FieldPhone, field.TypeString)
	}
	if value, ok := au.mutation.OtherPhone(); ok {
		_spec.SetField(admin.FieldOtherPhone, field.TypeString, value)
	}
	if au.mutation.OtherPhoneCleared() {
		_spec.ClearField(admin.FieldOtherPhone, field.TypeString)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(admin.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := au.mutation.LastActive(); ok {
		_spec.SetField(admin.FieldLastActive, field.TypeString, value)
	}
	if au.mutation.LastActiveCleared() {
		_spec.ClearField(admin.FieldLastActive, field.TypeString)
	}
	if au.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRolesIDs(); len(nodes) > 0 && !au.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.NotificationsTable,
			Columns: admin.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !au.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.NotificationsTable,
			Columns: admin.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.NotificationsTable,
			Columns: admin.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CustomersTable,
			Columns: []string{admin.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !au.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CustomersTable,
			Columns: []string{admin.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CustomersTable,
			Columns: []string{admin.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AdminUpdateOne is the builder for updating a single Admin entity.
type AdminUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AdminUpdateOne) SetUpdatedAt(t time.Time) *AdminUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUsername sets the "username" field.
func (auo *AdminUpdateOne) SetUsername(s string) *AdminUpdateOne {
	auo.mutation.SetUsername(s)
	return auo
}

// SetPassword sets the "password" field.
func (auo *AdminUpdateOne) SetPassword(b []byte) *AdminUpdateOne {
	auo.mutation.SetPassword(b)
	return auo
}

// SetLastName sets the "last_name" field.
func (auo *AdminUpdateOne) SetLastName(s string) *AdminUpdateOne {
	auo.mutation.SetLastName(s)
	return auo
}

// SetOtherName sets the "other_name" field.
func (auo *AdminUpdateOne) SetOtherName(s string) *AdminUpdateOne {
	auo.mutation.SetOtherName(s)
	return auo
}

// SetPhone sets the "phone" field.
func (auo *AdminUpdateOne) SetPhone(s string) *AdminUpdateOne {
	auo.mutation.SetPhone(s)
	return auo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillablePhone(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetPhone(*s)
	}
	return auo
}

// ClearPhone clears the value of the "phone" field.
func (auo *AdminUpdateOne) ClearPhone() *AdminUpdateOne {
	auo.mutation.ClearPhone()
	return auo
}

// SetOtherPhone sets the "other_phone" field.
func (auo *AdminUpdateOne) SetOtherPhone(s string) *AdminUpdateOne {
	auo.mutation.SetOtherPhone(s)
	return auo
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableOtherPhone(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetOtherPhone(*s)
	}
	return auo
}

// ClearOtherPhone clears the value of the "other_phone" field.
func (auo *AdminUpdateOne) ClearOtherPhone() *AdminUpdateOne {
	auo.mutation.ClearOtherPhone()
	return auo
}

// SetStatus sets the "status" field.
func (auo *AdminUpdateOne) SetStatus(a admin.Status) *AdminUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableStatus(a *admin.Status) *AdminUpdateOne {
	if a != nil {
		auo.SetStatus(*a)
	}
	return auo
}

// SetLastActive sets the "last_active" field.
func (auo *AdminUpdateOne) SetLastActive(s string) *AdminUpdateOne {
	auo.mutation.SetLastActive(s)
	return auo
}

// SetNillableLastActive sets the "last_active" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableLastActive(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetLastActive(*s)
	}
	return auo
}

// ClearLastActive clears the value of the "last_active" field.
func (auo *AdminUpdateOne) ClearLastActive() *AdminUpdateOne {
	auo.mutation.ClearLastActive()
	return auo
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (auo *AdminUpdateOne) AddRoleIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddRoleIDs(ids...)
	return auo
}

// AddRoles adds the "roles" edges to the Role entity.
func (auo *AdminUpdateOne) AddRoles(r ...*Role) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRoleIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (auo *AdminUpdateOne) AddNotificationIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddNotificationIDs(ids...)
	return auo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (auo *AdminUpdateOne) AddNotifications(n ...*Notification) *AdminUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.AddNotificationIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (auo *AdminUpdateOne) AddCustomerIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.AddCustomerIDs(ids...)
	return auo
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (auo *AdminUpdateOne) AddCustomers(c ...*Customer) *AdminUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCustomerIDs(ids...)
}

// Mutation returns the AdminMutation object of the builder.
func (auo *AdminUpdateOne) Mutation() *AdminMutation {
	return auo.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (auo *AdminUpdateOne) ClearRoles() *AdminUpdateOne {
	auo.mutation.ClearRoles()
	return auo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (auo *AdminUpdateOne) RemoveRoleIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveRoleIDs(ids...)
	return auo
}

// RemoveRoles removes "roles" edges to Role entities.
func (auo *AdminUpdateOne) RemoveRoles(r ...*Role) *AdminUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRoleIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (auo *AdminUpdateOne) ClearNotifications() *AdminUpdateOne {
	auo.mutation.ClearNotifications()
	return auo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (auo *AdminUpdateOne) RemoveNotificationIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveNotificationIDs(ids...)
	return auo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (auo *AdminUpdateOne) RemoveNotifications(n ...*Notification) *AdminUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.RemoveNotificationIDs(ids...)
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (auo *AdminUpdateOne) ClearCustomers() *AdminUpdateOne {
	auo.mutation.ClearCustomers()
	return auo
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (auo *AdminUpdateOne) RemoveCustomerIDs(ids ...int) *AdminUpdateOne {
	auo.mutation.RemoveCustomerIDs(ids...)
	return auo
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (auo *AdminUpdateOne) RemoveCustomers(c ...*Customer) *AdminUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCustomerIDs(ids...)
}

// Where appends a list predicates to the AdminUpdate builder.
func (auo *AdminUpdateOne) Where(ps ...predicate.Admin) *AdminUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AdminUpdateOne) Select(field string, fields ...string) *AdminUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Admin entity.
func (auo *AdminUpdateOne) Save(ctx context.Context) (*Admin, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AdminUpdateOne) SaveX(ctx context.Context) *Admin {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AdminUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AdminUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AdminUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := admin.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AdminUpdateOne) check() error {
	if v, ok := auo.mutation.Username(); ok {
		if err := admin.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Admin.username": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Password(); ok {
		if err := admin.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Admin.password": %w`, err)}
		}
	}
	if v, ok := auo.mutation.LastName(); ok {
		if err := admin.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Admin.last_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.OtherName(); ok {
		if err := admin.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "Admin.other_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Status(); ok {
		if err := admin.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Admin.status": %w`, err)}
		}
	}
	return nil
}

func (auo *AdminUpdateOne) sqlSave(ctx context.Context) (_node *Admin, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(admin.Table, admin.Columns, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Admin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, admin.FieldID)
		for _, f := range fields {
			if !admin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != admin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(admin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Username(); ok {
		_spec.SetField(admin.FieldUsername, field.TypeString, value)
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeBytes, value)
	}
	if value, ok := auo.mutation.LastName(); ok {
		_spec.SetField(admin.FieldLastName, field.TypeString, value)
	}
	if value, ok := auo.mutation.OtherName(); ok {
		_spec.SetField(admin.FieldOtherName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Phone(); ok {
		_spec.SetField(admin.FieldPhone, field.TypeString, value)
	}
	if auo.mutation.PhoneCleared() {
		_spec.ClearField(admin.FieldPhone, field.TypeString)
	}
	if value, ok := auo.mutation.OtherPhone(); ok {
		_spec.SetField(admin.FieldOtherPhone, field.TypeString, value)
	}
	if auo.mutation.OtherPhoneCleared() {
		_spec.ClearField(admin.FieldOtherPhone, field.TypeString)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(admin.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.LastActive(); ok {
		_spec.SetField(admin.FieldLastActive, field.TypeString, value)
	}
	if auo.mutation.LastActiveCleared() {
		_spec.ClearField(admin.FieldLastActive, field.TypeString)
	}
	if auo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !auo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.RolesTable,
			Columns: admin.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.NotificationsTable,
			Columns: admin.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !auo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.NotificationsTable,
			Columns: admin.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   admin.NotificationsTable,
			Columns: admin.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CustomersTable,
			Columns: []string{admin.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !auo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CustomersTable,
			Columns: []string{admin.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   admin.CustomersTable,
			Columns: []string{admin.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Admin{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
