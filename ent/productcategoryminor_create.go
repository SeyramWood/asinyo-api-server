// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/product"
	"github.com/SeyramWood/ent/productcategorymajor"
	"github.com/SeyramWood/ent/productcategoryminor"
)

// ProductCategoryMinorCreate is the builder for creating a ProductCategoryMinor entity.
type ProductCategoryMinorCreate struct {
	config
	mutation *ProductCategoryMinorMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pcmc *ProductCategoryMinorCreate) SetCreatedAt(t time.Time) *ProductCategoryMinorCreate {
	pcmc.mutation.SetCreatedAt(t)
	return pcmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcmc *ProductCategoryMinorCreate) SetNillableCreatedAt(t *time.Time) *ProductCategoryMinorCreate {
	if t != nil {
		pcmc.SetCreatedAt(*t)
	}
	return pcmc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcmc *ProductCategoryMinorCreate) SetUpdatedAt(t time.Time) *ProductCategoryMinorCreate {
	pcmc.mutation.SetUpdatedAt(t)
	return pcmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcmc *ProductCategoryMinorCreate) SetNillableUpdatedAt(t *time.Time) *ProductCategoryMinorCreate {
	if t != nil {
		pcmc.SetUpdatedAt(*t)
	}
	return pcmc
}

// SetCategory sets the "category" field.
func (pcmc *ProductCategoryMinorCreate) SetCategory(s string) *ProductCategoryMinorCreate {
	pcmc.mutation.SetCategory(s)
	return pcmc
}

// SetImage sets the "image" field.
func (pcmc *ProductCategoryMinorCreate) SetImage(s string) *ProductCategoryMinorCreate {
	pcmc.mutation.SetImage(s)
	return pcmc
}

// SetSlug sets the "slug" field.
func (pcmc *ProductCategoryMinorCreate) SetSlug(s string) *ProductCategoryMinorCreate {
	pcmc.mutation.SetSlug(s)
	return pcmc
}

// SetPercentage sets the "percentage" field.
func (pcmc *ProductCategoryMinorCreate) SetPercentage(i int) *ProductCategoryMinorCreate {
	pcmc.mutation.SetPercentage(i)
	return pcmc
}

// SetNillablePercentage sets the "percentage" field if the given value is not nil.
func (pcmc *ProductCategoryMinorCreate) SetNillablePercentage(i *int) *ProductCategoryMinorCreate {
	if i != nil {
		pcmc.SetPercentage(*i)
	}
	return pcmc
}

// SetMajorID sets the "major" edge to the ProductCategoryMajor entity by ID.
func (pcmc *ProductCategoryMinorCreate) SetMajorID(id int) *ProductCategoryMinorCreate {
	pcmc.mutation.SetMajorID(id)
	return pcmc
}

// SetMajor sets the "major" edge to the ProductCategoryMajor entity.
func (pcmc *ProductCategoryMinorCreate) SetMajor(p *ProductCategoryMajor) *ProductCategoryMinorCreate {
	return pcmc.SetMajorID(p.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (pcmc *ProductCategoryMinorCreate) AddProductIDs(ids ...int) *ProductCategoryMinorCreate {
	pcmc.mutation.AddProductIDs(ids...)
	return pcmc
}

// AddProducts adds the "products" edges to the Product entity.
func (pcmc *ProductCategoryMinorCreate) AddProducts(p ...*Product) *ProductCategoryMinorCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcmc.AddProductIDs(ids...)
}

// Mutation returns the ProductCategoryMinorMutation object of the builder.
func (pcmc *ProductCategoryMinorCreate) Mutation() *ProductCategoryMinorMutation {
	return pcmc.mutation
}

// Save creates the ProductCategoryMinor in the database.
func (pcmc *ProductCategoryMinorCreate) Save(ctx context.Context) (*ProductCategoryMinor, error) {
	pcmc.defaults()
	return withHooks(ctx, pcmc.sqlSave, pcmc.mutation, pcmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcmc *ProductCategoryMinorCreate) SaveX(ctx context.Context) *ProductCategoryMinor {
	v, err := pcmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcmc *ProductCategoryMinorCreate) Exec(ctx context.Context) error {
	_, err := pcmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcmc *ProductCategoryMinorCreate) ExecX(ctx context.Context) {
	if err := pcmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcmc *ProductCategoryMinorCreate) defaults() {
	if _, ok := pcmc.mutation.CreatedAt(); !ok {
		v := productcategoryminor.DefaultCreatedAt()
		pcmc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcmc.mutation.UpdatedAt(); !ok {
		v := productcategoryminor.DefaultUpdatedAt()
		pcmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcmc *ProductCategoryMinorCreate) check() error {
	if _, ok := pcmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProductCategoryMinor.created_at"`)}
	}
	if _, ok := pcmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProductCategoryMinor.updated_at"`)}
	}
	if _, ok := pcmc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "ProductCategoryMinor.category"`)}
	}
	if v, ok := pcmc.mutation.Category(); ok {
		if err := productcategoryminor.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ProductCategoryMinor.category": %w`, err)}
		}
	}
	if _, ok := pcmc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "ProductCategoryMinor.image"`)}
	}
	if v, ok := pcmc.mutation.Image(); ok {
		if err := productcategoryminor.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "ProductCategoryMinor.image": %w`, err)}
		}
	}
	if _, ok := pcmc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "ProductCategoryMinor.slug"`)}
	}
	if v, ok := pcmc.mutation.Slug(); ok {
		if err := productcategoryminor.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "ProductCategoryMinor.slug": %w`, err)}
		}
	}
	if _, ok := pcmc.mutation.MajorID(); !ok {
		return &ValidationError{Name: "major", err: errors.New(`ent: missing required edge "ProductCategoryMinor.major"`)}
	}
	return nil
}

func (pcmc *ProductCategoryMinorCreate) sqlSave(ctx context.Context) (*ProductCategoryMinor, error) {
	if err := pcmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pcmc.mutation.id = &_node.ID
	pcmc.mutation.done = true
	return _node, nil
}

func (pcmc *ProductCategoryMinorCreate) createSpec() (*ProductCategoryMinor, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductCategoryMinor{config: pcmc.config}
		_spec = sqlgraph.NewCreateSpec(productcategoryminor.Table, sqlgraph.NewFieldSpec(productcategoryminor.FieldID, field.TypeInt))
	)
	if value, ok := pcmc.mutation.CreatedAt(); ok {
		_spec.SetField(productcategoryminor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pcmc.mutation.UpdatedAt(); ok {
		_spec.SetField(productcategoryminor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pcmc.mutation.Category(); ok {
		_spec.SetField(productcategoryminor.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := pcmc.mutation.Image(); ok {
		_spec.SetField(productcategoryminor.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := pcmc.mutation.Slug(); ok {
		_spec.SetField(productcategoryminor.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := pcmc.mutation.Percentage(); ok {
		_spec.SetField(productcategoryminor.FieldPercentage, field.TypeInt, value)
		_node.Percentage = value
	}
	if nodes := pcmc.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategoryminor.MajorTable,
			Columns: []string{productcategoryminor.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategorymajor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_category_major_minors = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcmc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategoryminor.ProductsTable,
			Columns: []string{productcategoryminor.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductCategoryMinorCreateBulk is the builder for creating many ProductCategoryMinor entities in bulk.
type ProductCategoryMinorCreateBulk struct {
	config
	builders []*ProductCategoryMinorCreate
}

// Save creates the ProductCategoryMinor entities in the database.
func (pcmcb *ProductCategoryMinorCreateBulk) Save(ctx context.Context) ([]*ProductCategoryMinor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcmcb.builders))
	nodes := make([]*ProductCategoryMinor, len(pcmcb.builders))
	mutators := make([]Mutator, len(pcmcb.builders))
	for i := range pcmcb.builders {
		func(i int, root context.Context) {
			builder := pcmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductCategoryMinorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcmcb *ProductCategoryMinorCreateBulk) SaveX(ctx context.Context) []*ProductCategoryMinor {
	v, err := pcmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcmcb *ProductCategoryMinorCreateBulk) Exec(ctx context.Context) error {
	_, err := pcmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcmcb *ProductCategoryMinorCreateBulk) ExecX(ctx context.Context) {
	if err := pcmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
