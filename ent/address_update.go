// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/address"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/predicate"
)

// AddressUpdate is the builder for updating Address entities.
type AddressUpdate struct {
	config
	hooks    []Hook
	mutation *AddressMutation
}

// Where appends a list predicates to the AddressUpdate builder.
func (au *AddressUpdate) Where(ps ...predicate.Address) *AddressUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AddressUpdate) SetUpdatedAt(t time.Time) *AddressUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetLastName sets the "last_name" field.
func (au *AddressUpdate) SetLastName(s string) *AddressUpdate {
	au.mutation.SetLastName(s)
	return au
}

// SetOtherName sets the "other_name" field.
func (au *AddressUpdate) SetOtherName(s string) *AddressUpdate {
	au.mutation.SetOtherName(s)
	return au
}

// SetPhone sets the "phone" field.
func (au *AddressUpdate) SetPhone(s string) *AddressUpdate {
	au.mutation.SetPhone(s)
	return au
}

// SetOtherPhone sets the "other_phone" field.
func (au *AddressUpdate) SetOtherPhone(s string) *AddressUpdate {
	au.mutation.SetOtherPhone(s)
	return au
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (au *AddressUpdate) SetNillableOtherPhone(s *string) *AddressUpdate {
	if s != nil {
		au.SetOtherPhone(*s)
	}
	return au
}

// ClearOtherPhone clears the value of the "other_phone" field.
func (au *AddressUpdate) ClearOtherPhone() *AddressUpdate {
	au.mutation.ClearOtherPhone()
	return au
}

// SetDigitalAddress sets the "digital_address" field.
func (au *AddressUpdate) SetDigitalAddress(s string) *AddressUpdate {
	au.mutation.SetDigitalAddress(s)
	return au
}

// SetNillableDigitalAddress sets the "digital_address" field if the given value is not nil.
func (au *AddressUpdate) SetNillableDigitalAddress(s *string) *AddressUpdate {
	if s != nil {
		au.SetDigitalAddress(*s)
	}
	return au
}

// ClearDigitalAddress clears the value of the "digital_address" field.
func (au *AddressUpdate) ClearDigitalAddress() *AddressUpdate {
	au.mutation.ClearDigitalAddress()
	return au
}

// SetCity sets the "city" field.
func (au *AddressUpdate) SetCity(s string) *AddressUpdate {
	au.mutation.SetCity(s)
	return au
}

// SetRegion sets the "Region" field.
func (au *AddressUpdate) SetRegion(s string) *AddressUpdate {
	au.mutation.SetRegion(s)
	return au
}

// SetAddress sets the "address" field.
func (au *AddressUpdate) SetAddress(s string) *AddressUpdate {
	au.mutation.SetAddress(s)
	return au
}

// SetOtherInformation sets the "other_information" field.
func (au *AddressUpdate) SetOtherInformation(s string) *AddressUpdate {
	au.mutation.SetOtherInformation(s)
	return au
}

// SetNillableOtherInformation sets the "other_information" field if the given value is not nil.
func (au *AddressUpdate) SetNillableOtherInformation(s *string) *AddressUpdate {
	if s != nil {
		au.SetOtherInformation(*s)
	}
	return au
}

// ClearOtherInformation clears the value of the "other_information" field.
func (au *AddressUpdate) ClearOtherInformation() *AddressUpdate {
	au.mutation.ClearOtherInformation()
	return au
}

// SetDefault sets the "default" field.
func (au *AddressUpdate) SetDefault(b bool) *AddressUpdate {
	au.mutation.SetDefault(b)
	return au
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (au *AddressUpdate) SetNillableDefault(b *bool) *AddressUpdate {
	if b != nil {
		au.SetDefault(*b)
	}
	return au
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (au *AddressUpdate) SetMerchantID(id int) *AddressUpdate {
	au.mutation.SetMerchantID(id)
	return au
}

// SetNillableMerchantID sets the "merchant" edge to the Merchant entity by ID if the given value is not nil.
func (au *AddressUpdate) SetNillableMerchantID(id *int) *AddressUpdate {
	if id != nil {
		au = au.SetMerchantID(*id)
	}
	return au
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (au *AddressUpdate) SetMerchant(m *Merchant) *AddressUpdate {
	return au.SetMerchantID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (au *AddressUpdate) SetAgentID(id int) *AddressUpdate {
	au.mutation.SetAgentID(id)
	return au
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (au *AddressUpdate) SetNillableAgentID(id *int) *AddressUpdate {
	if id != nil {
		au = au.SetAgentID(*id)
	}
	return au
}

// SetAgent sets the "agent" edge to the Agent entity.
func (au *AddressUpdate) SetAgent(a *Agent) *AddressUpdate {
	return au.SetAgentID(a.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (au *AddressUpdate) SetCustomerID(id int) *AddressUpdate {
	au.mutation.SetCustomerID(id)
	return au
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (au *AddressUpdate) SetNillableCustomerID(id *int) *AddressUpdate {
	if id != nil {
		au = au.SetCustomerID(*id)
	}
	return au
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (au *AddressUpdate) SetCustomer(c *Customer) *AddressUpdate {
	return au.SetCustomerID(c.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (au *AddressUpdate) AddOrderIDs(ids ...int) *AddressUpdate {
	au.mutation.AddOrderIDs(ids...)
	return au
}

// AddOrders adds the "orders" edges to the Order entity.
func (au *AddressUpdate) AddOrders(o ...*Order) *AddressUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOrderIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (au *AddressUpdate) Mutation() *AddressMutation {
	return au.mutation
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (au *AddressUpdate) ClearMerchant() *AddressUpdate {
	au.mutation.ClearMerchant()
	return au
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (au *AddressUpdate) ClearAgent() *AddressUpdate {
	au.mutation.ClearAgent()
	return au
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (au *AddressUpdate) ClearCustomer() *AddressUpdate {
	au.mutation.ClearCustomer()
	return au
}

// ClearOrders clears all "orders" edges to the Order entity.
func (au *AddressUpdate) ClearOrders() *AddressUpdate {
	au.mutation.ClearOrders()
	return au
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (au *AddressUpdate) RemoveOrderIDs(ids ...int) *AddressUpdate {
	au.mutation.RemoveOrderIDs(ids...)
	return au
}

// RemoveOrders removes "orders" edges to Order entities.
func (au *AddressUpdate) RemoveOrders(o ...*Order) *AddressUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AddressUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AddressUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AddressUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AddressUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AddressUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := address.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AddressUpdate) check() error {
	if v, ok := au.mutation.LastName(); ok {
		if err := address.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Address.last_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.OtherName(); ok {
		if err := address.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "Address.other_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.Phone(); ok {
		if err := address.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Address.phone": %w`, err)}
		}
	}
	if v, ok := au.mutation.City(); ok {
		if err := address.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Address.city": %w`, err)}
		}
	}
	if v, ok := au.mutation.Region(); ok {
		if err := address.RegionValidator(v); err != nil {
			return &ValidationError{Name: "Region", err: fmt.Errorf(`ent: validator failed for field "Address.Region": %w`, err)}
		}
	}
	if v, ok := au.mutation.Address(); ok {
		if err := address.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Address.address": %w`, err)}
		}
	}
	return nil
}

func (au *AddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   address.Table,
			Columns: address.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: address.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: address.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldLastName,
		})
	}
	if value, ok := au.mutation.OtherName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldOtherName,
		})
	}
	if value, ok := au.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldPhone,
		})
	}
	if value, ok := au.mutation.OtherPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldOtherPhone,
		})
	}
	if au.mutation.OtherPhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldOtherPhone,
		})
	}
	if value, ok := au.mutation.DigitalAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldDigitalAddress,
		})
	}
	if au.mutation.DigitalAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldDigitalAddress,
		})
	}
	if value, ok := au.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldCity,
		})
	}
	if value, ok := au.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldRegion,
		})
	}
	if value, ok := au.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldAddress,
		})
	}
	if value, ok := au.mutation.OtherInformation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldOtherInformation,
		})
	}
	if au.mutation.OtherInformationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldOtherInformation,
		})
	}
	if value, ok := au.mutation.Default(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: address.FieldDefault,
		})
	}
	if au.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.MerchantTable,
			Columns: []string{address.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.MerchantTable,
			Columns: []string{address.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.AgentTable,
			Columns: []string{address.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.AgentTable,
			Columns: []string{address.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !au.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AddressUpdateOne is the builder for updating a single Address entity.
type AddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AddressUpdateOne) SetUpdatedAt(t time.Time) *AddressUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetLastName sets the "last_name" field.
func (auo *AddressUpdateOne) SetLastName(s string) *AddressUpdateOne {
	auo.mutation.SetLastName(s)
	return auo
}

// SetOtherName sets the "other_name" field.
func (auo *AddressUpdateOne) SetOtherName(s string) *AddressUpdateOne {
	auo.mutation.SetOtherName(s)
	return auo
}

// SetPhone sets the "phone" field.
func (auo *AddressUpdateOne) SetPhone(s string) *AddressUpdateOne {
	auo.mutation.SetPhone(s)
	return auo
}

// SetOtherPhone sets the "other_phone" field.
func (auo *AddressUpdateOne) SetOtherPhone(s string) *AddressUpdateOne {
	auo.mutation.SetOtherPhone(s)
	return auo
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableOtherPhone(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetOtherPhone(*s)
	}
	return auo
}

// ClearOtherPhone clears the value of the "other_phone" field.
func (auo *AddressUpdateOne) ClearOtherPhone() *AddressUpdateOne {
	auo.mutation.ClearOtherPhone()
	return auo
}

// SetDigitalAddress sets the "digital_address" field.
func (auo *AddressUpdateOne) SetDigitalAddress(s string) *AddressUpdateOne {
	auo.mutation.SetDigitalAddress(s)
	return auo
}

// SetNillableDigitalAddress sets the "digital_address" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableDigitalAddress(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetDigitalAddress(*s)
	}
	return auo
}

// ClearDigitalAddress clears the value of the "digital_address" field.
func (auo *AddressUpdateOne) ClearDigitalAddress() *AddressUpdateOne {
	auo.mutation.ClearDigitalAddress()
	return auo
}

// SetCity sets the "city" field.
func (auo *AddressUpdateOne) SetCity(s string) *AddressUpdateOne {
	auo.mutation.SetCity(s)
	return auo
}

// SetRegion sets the "Region" field.
func (auo *AddressUpdateOne) SetRegion(s string) *AddressUpdateOne {
	auo.mutation.SetRegion(s)
	return auo
}

// SetAddress sets the "address" field.
func (auo *AddressUpdateOne) SetAddress(s string) *AddressUpdateOne {
	auo.mutation.SetAddress(s)
	return auo
}

// SetOtherInformation sets the "other_information" field.
func (auo *AddressUpdateOne) SetOtherInformation(s string) *AddressUpdateOne {
	auo.mutation.SetOtherInformation(s)
	return auo
}

// SetNillableOtherInformation sets the "other_information" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableOtherInformation(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetOtherInformation(*s)
	}
	return auo
}

// ClearOtherInformation clears the value of the "other_information" field.
func (auo *AddressUpdateOne) ClearOtherInformation() *AddressUpdateOne {
	auo.mutation.ClearOtherInformation()
	return auo
}

// SetDefault sets the "default" field.
func (auo *AddressUpdateOne) SetDefault(b bool) *AddressUpdateOne {
	auo.mutation.SetDefault(b)
	return auo
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableDefault(b *bool) *AddressUpdateOne {
	if b != nil {
		auo.SetDefault(*b)
	}
	return auo
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (auo *AddressUpdateOne) SetMerchantID(id int) *AddressUpdateOne {
	auo.mutation.SetMerchantID(id)
	return auo
}

// SetNillableMerchantID sets the "merchant" edge to the Merchant entity by ID if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableMerchantID(id *int) *AddressUpdateOne {
	if id != nil {
		auo = auo.SetMerchantID(*id)
	}
	return auo
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (auo *AddressUpdateOne) SetMerchant(m *Merchant) *AddressUpdateOne {
	return auo.SetMerchantID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (auo *AddressUpdateOne) SetAgentID(id int) *AddressUpdateOne {
	auo.mutation.SetAgentID(id)
	return auo
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableAgentID(id *int) *AddressUpdateOne {
	if id != nil {
		auo = auo.SetAgentID(*id)
	}
	return auo
}

// SetAgent sets the "agent" edge to the Agent entity.
func (auo *AddressUpdateOne) SetAgent(a *Agent) *AddressUpdateOne {
	return auo.SetAgentID(a.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (auo *AddressUpdateOne) SetCustomerID(id int) *AddressUpdateOne {
	auo.mutation.SetCustomerID(id)
	return auo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCustomerID(id *int) *AddressUpdateOne {
	if id != nil {
		auo = auo.SetCustomerID(*id)
	}
	return auo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (auo *AddressUpdateOne) SetCustomer(c *Customer) *AddressUpdateOne {
	return auo.SetCustomerID(c.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (auo *AddressUpdateOne) AddOrderIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.AddOrderIDs(ids...)
	return auo
}

// AddOrders adds the "orders" edges to the Order entity.
func (auo *AddressUpdateOne) AddOrders(o ...*Order) *AddressUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOrderIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (auo *AddressUpdateOne) Mutation() *AddressMutation {
	return auo.mutation
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (auo *AddressUpdateOne) ClearMerchant() *AddressUpdateOne {
	auo.mutation.ClearMerchant()
	return auo
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (auo *AddressUpdateOne) ClearAgent() *AddressUpdateOne {
	auo.mutation.ClearAgent()
	return auo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (auo *AddressUpdateOne) ClearCustomer() *AddressUpdateOne {
	auo.mutation.ClearCustomer()
	return auo
}

// ClearOrders clears all "orders" edges to the Order entity.
func (auo *AddressUpdateOne) ClearOrders() *AddressUpdateOne {
	auo.mutation.ClearOrders()
	return auo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (auo *AddressUpdateOne) RemoveOrderIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.RemoveOrderIDs(ids...)
	return auo
}

// RemoveOrders removes "orders" edges to Order entities.
func (auo *AddressUpdateOne) RemoveOrders(o ...*Order) *AddressUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOrderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AddressUpdateOne) Select(field string, fields ...string) *AddressUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Address entity.
func (auo *AddressUpdateOne) Save(ctx context.Context) (*Address, error) {
	var (
		err  error
		node *Address
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AddressUpdateOne) SaveX(ctx context.Context) *Address {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AddressUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AddressUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AddressUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := address.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AddressUpdateOne) check() error {
	if v, ok := auo.mutation.LastName(); ok {
		if err := address.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Address.last_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.OtherName(); ok {
		if err := address.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "Address.other_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Phone(); ok {
		if err := address.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Address.phone": %w`, err)}
		}
	}
	if v, ok := auo.mutation.City(); ok {
		if err := address.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Address.city": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Region(); ok {
		if err := address.RegionValidator(v); err != nil {
			return &ValidationError{Name: "Region", err: fmt.Errorf(`ent: validator failed for field "Address.Region": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Address(); ok {
		if err := address.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Address.address": %w`, err)}
		}
	}
	return nil
}

func (auo *AddressUpdateOne) sqlSave(ctx context.Context) (_node *Address, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   address.Table,
			Columns: address.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: address.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Address.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, address.FieldID)
		for _, f := range fields {
			if !address.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != address.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: address.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldLastName,
		})
	}
	if value, ok := auo.mutation.OtherName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldOtherName,
		})
	}
	if value, ok := auo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldPhone,
		})
	}
	if value, ok := auo.mutation.OtherPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldOtherPhone,
		})
	}
	if auo.mutation.OtherPhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldOtherPhone,
		})
	}
	if value, ok := auo.mutation.DigitalAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldDigitalAddress,
		})
	}
	if auo.mutation.DigitalAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldDigitalAddress,
		})
	}
	if value, ok := auo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldCity,
		})
	}
	if value, ok := auo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldRegion,
		})
	}
	if value, ok := auo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldAddress,
		})
	}
	if value, ok := auo.mutation.OtherInformation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldOtherInformation,
		})
	}
	if auo.mutation.OtherInformationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldOtherInformation,
		})
	}
	if value, ok := auo.mutation.Default(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: address.FieldDefault,
		})
	}
	if auo.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.MerchantTable,
			Columns: []string{address.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.MerchantTable,
			Columns: []string{address.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.AgentTable,
			Columns: []string{address.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.AgentTable,
			Columns: []string{address.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !auo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Address{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
