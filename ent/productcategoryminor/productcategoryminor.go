// Code generated by entc, DO NOT EDIT.

package productcategoryminor

import (
	"time"
)

const (
	// Label holds the string label denoting the productcategoryminor type in the database.
	Label = "product_category_minor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldSulg holds the string denoting the sulg field in the database.
	FieldSulg = "sulg"
	// EdgeMajor holds the string denoting the major edge name in mutations.
	EdgeMajor = "major"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// Table holds the table name of the productcategoryminor in the database.
	Table = "product_category_minors"
	// MajorTable is the table that holds the major relation/edge.
	MajorTable = "product_category_minors"
	// MajorInverseTable is the table name for the ProductCategoryMajor entity.
	// It exists in this package in order to avoid circular dependency with the "productcategorymajor" package.
	MajorInverseTable = "product_category_majors"
	// MajorColumn is the table column denoting the major relation/edge.
	MajorColumn = "product_category_major_minors"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "products"
	// ProductsInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductsInverseTable = "products"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "product_category_minor_products"
)

// Columns holds all SQL columns for productcategoryminor fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCategory,
	FieldImage,
	FieldSulg,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "product_category_minors"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"product_category_major_minors",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	CategoryValidator func(string) error
	// ImageValidator is a validator for the "image" field. It is called by the builders before save.
	ImageValidator func(string) error
	// SulgValidator is a validator for the "sulg" field. It is called by the builders before save.
	SulgValidator func(string) error
)
