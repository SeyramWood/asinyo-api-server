// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/purchaserequest"
)

// PurchaseRequestUpdate is the builder for updating PurchaseRequest entities.
type PurchaseRequestUpdate struct {
	config
	hooks    []Hook
	mutation *PurchaseRequestMutation
}

// Where appends a list predicates to the PurchaseRequestUpdate builder.
func (pru *PurchaseRequestUpdate) Where(ps ...predicate.PurchaseRequest) *PurchaseRequestUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetUpdatedAt sets the "updated_at" field.
func (pru *PurchaseRequestUpdate) SetUpdatedAt(t time.Time) *PurchaseRequestUpdate {
	pru.mutation.SetUpdatedAt(t)
	return pru
}

// SetName sets the "name" field.
func (pru *PurchaseRequestUpdate) SetName(s string) *PurchaseRequestUpdate {
	pru.mutation.SetName(s)
	return pru
}

// SetSigned sets the "signed" field.
func (pru *PurchaseRequestUpdate) SetSigned(s string) *PurchaseRequestUpdate {
	pru.mutation.SetSigned(s)
	return pru
}

// SetDescription sets the "description" field.
func (pru *PurchaseRequestUpdate) SetDescription(s string) *PurchaseRequestUpdate {
	pru.mutation.SetDescription(s)
	return pru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pru *PurchaseRequestUpdate) SetNillableDescription(s *string) *PurchaseRequestUpdate {
	if s != nil {
		pru.SetDescription(*s)
	}
	return pru
}

// ClearDescription clears the value of the "description" field.
func (pru *PurchaseRequestUpdate) ClearDescription() *PurchaseRequestUpdate {
	pru.mutation.ClearDescription()
	return pru
}

// SetFile sets the "file" field.
func (pru *PurchaseRequestUpdate) SetFile(s string) *PurchaseRequestUpdate {
	pru.mutation.SetFile(s)
	return pru
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (pru *PurchaseRequestUpdate) SetNillableFile(s *string) *PurchaseRequestUpdate {
	if s != nil {
		pru.SetFile(*s)
	}
	return pru
}

// ClearFile clears the value of the "file" field.
func (pru *PurchaseRequestUpdate) ClearFile() *PurchaseRequestUpdate {
	pru.mutation.ClearFile()
	return pru
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (pru *PurchaseRequestUpdate) AddOrderIDs(ids ...int) *PurchaseRequestUpdate {
	pru.mutation.AddOrderIDs(ids...)
	return pru
}

// AddOrder adds the "order" edges to the Order entity.
func (pru *PurchaseRequestUpdate) AddOrder(o ...*Order) *PurchaseRequestUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pru.AddOrderIDs(ids...)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (pru *PurchaseRequestUpdate) SetCustomerID(id int) *PurchaseRequestUpdate {
	pru.mutation.SetCustomerID(id)
	return pru
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (pru *PurchaseRequestUpdate) SetCustomer(c *Customer) *PurchaseRequestUpdate {
	return pru.SetCustomerID(c.ID)
}

// Mutation returns the PurchaseRequestMutation object of the builder.
func (pru *PurchaseRequestUpdate) Mutation() *PurchaseRequestMutation {
	return pru.mutation
}

// ClearOrder clears all "order" edges to the Order entity.
func (pru *PurchaseRequestUpdate) ClearOrder() *PurchaseRequestUpdate {
	pru.mutation.ClearOrder()
	return pru
}

// RemoveOrderIDs removes the "order" edge to Order entities by IDs.
func (pru *PurchaseRequestUpdate) RemoveOrderIDs(ids ...int) *PurchaseRequestUpdate {
	pru.mutation.RemoveOrderIDs(ids...)
	return pru
}

// RemoveOrder removes "order" edges to Order entities.
func (pru *PurchaseRequestUpdate) RemoveOrder(o ...*Order) *PurchaseRequestUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pru.RemoveOrderIDs(ids...)
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (pru *PurchaseRequestUpdate) ClearCustomer() *PurchaseRequestUpdate {
	pru.mutation.ClearCustomer()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PurchaseRequestUpdate) Save(ctx context.Context) (int, error) {
	pru.defaults()
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PurchaseRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PurchaseRequestUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PurchaseRequestUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pru *PurchaseRequestUpdate) defaults() {
	if _, ok := pru.mutation.UpdatedAt(); !ok {
		v := purchaserequest.UpdateDefaultUpdatedAt()
		pru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *PurchaseRequestUpdate) check() error {
	if v, ok := pru.mutation.Name(); ok {
		if err := purchaserequest.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PurchaseRequest.name": %w`, err)}
		}
	}
	if v, ok := pru.mutation.Signed(); ok {
		if err := purchaserequest.SignedValidator(v); err != nil {
			return &ValidationError{Name: "signed", err: fmt.Errorf(`ent: validator failed for field "PurchaseRequest.signed": %w`, err)}
		}
	}
	if _, ok := pru.mutation.CustomerID(); pru.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PurchaseRequest.customer"`)
	}
	return nil
}

func (pru *PurchaseRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(purchaserequest.Table, purchaserequest.Columns, sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.UpdatedAt(); ok {
		_spec.SetField(purchaserequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.Name(); ok {
		_spec.SetField(purchaserequest.FieldName, field.TypeString, value)
	}
	if value, ok := pru.mutation.Signed(); ok {
		_spec.SetField(purchaserequest.FieldSigned, field.TypeString, value)
	}
	if value, ok := pru.mutation.Description(); ok {
		_spec.SetField(purchaserequest.FieldDescription, field.TypeString, value)
	}
	if pru.mutation.DescriptionCleared() {
		_spec.ClearField(purchaserequest.FieldDescription, field.TypeString)
	}
	if value, ok := pru.mutation.File(); ok {
		_spec.SetField(purchaserequest.FieldFile, field.TypeString, value)
	}
	if pru.mutation.FileCleared() {
		_spec.ClearField(purchaserequest.FieldFile, field.TypeString)
	}
	if pru.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaserequest.OrderTable,
			Columns: []string{purchaserequest.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RemovedOrderIDs(); len(nodes) > 0 && !pru.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaserequest.OrderTable,
			Columns: []string{purchaserequest.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaserequest.OrderTable,
			Columns: []string{purchaserequest.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchaserequest.CustomerTable,
			Columns: []string{purchaserequest.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchaserequest.CustomerTable,
			Columns: []string{purchaserequest.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purchaserequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PurchaseRequestUpdateOne is the builder for updating a single PurchaseRequest entity.
type PurchaseRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PurchaseRequestMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pruo *PurchaseRequestUpdateOne) SetUpdatedAt(t time.Time) *PurchaseRequestUpdateOne {
	pruo.mutation.SetUpdatedAt(t)
	return pruo
}

// SetName sets the "name" field.
func (pruo *PurchaseRequestUpdateOne) SetName(s string) *PurchaseRequestUpdateOne {
	pruo.mutation.SetName(s)
	return pruo
}

// SetSigned sets the "signed" field.
func (pruo *PurchaseRequestUpdateOne) SetSigned(s string) *PurchaseRequestUpdateOne {
	pruo.mutation.SetSigned(s)
	return pruo
}

// SetDescription sets the "description" field.
func (pruo *PurchaseRequestUpdateOne) SetDescription(s string) *PurchaseRequestUpdateOne {
	pruo.mutation.SetDescription(s)
	return pruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pruo *PurchaseRequestUpdateOne) SetNillableDescription(s *string) *PurchaseRequestUpdateOne {
	if s != nil {
		pruo.SetDescription(*s)
	}
	return pruo
}

// ClearDescription clears the value of the "description" field.
func (pruo *PurchaseRequestUpdateOne) ClearDescription() *PurchaseRequestUpdateOne {
	pruo.mutation.ClearDescription()
	return pruo
}

// SetFile sets the "file" field.
func (pruo *PurchaseRequestUpdateOne) SetFile(s string) *PurchaseRequestUpdateOne {
	pruo.mutation.SetFile(s)
	return pruo
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (pruo *PurchaseRequestUpdateOne) SetNillableFile(s *string) *PurchaseRequestUpdateOne {
	if s != nil {
		pruo.SetFile(*s)
	}
	return pruo
}

// ClearFile clears the value of the "file" field.
func (pruo *PurchaseRequestUpdateOne) ClearFile() *PurchaseRequestUpdateOne {
	pruo.mutation.ClearFile()
	return pruo
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (pruo *PurchaseRequestUpdateOne) AddOrderIDs(ids ...int) *PurchaseRequestUpdateOne {
	pruo.mutation.AddOrderIDs(ids...)
	return pruo
}

// AddOrder adds the "order" edges to the Order entity.
func (pruo *PurchaseRequestUpdateOne) AddOrder(o ...*Order) *PurchaseRequestUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pruo.AddOrderIDs(ids...)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (pruo *PurchaseRequestUpdateOne) SetCustomerID(id int) *PurchaseRequestUpdateOne {
	pruo.mutation.SetCustomerID(id)
	return pruo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (pruo *PurchaseRequestUpdateOne) SetCustomer(c *Customer) *PurchaseRequestUpdateOne {
	return pruo.SetCustomerID(c.ID)
}

// Mutation returns the PurchaseRequestMutation object of the builder.
func (pruo *PurchaseRequestUpdateOne) Mutation() *PurchaseRequestMutation {
	return pruo.mutation
}

// ClearOrder clears all "order" edges to the Order entity.
func (pruo *PurchaseRequestUpdateOne) ClearOrder() *PurchaseRequestUpdateOne {
	pruo.mutation.ClearOrder()
	return pruo
}

// RemoveOrderIDs removes the "order" edge to Order entities by IDs.
func (pruo *PurchaseRequestUpdateOne) RemoveOrderIDs(ids ...int) *PurchaseRequestUpdateOne {
	pruo.mutation.RemoveOrderIDs(ids...)
	return pruo
}

// RemoveOrder removes "order" edges to Order entities.
func (pruo *PurchaseRequestUpdateOne) RemoveOrder(o ...*Order) *PurchaseRequestUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pruo.RemoveOrderIDs(ids...)
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (pruo *PurchaseRequestUpdateOne) ClearCustomer() *PurchaseRequestUpdateOne {
	pruo.mutation.ClearCustomer()
	return pruo
}

// Where appends a list predicates to the PurchaseRequestUpdate builder.
func (pruo *PurchaseRequestUpdateOne) Where(ps ...predicate.PurchaseRequest) *PurchaseRequestUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PurchaseRequestUpdateOne) Select(field string, fields ...string) *PurchaseRequestUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PurchaseRequest entity.
func (pruo *PurchaseRequestUpdateOne) Save(ctx context.Context) (*PurchaseRequest, error) {
	pruo.defaults()
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PurchaseRequestUpdateOne) SaveX(ctx context.Context) *PurchaseRequest {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PurchaseRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PurchaseRequestUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pruo *PurchaseRequestUpdateOne) defaults() {
	if _, ok := pruo.mutation.UpdatedAt(); !ok {
		v := purchaserequest.UpdateDefaultUpdatedAt()
		pruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *PurchaseRequestUpdateOne) check() error {
	if v, ok := pruo.mutation.Name(); ok {
		if err := purchaserequest.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PurchaseRequest.name": %w`, err)}
		}
	}
	if v, ok := pruo.mutation.Signed(); ok {
		if err := purchaserequest.SignedValidator(v); err != nil {
			return &ValidationError{Name: "signed", err: fmt.Errorf(`ent: validator failed for field "PurchaseRequest.signed": %w`, err)}
		}
	}
	if _, ok := pruo.mutation.CustomerID(); pruo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PurchaseRequest.customer"`)
	}
	return nil
}

func (pruo *PurchaseRequestUpdateOne) sqlSave(ctx context.Context) (_node *PurchaseRequest, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(purchaserequest.Table, purchaserequest.Columns, sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PurchaseRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, purchaserequest.FieldID)
		for _, f := range fields {
			if !purchaserequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != purchaserequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.UpdatedAt(); ok {
		_spec.SetField(purchaserequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.Name(); ok {
		_spec.SetField(purchaserequest.FieldName, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Signed(); ok {
		_spec.SetField(purchaserequest.FieldSigned, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Description(); ok {
		_spec.SetField(purchaserequest.FieldDescription, field.TypeString, value)
	}
	if pruo.mutation.DescriptionCleared() {
		_spec.ClearField(purchaserequest.FieldDescription, field.TypeString)
	}
	if value, ok := pruo.mutation.File(); ok {
		_spec.SetField(purchaserequest.FieldFile, field.TypeString, value)
	}
	if pruo.mutation.FileCleared() {
		_spec.ClearField(purchaserequest.FieldFile, field.TypeString)
	}
	if pruo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaserequest.OrderTable,
			Columns: []string{purchaserequest.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RemovedOrderIDs(); len(nodes) > 0 && !pruo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaserequest.OrderTable,
			Columns: []string{purchaserequest.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaserequest.OrderTable,
			Columns: []string{purchaserequest.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchaserequest.CustomerTable,
			Columns: []string{purchaserequest.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchaserequest.CustomerTable,
			Columns: []string{purchaserequest.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PurchaseRequest{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purchaserequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
