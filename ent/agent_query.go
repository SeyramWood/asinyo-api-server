// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/address"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/agentrequest"
	"github.com/SeyramWood/ent/favourite"
	"github.com/SeyramWood/ent/merchantstore"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/predicate"
)

// AgentQuery is the builder for querying Agent entities.
type AgentQuery struct {
	config
	limit          *int
	offset         *int
	unique         *bool
	order          []OrderFunc
	fields         []string
	predicates     []predicate.Agent
	withAddresses  *AddressQuery
	withOrders     *OrderQuery
	withFavourites *FavouriteQuery
	withStore      *MerchantStoreQuery
	withRequests   *AgentRequestQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AgentQuery builder.
func (aq *AgentQuery) Where(ps ...predicate.Agent) *AgentQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit adds a limit step to the query.
func (aq *AgentQuery) Limit(limit int) *AgentQuery {
	aq.limit = &limit
	return aq
}

// Offset adds an offset step to the query.
func (aq *AgentQuery) Offset(offset int) *AgentQuery {
	aq.offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *AgentQuery) Unique(unique bool) *AgentQuery {
	aq.unique = &unique
	return aq
}

// Order adds an order step to the query.
func (aq *AgentQuery) Order(o ...OrderFunc) *AgentQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryAddresses chains the current query on the "addresses" edge.
func (aq *AgentQuery) QueryAddresses() *AddressQuery {
	query := &AddressQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.AddressesTable, agent.AddressesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrders chains the current query on the "orders" edge.
func (aq *AgentQuery) QueryOrders() *OrderQuery {
	query := &OrderQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.OrdersTable, agent.OrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFavourites chains the current query on the "favourites" edge.
func (aq *AgentQuery) QueryFavourites() *FavouriteQuery {
	query := &FavouriteQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(favourite.Table, favourite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.FavouritesTable, agent.FavouritesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStore chains the current query on the "store" edge.
func (aq *AgentQuery) QueryStore() *MerchantStoreQuery {
	query := &MerchantStoreQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(merchantstore.Table, merchantstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.StoreTable, agent.StoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRequests chains the current query on the "requests" edge.
func (aq *AgentQuery) QueryRequests() *AgentRequestQuery {
	query := &AgentRequestQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, selector),
			sqlgraph.To(agentrequest.Table, agentrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.RequestsTable, agent.RequestsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Agent entity from the query.
// Returns a *NotFoundError when no Agent was found.
func (aq *AgentQuery) First(ctx context.Context) (*Agent, error) {
	nodes, err := aq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{agent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AgentQuery) FirstX(ctx context.Context) *Agent {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Agent ID from the query.
// Returns a *NotFoundError when no Agent ID was found.
func (aq *AgentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{agent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *AgentQuery) FirstIDX(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Agent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Agent entity is found.
// Returns a *NotFoundError when no Agent entities are found.
func (aq *AgentQuery) Only(ctx context.Context) (*Agent, error) {
	nodes, err := aq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{agent.Label}
	default:
		return nil, &NotSingularError{agent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AgentQuery) OnlyX(ctx context.Context) *Agent {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Agent ID in the query.
// Returns a *NotSingularError when more than one Agent ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *AgentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{agent.Label}
	default:
		err = &NotSingularError{agent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *AgentQuery) OnlyIDX(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Agents.
func (aq *AgentQuery) All(ctx context.Context) ([]*Agent, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aq *AgentQuery) AllX(ctx context.Context) []*Agent {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Agent IDs.
func (aq *AgentQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := aq.Select(agent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AgentQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AgentQuery) Count(ctx context.Context) (int, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AgentQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AgentQuery) Exist(ctx context.Context) (bool, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AgentQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AgentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AgentQuery) Clone() *AgentQuery {
	if aq == nil {
		return nil
	}
	return &AgentQuery{
		config:         aq.config,
		limit:          aq.limit,
		offset:         aq.offset,
		order:          append([]OrderFunc{}, aq.order...),
		predicates:     append([]predicate.Agent{}, aq.predicates...),
		withAddresses:  aq.withAddresses.Clone(),
		withOrders:     aq.withOrders.Clone(),
		withFavourites: aq.withFavourites.Clone(),
		withStore:      aq.withStore.Clone(),
		withRequests:   aq.withRequests.Clone(),
		// clone intermediate query.
		sql:    aq.sql.Clone(),
		path:   aq.path,
		unique: aq.unique,
	}
}

// WithAddresses tells the query-builder to eager-load the nodes that are connected to
// the "addresses" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithAddresses(opts ...func(*AddressQuery)) *AgentQuery {
	query := &AddressQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withAddresses = query
	return aq
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithOrders(opts ...func(*OrderQuery)) *AgentQuery {
	query := &OrderQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withOrders = query
	return aq
}

// WithFavourites tells the query-builder to eager-load the nodes that are connected to
// the "favourites" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithFavourites(opts ...func(*FavouriteQuery)) *AgentQuery {
	query := &FavouriteQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withFavourites = query
	return aq
}

// WithStore tells the query-builder to eager-load the nodes that are connected to
// the "store" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithStore(opts ...func(*MerchantStoreQuery)) *AgentQuery {
	query := &MerchantStoreQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withStore = query
	return aq
}

// WithRequests tells the query-builder to eager-load the nodes that are connected to
// the "requests" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AgentQuery) WithRequests(opts ...func(*AgentRequestQuery)) *AgentQuery {
	query := &AgentRequestQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withRequests = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Agent.Query().
//		GroupBy(agent.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (aq *AgentQuery) GroupBy(field string, fields ...string) *AgentGroupBy {
	grbuild := &AgentGroupBy{config: aq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aq.sqlQuery(ctx), nil
	}
	grbuild.label = agent.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Agent.Query().
//		Select(agent.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (aq *AgentQuery) Select(fields ...string) *AgentSelect {
	aq.fields = append(aq.fields, fields...)
	selbuild := &AgentSelect{AgentQuery: aq}
	selbuild.label = agent.Label
	selbuild.flds, selbuild.scan = &aq.fields, selbuild.Scan
	return selbuild
}

func (aq *AgentQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aq.fields {
		if !agent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *AgentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Agent, error) {
	var (
		nodes       = []*Agent{}
		_spec       = aq.querySpec()
		loadedTypes = [5]bool{
			aq.withAddresses != nil,
			aq.withOrders != nil,
			aq.withFavourites != nil,
			aq.withStore != nil,
			aq.withRequests != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Agent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Agent{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withAddresses; query != nil {
		if err := aq.loadAddresses(ctx, query, nodes,
			func(n *Agent) { n.Edges.Addresses = []*Address{} },
			func(n *Agent, e *Address) { n.Edges.Addresses = append(n.Edges.Addresses, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withOrders; query != nil {
		if err := aq.loadOrders(ctx, query, nodes,
			func(n *Agent) { n.Edges.Orders = []*Order{} },
			func(n *Agent, e *Order) { n.Edges.Orders = append(n.Edges.Orders, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withFavourites; query != nil {
		if err := aq.loadFavourites(ctx, query, nodes,
			func(n *Agent) { n.Edges.Favourites = []*Favourite{} },
			func(n *Agent, e *Favourite) { n.Edges.Favourites = append(n.Edges.Favourites, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withStore; query != nil {
		if err := aq.loadStore(ctx, query, nodes,
			func(n *Agent) { n.Edges.Store = []*MerchantStore{} },
			func(n *Agent, e *MerchantStore) { n.Edges.Store = append(n.Edges.Store, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRequests; query != nil {
		if err := aq.loadRequests(ctx, query, nodes,
			func(n *Agent) { n.Edges.Requests = []*AgentRequest{} },
			func(n *Agent, e *AgentRequest) { n.Edges.Requests = append(n.Edges.Requests, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *AgentQuery) loadAddresses(ctx context.Context, query *AddressQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Address)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Address(func(s *sql.Selector) {
		s.Where(sql.InValues(agent.AddressesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_addresses
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_addresses" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_addresses" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadOrders(ctx context.Context, query *OrderQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Order)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Order(func(s *sql.Selector) {
		s.Where(sql.InValues(agent.OrdersColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_orders
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_orders" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_orders" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadFavourites(ctx context.Context, query *FavouriteQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *Favourite)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Favourite(func(s *sql.Selector) {
		s.Where(sql.InValues(agent.FavouritesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_favourites
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_favourites" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_favourites" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadStore(ctx context.Context, query *MerchantStoreQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *MerchantStore)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MerchantStore(func(s *sql.Selector) {
		s.Where(sql.InValues(agent.StoreColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_store
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_store" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_store" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AgentQuery) loadRequests(ctx context.Context, query *AgentRequestQuery, nodes []*Agent, init func(*Agent), assign func(*Agent, *AgentRequest)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Agent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AgentRequest(func(s *sql.Selector) {
		s.Where(sql.InValues(agent.RequestsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.agent_requests
		if fk == nil {
			return fmt.Errorf(`foreign-key "agent_requests" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_requests" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (aq *AgentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	_spec.Node.Columns = aq.fields
	if len(aq.fields) > 0 {
		_spec.Unique = aq.unique != nil && *aq.unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AgentQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (aq *AgentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   agent.Table,
			Columns: agent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: agent.FieldID,
			},
		},
		From:   aq.sql,
		Unique: true,
	}
	if unique := aq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agent.FieldID)
		for i := range fields {
			if fields[i] != agent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *AgentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(agent.Table)
	columns := aq.fields
	if len(columns) == 0 {
		columns = agent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.unique != nil && *aq.unique {
		selector.Distinct()
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AgentGroupBy is the group-by builder for Agent entities.
type AgentGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AgentGroupBy) Aggregate(fns ...AggregateFunc) *AgentGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the group-by query and scans the result into the given value.
func (agb *AgentGroupBy) Scan(ctx context.Context, v any) error {
	query, err := agb.path(ctx)
	if err != nil {
		return err
	}
	agb.sql = query
	return agb.sqlScan(ctx, v)
}

func (agb *AgentGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range agb.fields {
		if !agent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := agb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (agb *AgentGroupBy) sqlQuery() *sql.Selector {
	selector := agb.sql.Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(agb.fields)+len(agb.fns))
		for _, f := range agb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(agb.fields...)...)
}

// AgentSelect is the builder for selecting fields of Agent entities.
type AgentSelect struct {
	*AgentQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (as *AgentSelect) Scan(ctx context.Context, v any) error {
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	as.sql = as.AgentQuery.sqlQuery(ctx)
	return as.sqlScan(ctx, v)
}

func (as *AgentSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := as.sql.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
