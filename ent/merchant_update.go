// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/product"
	"github.com/SeyramWood/ent/retailmerchant"
	"github.com/SeyramWood/ent/suppliermerchant"
)

// MerchantUpdate is the builder for updating Merchant entities.
type MerchantUpdate struct {
	config
	hooks    []Hook
	mutation *MerchantMutation
}

// Where appends a list predicates to the MerchantUpdate builder.
func (mu *MerchantUpdate) Where(ps ...predicate.Merchant) *MerchantUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MerchantUpdate) SetUpdatedAt(t time.Time) *MerchantUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetUsername sets the "username" field.
func (mu *MerchantUpdate) SetUsername(s string) *MerchantUpdate {
	mu.mutation.SetUsername(s)
	return mu
}

// SetPassword sets the "password" field.
func (mu *MerchantUpdate) SetPassword(b []byte) *MerchantUpdate {
	mu.mutation.SetPassword(b)
	return mu
}

// SetSupplierID sets the "supplier" edge to the SupplierMerchant entity by ID.
func (mu *MerchantUpdate) SetSupplierID(id int) *MerchantUpdate {
	mu.mutation.SetSupplierID(id)
	return mu
}

// SetNillableSupplierID sets the "supplier" edge to the SupplierMerchant entity by ID if the given value is not nil.
func (mu *MerchantUpdate) SetNillableSupplierID(id *int) *MerchantUpdate {
	if id != nil {
		mu = mu.SetSupplierID(*id)
	}
	return mu
}

// SetSupplier sets the "supplier" edge to the SupplierMerchant entity.
func (mu *MerchantUpdate) SetSupplier(s *SupplierMerchant) *MerchantUpdate {
	return mu.SetSupplierID(s.ID)
}

// SetRetailerID sets the "retailer" edge to the RetailMerchant entity by ID.
func (mu *MerchantUpdate) SetRetailerID(id int) *MerchantUpdate {
	mu.mutation.SetRetailerID(id)
	return mu
}

// SetNillableRetailerID sets the "retailer" edge to the RetailMerchant entity by ID if the given value is not nil.
func (mu *MerchantUpdate) SetNillableRetailerID(id *int) *MerchantUpdate {
	if id != nil {
		mu = mu.SetRetailerID(*id)
	}
	return mu
}

// SetRetailer sets the "retailer" edge to the RetailMerchant entity.
func (mu *MerchantUpdate) SetRetailer(r *RetailMerchant) *MerchantUpdate {
	return mu.SetRetailerID(r.ID)
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (mu *MerchantUpdate) SetProductsID(id int) *MerchantUpdate {
	mu.mutation.SetProductsID(id)
	return mu
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (mu *MerchantUpdate) SetNillableProductsID(id *int) *MerchantUpdate {
	if id != nil {
		mu = mu.SetProductsID(*id)
	}
	return mu
}

// SetProducts sets the "products" edge to the Product entity.
func (mu *MerchantUpdate) SetProducts(p *Product) *MerchantUpdate {
	return mu.SetProductsID(p.ID)
}

// Mutation returns the MerchantMutation object of the builder.
func (mu *MerchantUpdate) Mutation() *MerchantMutation {
	return mu.mutation
}

// ClearSupplier clears the "supplier" edge to the SupplierMerchant entity.
func (mu *MerchantUpdate) ClearSupplier() *MerchantUpdate {
	mu.mutation.ClearSupplier()
	return mu
}

// ClearRetailer clears the "retailer" edge to the RetailMerchant entity.
func (mu *MerchantUpdate) ClearRetailer() *MerchantUpdate {
	mu.mutation.ClearRetailer()
	return mu
}

// ClearProducts clears the "products" edge to the Product entity.
func (mu *MerchantUpdate) ClearProducts() *MerchantUpdate {
	mu.mutation.ClearProducts()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MerchantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MerchantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MerchantUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MerchantUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MerchantUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MerchantUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := merchant.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MerchantUpdate) check() error {
	if v, ok := mu.mutation.Username(); ok {
		if err := merchant.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Merchant.username": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Password(); ok {
		if err := merchant.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Merchant.password": %w`, err)}
		}
	}
	return nil
}

func (mu *MerchantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   merchant.Table,
			Columns: merchant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: merchant.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchant.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldUsername,
		})
	}
	if value, ok := mu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: merchant.FieldPassword,
		})
	}
	if mu.mutation.SupplierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   merchant.SupplierTable,
			Columns: []string{merchant.SupplierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: suppliermerchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.SupplierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   merchant.SupplierTable,
			Columns: []string{merchant.SupplierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: suppliermerchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.RetailerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   merchant.RetailerTable,
			Columns: []string{merchant.RetailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: retailmerchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RetailerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   merchant.RetailerTable,
			Columns: []string{merchant.RetailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: retailmerchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   merchant.ProductsTable,
			Columns: []string{merchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   merchant.ProductsTable,
			Columns: []string{merchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MerchantUpdateOne is the builder for updating a single Merchant entity.
type MerchantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MerchantMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MerchantUpdateOne) SetUpdatedAt(t time.Time) *MerchantUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetUsername sets the "username" field.
func (muo *MerchantUpdateOne) SetUsername(s string) *MerchantUpdateOne {
	muo.mutation.SetUsername(s)
	return muo
}

// SetPassword sets the "password" field.
func (muo *MerchantUpdateOne) SetPassword(b []byte) *MerchantUpdateOne {
	muo.mutation.SetPassword(b)
	return muo
}

// SetSupplierID sets the "supplier" edge to the SupplierMerchant entity by ID.
func (muo *MerchantUpdateOne) SetSupplierID(id int) *MerchantUpdateOne {
	muo.mutation.SetSupplierID(id)
	return muo
}

// SetNillableSupplierID sets the "supplier" edge to the SupplierMerchant entity by ID if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableSupplierID(id *int) *MerchantUpdateOne {
	if id != nil {
		muo = muo.SetSupplierID(*id)
	}
	return muo
}

// SetSupplier sets the "supplier" edge to the SupplierMerchant entity.
func (muo *MerchantUpdateOne) SetSupplier(s *SupplierMerchant) *MerchantUpdateOne {
	return muo.SetSupplierID(s.ID)
}

// SetRetailerID sets the "retailer" edge to the RetailMerchant entity by ID.
func (muo *MerchantUpdateOne) SetRetailerID(id int) *MerchantUpdateOne {
	muo.mutation.SetRetailerID(id)
	return muo
}

// SetNillableRetailerID sets the "retailer" edge to the RetailMerchant entity by ID if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableRetailerID(id *int) *MerchantUpdateOne {
	if id != nil {
		muo = muo.SetRetailerID(*id)
	}
	return muo
}

// SetRetailer sets the "retailer" edge to the RetailMerchant entity.
func (muo *MerchantUpdateOne) SetRetailer(r *RetailMerchant) *MerchantUpdateOne {
	return muo.SetRetailerID(r.ID)
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (muo *MerchantUpdateOne) SetProductsID(id int) *MerchantUpdateOne {
	muo.mutation.SetProductsID(id)
	return muo
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableProductsID(id *int) *MerchantUpdateOne {
	if id != nil {
		muo = muo.SetProductsID(*id)
	}
	return muo
}

// SetProducts sets the "products" edge to the Product entity.
func (muo *MerchantUpdateOne) SetProducts(p *Product) *MerchantUpdateOne {
	return muo.SetProductsID(p.ID)
}

// Mutation returns the MerchantMutation object of the builder.
func (muo *MerchantUpdateOne) Mutation() *MerchantMutation {
	return muo.mutation
}

// ClearSupplier clears the "supplier" edge to the SupplierMerchant entity.
func (muo *MerchantUpdateOne) ClearSupplier() *MerchantUpdateOne {
	muo.mutation.ClearSupplier()
	return muo
}

// ClearRetailer clears the "retailer" edge to the RetailMerchant entity.
func (muo *MerchantUpdateOne) ClearRetailer() *MerchantUpdateOne {
	muo.mutation.ClearRetailer()
	return muo
}

// ClearProducts clears the "products" edge to the Product entity.
func (muo *MerchantUpdateOne) ClearProducts() *MerchantUpdateOne {
	muo.mutation.ClearProducts()
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MerchantUpdateOne) Select(field string, fields ...string) *MerchantUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Merchant entity.
func (muo *MerchantUpdateOne) Save(ctx context.Context) (*Merchant, error) {
	var (
		err  error
		node *Merchant
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MerchantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MerchantUpdateOne) SaveX(ctx context.Context) *Merchant {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MerchantUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MerchantUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MerchantUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := merchant.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MerchantUpdateOne) check() error {
	if v, ok := muo.mutation.Username(); ok {
		if err := merchant.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Merchant.username": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Password(); ok {
		if err := merchant.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Merchant.password": %w`, err)}
		}
	}
	return nil
}

func (muo *MerchantUpdateOne) sqlSave(ctx context.Context) (_node *Merchant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   merchant.Table,
			Columns: merchant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: merchant.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Merchant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, merchant.FieldID)
		for _, f := range fields {
			if !merchant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != merchant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchant.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldUsername,
		})
	}
	if value, ok := muo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: merchant.FieldPassword,
		})
	}
	if muo.mutation.SupplierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   merchant.SupplierTable,
			Columns: []string{merchant.SupplierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: suppliermerchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.SupplierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   merchant.SupplierTable,
			Columns: []string{merchant.SupplierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: suppliermerchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.RetailerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   merchant.RetailerTable,
			Columns: []string{merchant.RetailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: retailmerchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RetailerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   merchant.RetailerTable,
			Columns: []string{merchant.RetailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: retailmerchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   merchant.ProductsTable,
			Columns: []string{merchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   merchant.ProductsTable,
			Columns: []string{merchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Merchant{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
