// Code generated by ent, DO NOT EDIT.

package notification

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notification type in the database.
	Label = "notification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldEvent holds the string denoting the event field in the database.
	FieldEvent = "event"
	// FieldActivity holds the string denoting the activity field in the database.
	FieldActivity = "activity"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSubjectType holds the string denoting the subject_type field in the database.
	FieldSubjectType = "subject_type"
	// FieldSubjectID holds the string denoting the subject_id field in the database.
	FieldSubjectID = "subject_id"
	// FieldCreatorType holds the string denoting the creator_type field in the database.
	FieldCreatorType = "creator_type"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// FieldCustomerReadAt holds the string denoting the customer_read_at field in the database.
	FieldCustomerReadAt = "customer_read_at"
	// FieldAgentReadAt holds the string denoting the agent_read_at field in the database.
	FieldAgentReadAt = "agent_read_at"
	// FieldMerchantReadAt holds the string denoting the merchant_read_at field in the database.
	FieldMerchantReadAt = "merchant_read_at"
	// FieldAdminReadAt holds the string denoting the admin_read_at field in the database.
	FieldAdminReadAt = "admin_read_at"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// EdgeAdmin holds the string denoting the admin edge name in mutations.
	EdgeAdmin = "admin"
	// EdgeMerchant holds the string denoting the merchant edge name in mutations.
	EdgeMerchant = "merchant"
	// EdgeAgent holds the string denoting the agent edge name in mutations.
	EdgeAgent = "agent"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// Table holds the table name of the notification in the database.
	Table = "notifications"
	// AdminTable is the table that holds the admin relation/edge. The primary key declared below.
	AdminTable = "admin_notifications"
	// AdminInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	AdminInverseTable = "admins"
	// MerchantTable is the table that holds the merchant relation/edge. The primary key declared below.
	MerchantTable = "merchant_notifications"
	// MerchantInverseTable is the table name for the Merchant entity.
	// It exists in this package in order to avoid circular dependency with the "merchant" package.
	MerchantInverseTable = "merchants"
	// AgentTable is the table that holds the agent relation/edge. The primary key declared below.
	AgentTable = "agent_notifications"
	// AgentInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	AgentInverseTable = "agents"
	// CustomerTable is the table that holds the customer relation/edge. The primary key declared below.
	CustomerTable = "customer_notifications"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
)

// Columns holds all SQL columns for notification fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldEvent,
	FieldActivity,
	FieldDescription,
	FieldSubjectType,
	FieldSubjectID,
	FieldCreatorType,
	FieldCreatorID,
	FieldCustomerReadAt,
	FieldAgentReadAt,
	FieldMerchantReadAt,
	FieldAdminReadAt,
	FieldData,
}

var (
	// AdminPrimaryKey and AdminColumn2 are the table columns denoting the
	// primary key for the admin relation (M2M).
	AdminPrimaryKey = []string{"admin_id", "notification_id"}
	// MerchantPrimaryKey and MerchantColumn2 are the table columns denoting the
	// primary key for the merchant relation (M2M).
	MerchantPrimaryKey = []string{"merchant_id", "notification_id"}
	// AgentPrimaryKey and AgentColumn2 are the table columns denoting the
	// primary key for the agent relation (M2M).
	AgentPrimaryKey = []string{"agent_id", "notification_id"}
	// CustomerPrimaryKey and CustomerColumn2 are the table columns denoting the
	// primary key for the customer relation (M2M).
	CustomerPrimaryKey = []string{"customer_id", "notification_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// EventValidator is a validator for the "event" field. It is called by the builders before save.
	EventValidator func(string) error
	// ActivityValidator is a validator for the "activity" field. It is called by the builders before save.
	ActivityValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// SubjectTypeValidator is a validator for the "subject_type" field. It is called by the builders before save.
	SubjectTypeValidator func(string) error
	// CreatorTypeValidator is a validator for the "creator_type" field. It is called by the builders before save.
	CreatorTypeValidator func(string) error
)

// OrderOption defines the ordering options for the Notification queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEvent orders the results by the event field.
func ByEvent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvent, opts...).ToFunc()
}

// ByActivity orders the results by the activity field.
func ByActivity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivity, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// BySubjectType orders the results by the subject_type field.
func BySubjectType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectType, opts...).ToFunc()
}

// BySubjectID orders the results by the subject_id field.
func BySubjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectID, opts...).ToFunc()
}

// ByCreatorType orders the results by the creator_type field.
func ByCreatorType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorType, opts...).ToFunc()
}

// ByCreatorID orders the results by the creator_id field.
func ByCreatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorID, opts...).ToFunc()
}

// ByCustomerReadAt orders the results by the customer_read_at field.
func ByCustomerReadAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerReadAt, opts...).ToFunc()
}

// ByAgentReadAt orders the results by the agent_read_at field.
func ByAgentReadAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentReadAt, opts...).ToFunc()
}

// ByMerchantReadAt orders the results by the merchant_read_at field.
func ByMerchantReadAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMerchantReadAt, opts...).ToFunc()
}

// ByAdminCount orders the results by admin count.
func ByAdminCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminStep(), opts...)
	}
}

// ByAdmin orders the results by admin terms.
func ByAdmin(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMerchantCount orders the results by merchant count.
func ByMerchantCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMerchantStep(), opts...)
	}
}

// ByMerchant orders the results by merchant terms.
func ByMerchant(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMerchantStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAgentCount orders the results by agent count.
func ByAgentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAgentStep(), opts...)
	}
}

// ByAgent orders the results by agent terms.
func ByAgent(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCustomerCount orders the results by customer count.
func ByCustomerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomerStep(), opts...)
	}
}

// ByCustomer orders the results by customer terms.
func ByCustomer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAdminStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdminInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AdminTable, AdminPrimaryKey...),
	)
}
func newMerchantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MerchantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MerchantTable, MerchantPrimaryKey...),
	)
}
func newAgentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AgentTable, AgentPrimaryKey...),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CustomerTable, CustomerPrimaryKey...),
	)
}
