// Code generated by ent, DO NOT EDIT.

package orderdetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SeyramWood/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldPrice, v))
}

// PromoPrice applies equality check predicate on the "promo_price" field. It's identical to PromoPriceEQ.
func PromoPrice(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldPromoPrice, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldAmount, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldQuantity, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLTE(FieldUpdatedAt, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLTE(FieldPrice, v))
}

// PromoPriceEQ applies the EQ predicate on the "promo_price" field.
func PromoPriceEQ(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldPromoPrice, v))
}

// PromoPriceNEQ applies the NEQ predicate on the "promo_price" field.
func PromoPriceNEQ(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNEQ(FieldPromoPrice, v))
}

// PromoPriceIn applies the In predicate on the "promo_price" field.
func PromoPriceIn(vs ...float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldIn(FieldPromoPrice, vs...))
}

// PromoPriceNotIn applies the NotIn predicate on the "promo_price" field.
func PromoPriceNotIn(vs ...float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNotIn(FieldPromoPrice, vs...))
}

// PromoPriceGT applies the GT predicate on the "promo_price" field.
func PromoPriceGT(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGT(FieldPromoPrice, v))
}

// PromoPriceGTE applies the GTE predicate on the "promo_price" field.
func PromoPriceGTE(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGTE(FieldPromoPrice, v))
}

// PromoPriceLT applies the LT predicate on the "promo_price" field.
func PromoPriceLT(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLT(FieldPromoPrice, v))
}

// PromoPriceLTE applies the LTE predicate on the "promo_price" field.
func PromoPriceLTE(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLTE(FieldPromoPrice, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLTE(FieldAmount, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldLTE(FieldQuantity, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.OrderDetail {
	return predicate.OrderDetail(sql.FieldNotIn(FieldStatus, vs...))
}

// HasOrder applies the HasEdge predicate on the "Order" edge.
func HasOrder() predicate.OrderDetail {
	return predicate.OrderDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "Order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderDetail {
	return predicate.OrderDetail(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.OrderDetail {
	return predicate.OrderDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.OrderDetail {
	return predicate.OrderDetail(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.OrderDetail {
	return predicate.OrderDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.MerchantStore) predicate.OrderDetail {
	return predicate.OrderDetail(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderDetail) predicate.OrderDetail {
	return predicate.OrderDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderDetail) predicate.OrderDetail {
	return predicate.OrderDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderDetail) predicate.OrderDetail {
	return predicate.OrderDetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
