// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/purchaserequest"
)

// PurchaseRequestCreate is the builder for creating a PurchaseRequest entity.
type PurchaseRequestCreate struct {
	config
	mutation *PurchaseRequestMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (prc *PurchaseRequestCreate) SetCreatedAt(t time.Time) *PurchaseRequestCreate {
	prc.mutation.SetCreatedAt(t)
	return prc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prc *PurchaseRequestCreate) SetNillableCreatedAt(t *time.Time) *PurchaseRequestCreate {
	if t != nil {
		prc.SetCreatedAt(*t)
	}
	return prc
}

// SetUpdatedAt sets the "updated_at" field.
func (prc *PurchaseRequestCreate) SetUpdatedAt(t time.Time) *PurchaseRequestCreate {
	prc.mutation.SetUpdatedAt(t)
	return prc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (prc *PurchaseRequestCreate) SetNillableUpdatedAt(t *time.Time) *PurchaseRequestCreate {
	if t != nil {
		prc.SetUpdatedAt(*t)
	}
	return prc
}

// SetName sets the "name" field.
func (prc *PurchaseRequestCreate) SetName(s string) *PurchaseRequestCreate {
	prc.mutation.SetName(s)
	return prc
}

// SetSigned sets the "signed" field.
func (prc *PurchaseRequestCreate) SetSigned(s string) *PurchaseRequestCreate {
	prc.mutation.SetSigned(s)
	return prc
}

// SetDescription sets the "description" field.
func (prc *PurchaseRequestCreate) SetDescription(s string) *PurchaseRequestCreate {
	prc.mutation.SetDescription(s)
	return prc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (prc *PurchaseRequestCreate) SetNillableDescription(s *string) *PurchaseRequestCreate {
	if s != nil {
		prc.SetDescription(*s)
	}
	return prc
}

// SetFile sets the "file" field.
func (prc *PurchaseRequestCreate) SetFile(s string) *PurchaseRequestCreate {
	prc.mutation.SetFile(s)
	return prc
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (prc *PurchaseRequestCreate) SetNillableFile(s *string) *PurchaseRequestCreate {
	if s != nil {
		prc.SetFile(*s)
	}
	return prc
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (prc *PurchaseRequestCreate) AddOrderIDs(ids ...int) *PurchaseRequestCreate {
	prc.mutation.AddOrderIDs(ids...)
	return prc
}

// AddOrder adds the "order" edges to the Order entity.
func (prc *PurchaseRequestCreate) AddOrder(o ...*Order) *PurchaseRequestCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return prc.AddOrderIDs(ids...)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (prc *PurchaseRequestCreate) SetCustomerID(id int) *PurchaseRequestCreate {
	prc.mutation.SetCustomerID(id)
	return prc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (prc *PurchaseRequestCreate) SetCustomer(c *Customer) *PurchaseRequestCreate {
	return prc.SetCustomerID(c.ID)
}

// Mutation returns the PurchaseRequestMutation object of the builder.
func (prc *PurchaseRequestCreate) Mutation() *PurchaseRequestMutation {
	return prc.mutation
}

// Save creates the PurchaseRequest in the database.
func (prc *PurchaseRequestCreate) Save(ctx context.Context) (*PurchaseRequest, error) {
	prc.defaults()
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PurchaseRequestCreate) SaveX(ctx context.Context) *PurchaseRequest {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PurchaseRequestCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PurchaseRequestCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *PurchaseRequestCreate) defaults() {
	if _, ok := prc.mutation.CreatedAt(); !ok {
		v := purchaserequest.DefaultCreatedAt()
		prc.mutation.SetCreatedAt(v)
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		v := purchaserequest.DefaultUpdatedAt()
		prc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PurchaseRequestCreate) check() error {
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PurchaseRequest.created_at"`)}
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PurchaseRequest.updated_at"`)}
	}
	if _, ok := prc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PurchaseRequest.name"`)}
	}
	if v, ok := prc.mutation.Name(); ok {
		if err := purchaserequest.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PurchaseRequest.name": %w`, err)}
		}
	}
	if _, ok := prc.mutation.Signed(); !ok {
		return &ValidationError{Name: "signed", err: errors.New(`ent: missing required field "PurchaseRequest.signed"`)}
	}
	if v, ok := prc.mutation.Signed(); ok {
		if err := purchaserequest.SignedValidator(v); err != nil {
			return &ValidationError{Name: "signed", err: fmt.Errorf(`ent: validator failed for field "PurchaseRequest.signed": %w`, err)}
		}
	}
	if _, ok := prc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "PurchaseRequest.customer"`)}
	}
	return nil
}

func (prc *PurchaseRequestCreate) sqlSave(ctx context.Context) (*PurchaseRequest, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PurchaseRequestCreate) createSpec() (*PurchaseRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &PurchaseRequest{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(purchaserequest.Table, sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt))
	)
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(purchaserequest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.UpdatedAt(); ok {
		_spec.SetField(purchaserequest.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := prc.mutation.Name(); ok {
		_spec.SetField(purchaserequest.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := prc.mutation.Signed(); ok {
		_spec.SetField(purchaserequest.FieldSigned, field.TypeString, value)
		_node.Signed = value
	}
	if value, ok := prc.mutation.Description(); ok {
		_spec.SetField(purchaserequest.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := prc.mutation.File(); ok {
		_spec.SetField(purchaserequest.FieldFile, field.TypeString, value)
		_node.File = value
	}
	if nodes := prc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaserequest.OrderTable,
			Columns: []string{purchaserequest.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchaserequest.CustomerTable,
			Columns: []string{purchaserequest.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_purchase_request = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PurchaseRequestCreateBulk is the builder for creating many PurchaseRequest entities in bulk.
type PurchaseRequestCreateBulk struct {
	config
	builders []*PurchaseRequestCreate
}

// Save creates the PurchaseRequest entities in the database.
func (prcb *PurchaseRequestCreateBulk) Save(ctx context.Context) ([]*PurchaseRequest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PurchaseRequest, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PurchaseRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PurchaseRequestCreateBulk) SaveX(ctx context.Context) []*PurchaseRequest {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PurchaseRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PurchaseRequestCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
