// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/app/domain/models"
	"github.com/SeyramWood/ent/logistic"
	"github.com/SeyramWood/ent/order"
)

// LogisticCreate is the builder for creating a Logistic entity.
type LogisticCreate struct {
	config
	mutation *LogisticMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lc *LogisticCreate) SetCreatedAt(t time.Time) *LogisticCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LogisticCreate) SetNillableCreatedAt(t *time.Time) *LogisticCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LogisticCreate) SetUpdatedAt(t time.Time) *LogisticCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LogisticCreate) SetNillableUpdatedAt(t *time.Time) *LogisticCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// SetTrackingLink sets the "tracking_link" field.
func (lc *LogisticCreate) SetTrackingLink(s string) *LogisticCreate {
	lc.mutation.SetTrackingLink(s)
	return lc
}

// SetNillableTrackingLink sets the "tracking_link" field if the given value is not nil.
func (lc *LogisticCreate) SetNillableTrackingLink(s *string) *LogisticCreate {
	if s != nil {
		lc.SetTrackingLink(*s)
	}
	return lc
}

// SetTasks sets the "tasks" field.
func (lc *LogisticCreate) SetTasks(mmtr *models.TookanMultiTaskResponse) *LogisticCreate {
	lc.mutation.SetTasks(mmtr)
	return lc
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (lc *LogisticCreate) AddOrderIDs(ids ...int) *LogisticCreate {
	lc.mutation.AddOrderIDs(ids...)
	return lc
}

// AddOrder adds the "order" edges to the Order entity.
func (lc *LogisticCreate) AddOrder(o ...*Order) *LogisticCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return lc.AddOrderIDs(ids...)
}

// Mutation returns the LogisticMutation object of the builder.
func (lc *LogisticCreate) Mutation() *LogisticMutation {
	return lc.mutation
}

// Save creates the Logistic in the database.
func (lc *LogisticCreate) Save(ctx context.Context) (*Logistic, error) {
	var (
		err  error
		node *Logistic
	)
	lc.defaults()
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LogisticMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			if node, err = lc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			if lc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Logistic)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LogisticMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LogisticCreate) SaveX(ctx context.Context) *Logistic {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LogisticCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LogisticCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LogisticCreate) defaults() {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := logistic.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := logistic.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LogisticCreate) check() error {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Logistic.created_at"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Logistic.updated_at"`)}
	}
	return nil
}

func (lc *LogisticCreate) sqlSave(ctx context.Context) (*Logistic, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lc *LogisticCreate) createSpec() (*Logistic, *sqlgraph.CreateSpec) {
	var (
		_node = &Logistic{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: logistic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: logistic.FieldID,
			},
		}
	)
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: logistic.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: logistic.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := lc.mutation.TrackingLink(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: logistic.FieldTrackingLink,
		})
		_node.TrackingLink = value
	}
	if value, ok := lc.mutation.Tasks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: logistic.FieldTasks,
		})
		_node.Tasks = value
	}
	if nodes := lc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   logistic.OrderTable,
			Columns: logistic.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LogisticCreateBulk is the builder for creating many Logistic entities in bulk.
type LogisticCreateBulk struct {
	config
	builders []*LogisticCreate
}

// Save creates the Logistic entities in the database.
func (lcb *LogisticCreateBulk) Save(ctx context.Context) ([]*Logistic, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Logistic, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogisticMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LogisticCreateBulk) SaveX(ctx context.Context) []*Logistic {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LogisticCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LogisticCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
