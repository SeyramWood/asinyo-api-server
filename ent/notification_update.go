// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/app/domain/models"
	"github.com/SeyramWood/ent/admin"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/notification"
	"github.com/SeyramWood/ent/predicate"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationMutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nu *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NotificationUpdate) SetUpdatedAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetEvent sets the "event" field.
func (nu *NotificationUpdate) SetEvent(s string) *NotificationUpdate {
	nu.mutation.SetEvent(s)
	return nu
}

// SetActivity sets the "activity" field.
func (nu *NotificationUpdate) SetActivity(s string) *NotificationUpdate {
	nu.mutation.SetActivity(s)
	return nu
}

// SetDescription sets the "description" field.
func (nu *NotificationUpdate) SetDescription(s string) *NotificationUpdate {
	nu.mutation.SetDescription(s)
	return nu
}

// SetSubjectType sets the "subject_type" field.
func (nu *NotificationUpdate) SetSubjectType(s string) *NotificationUpdate {
	nu.mutation.SetSubjectType(s)
	return nu
}

// SetSubjectID sets the "subject_id" field.
func (nu *NotificationUpdate) SetSubjectID(i int) *NotificationUpdate {
	nu.mutation.ResetSubjectID()
	nu.mutation.SetSubjectID(i)
	return nu
}

// SetNillableSubjectID sets the "subject_id" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableSubjectID(i *int) *NotificationUpdate {
	if i != nil {
		nu.SetSubjectID(*i)
	}
	return nu
}

// AddSubjectID adds i to the "subject_id" field.
func (nu *NotificationUpdate) AddSubjectID(i int) *NotificationUpdate {
	nu.mutation.AddSubjectID(i)
	return nu
}

// ClearSubjectID clears the value of the "subject_id" field.
func (nu *NotificationUpdate) ClearSubjectID() *NotificationUpdate {
	nu.mutation.ClearSubjectID()
	return nu
}

// SetCreatorType sets the "creator_type" field.
func (nu *NotificationUpdate) SetCreatorType(s string) *NotificationUpdate {
	nu.mutation.SetCreatorType(s)
	return nu
}

// SetCreatorID sets the "creator_id" field.
func (nu *NotificationUpdate) SetCreatorID(i int) *NotificationUpdate {
	nu.mutation.ResetCreatorID()
	nu.mutation.SetCreatorID(i)
	return nu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableCreatorID(i *int) *NotificationUpdate {
	if i != nil {
		nu.SetCreatorID(*i)
	}
	return nu
}

// AddCreatorID adds i to the "creator_id" field.
func (nu *NotificationUpdate) AddCreatorID(i int) *NotificationUpdate {
	nu.mutation.AddCreatorID(i)
	return nu
}

// ClearCreatorID clears the value of the "creator_id" field.
func (nu *NotificationUpdate) ClearCreatorID() *NotificationUpdate {
	nu.mutation.ClearCreatorID()
	return nu
}

// SetCustomerReadAt sets the "customer_read_at" field.
func (nu *NotificationUpdate) SetCustomerReadAt(s string) *NotificationUpdate {
	nu.mutation.SetCustomerReadAt(s)
	return nu
}

// SetNillableCustomerReadAt sets the "customer_read_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableCustomerReadAt(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetCustomerReadAt(*s)
	}
	return nu
}

// ClearCustomerReadAt clears the value of the "customer_read_at" field.
func (nu *NotificationUpdate) ClearCustomerReadAt() *NotificationUpdate {
	nu.mutation.ClearCustomerReadAt()
	return nu
}

// SetAgentReadAt sets the "agent_read_at" field.
func (nu *NotificationUpdate) SetAgentReadAt(s string) *NotificationUpdate {
	nu.mutation.SetAgentReadAt(s)
	return nu
}

// SetNillableAgentReadAt sets the "agent_read_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableAgentReadAt(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetAgentReadAt(*s)
	}
	return nu
}

// ClearAgentReadAt clears the value of the "agent_read_at" field.
func (nu *NotificationUpdate) ClearAgentReadAt() *NotificationUpdate {
	nu.mutation.ClearAgentReadAt()
	return nu
}

// SetMerchantReadAt sets the "merchant_read_at" field.
func (nu *NotificationUpdate) SetMerchantReadAt(s string) *NotificationUpdate {
	nu.mutation.SetMerchantReadAt(s)
	return nu
}

// SetNillableMerchantReadAt sets the "merchant_read_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableMerchantReadAt(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetMerchantReadAt(*s)
	}
	return nu
}

// ClearMerchantReadAt clears the value of the "merchant_read_at" field.
func (nu *NotificationUpdate) ClearMerchantReadAt() *NotificationUpdate {
	nu.mutation.ClearMerchantReadAt()
	return nu
}

// SetAdminReadAt sets the "admin_read_at" field.
func (nu *NotificationUpdate) SetAdminReadAt(mr []*models.AdminRead) *NotificationUpdate {
	nu.mutation.SetAdminReadAt(mr)
	return nu
}

// AppendAdminReadAt appends mr to the "admin_read_at" field.
func (nu *NotificationUpdate) AppendAdminReadAt(mr []*models.AdminRead) *NotificationUpdate {
	nu.mutation.AppendAdminReadAt(mr)
	return nu
}

// ClearAdminReadAt clears the value of the "admin_read_at" field.
func (nu *NotificationUpdate) ClearAdminReadAt() *NotificationUpdate {
	nu.mutation.ClearAdminReadAt()
	return nu
}

// SetData sets the "data" field.
func (nu *NotificationUpdate) SetData(s *struct {
	Data interface{} "json:\"data\""
}) *NotificationUpdate {
	nu.mutation.SetData(s)
	return nu
}

// ClearData clears the value of the "data" field.
func (nu *NotificationUpdate) ClearData() *NotificationUpdate {
	nu.mutation.ClearData()
	return nu
}

// AddAdminIDs adds the "admin" edge to the Admin entity by IDs.
func (nu *NotificationUpdate) AddAdminIDs(ids ...int) *NotificationUpdate {
	nu.mutation.AddAdminIDs(ids...)
	return nu
}

// AddAdmin adds the "admin" edges to the Admin entity.
func (nu *NotificationUpdate) AddAdmin(a ...*Admin) *NotificationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.AddAdminIDs(ids...)
}

// AddMerchantIDs adds the "merchant" edge to the Merchant entity by IDs.
func (nu *NotificationUpdate) AddMerchantIDs(ids ...int) *NotificationUpdate {
	nu.mutation.AddMerchantIDs(ids...)
	return nu
}

// AddMerchant adds the "merchant" edges to the Merchant entity.
func (nu *NotificationUpdate) AddMerchant(m ...*Merchant) *NotificationUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nu.AddMerchantIDs(ids...)
}

// AddAgentIDs adds the "agent" edge to the Agent entity by IDs.
func (nu *NotificationUpdate) AddAgentIDs(ids ...int) *NotificationUpdate {
	nu.mutation.AddAgentIDs(ids...)
	return nu
}

// AddAgent adds the "agent" edges to the Agent entity.
func (nu *NotificationUpdate) AddAgent(a ...*Agent) *NotificationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.AddAgentIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (nu *NotificationUpdate) AddCustomerIDs(ids ...int) *NotificationUpdate {
	nu.mutation.AddCustomerIDs(ids...)
	return nu
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (nu *NotificationUpdate) AddCustomer(c ...*Customer) *NotificationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.AddCustomerIDs(ids...)
}

// Mutation returns the NotificationMutation object of the builder.
func (nu *NotificationUpdate) Mutation() *NotificationMutation {
	return nu.mutation
}

// ClearAdmin clears all "admin" edges to the Admin entity.
func (nu *NotificationUpdate) ClearAdmin() *NotificationUpdate {
	nu.mutation.ClearAdmin()
	return nu
}

// RemoveAdminIDs removes the "admin" edge to Admin entities by IDs.
func (nu *NotificationUpdate) RemoveAdminIDs(ids ...int) *NotificationUpdate {
	nu.mutation.RemoveAdminIDs(ids...)
	return nu
}

// RemoveAdmin removes "admin" edges to Admin entities.
func (nu *NotificationUpdate) RemoveAdmin(a ...*Admin) *NotificationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.RemoveAdminIDs(ids...)
}

// ClearMerchant clears all "merchant" edges to the Merchant entity.
func (nu *NotificationUpdate) ClearMerchant() *NotificationUpdate {
	nu.mutation.ClearMerchant()
	return nu
}

// RemoveMerchantIDs removes the "merchant" edge to Merchant entities by IDs.
func (nu *NotificationUpdate) RemoveMerchantIDs(ids ...int) *NotificationUpdate {
	nu.mutation.RemoveMerchantIDs(ids...)
	return nu
}

// RemoveMerchant removes "merchant" edges to Merchant entities.
func (nu *NotificationUpdate) RemoveMerchant(m ...*Merchant) *NotificationUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nu.RemoveMerchantIDs(ids...)
}

// ClearAgent clears all "agent" edges to the Agent entity.
func (nu *NotificationUpdate) ClearAgent() *NotificationUpdate {
	nu.mutation.ClearAgent()
	return nu
}

// RemoveAgentIDs removes the "agent" edge to Agent entities by IDs.
func (nu *NotificationUpdate) RemoveAgentIDs(ids ...int) *NotificationUpdate {
	nu.mutation.RemoveAgentIDs(ids...)
	return nu
}

// RemoveAgent removes "agent" edges to Agent entities.
func (nu *NotificationUpdate) RemoveAgent(a ...*Agent) *NotificationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.RemoveAgentIDs(ids...)
}

// ClearCustomer clears all "customer" edges to the Customer entity.
func (nu *NotificationUpdate) ClearCustomer() *NotificationUpdate {
	nu.mutation.ClearCustomer()
	return nu
}

// RemoveCustomerIDs removes the "customer" edge to Customer entities by IDs.
func (nu *NotificationUpdate) RemoveCustomerIDs(ids ...int) *NotificationUpdate {
	nu.mutation.RemoveCustomerIDs(ids...)
	return nu
}

// RemoveCustomer removes "customer" edges to Customer entities.
func (nu *NotificationUpdate) RemoveCustomer(c ...*Customer) *NotificationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.RemoveCustomerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotificationUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotificationUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NotificationUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NotificationUpdate) check() error {
	if v, ok := nu.mutation.Event(); ok {
		if err := notification.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf(`ent: validator failed for field "Notification.event": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Activity(); ok {
		if err := notification.ActivityValidator(v); err != nil {
			return &ValidationError{Name: "activity", err: fmt.Errorf(`ent: validator failed for field "Notification.activity": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Description(); ok {
		if err := notification.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Notification.description": %w`, err)}
		}
	}
	if v, ok := nu.mutation.SubjectType(); ok {
		if err := notification.SubjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "subject_type", err: fmt.Errorf(`ent: validator failed for field "Notification.subject_type": %w`, err)}
		}
	}
	if v, ok := nu.mutation.CreatorType(); ok {
		if err := notification.CreatorTypeValidator(v); err != nil {
			return &ValidationError{Name: "creator_type", err: fmt.Errorf(`ent: validator failed for field "Notification.creator_type": %w`, err)}
		}
	}
	return nil
}

func (nu *NotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.Event(); ok {
		_spec.SetField(notification.FieldEvent, field.TypeString, value)
	}
	if value, ok := nu.mutation.Activity(); ok {
		_spec.SetField(notification.FieldActivity, field.TypeString, value)
	}
	if value, ok := nu.mutation.Description(); ok {
		_spec.SetField(notification.FieldDescription, field.TypeString, value)
	}
	if value, ok := nu.mutation.SubjectType(); ok {
		_spec.SetField(notification.FieldSubjectType, field.TypeString, value)
	}
	if value, ok := nu.mutation.SubjectID(); ok {
		_spec.SetField(notification.FieldSubjectID, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedSubjectID(); ok {
		_spec.AddField(notification.FieldSubjectID, field.TypeInt, value)
	}
	if nu.mutation.SubjectIDCleared() {
		_spec.ClearField(notification.FieldSubjectID, field.TypeInt)
	}
	if value, ok := nu.mutation.CreatorType(); ok {
		_spec.SetField(notification.FieldCreatorType, field.TypeString, value)
	}
	if value, ok := nu.mutation.CreatorID(); ok {
		_spec.SetField(notification.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedCreatorID(); ok {
		_spec.AddField(notification.FieldCreatorID, field.TypeInt, value)
	}
	if nu.mutation.CreatorIDCleared() {
		_spec.ClearField(notification.FieldCreatorID, field.TypeInt)
	}
	if value, ok := nu.mutation.CustomerReadAt(); ok {
		_spec.SetField(notification.FieldCustomerReadAt, field.TypeString, value)
	}
	if nu.mutation.CustomerReadAtCleared() {
		_spec.ClearField(notification.FieldCustomerReadAt, field.TypeString)
	}
	if value, ok := nu.mutation.AgentReadAt(); ok {
		_spec.SetField(notification.FieldAgentReadAt, field.TypeString, value)
	}
	if nu.mutation.AgentReadAtCleared() {
		_spec.ClearField(notification.FieldAgentReadAt, field.TypeString)
	}
	if value, ok := nu.mutation.MerchantReadAt(); ok {
		_spec.SetField(notification.FieldMerchantReadAt, field.TypeString, value)
	}
	if nu.mutation.MerchantReadAtCleared() {
		_spec.ClearField(notification.FieldMerchantReadAt, field.TypeString)
	}
	if value, ok := nu.mutation.AdminReadAt(); ok {
		_spec.SetField(notification.FieldAdminReadAt, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedAdminReadAt(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notification.FieldAdminReadAt, value)
		})
	}
	if nu.mutation.AdminReadAtCleared() {
		_spec.ClearField(notification.FieldAdminReadAt, field.TypeJSON)
	}
	if value, ok := nu.mutation.Data(); ok {
		_spec.SetField(notification.FieldData, field.TypeJSON, value)
	}
	if nu.mutation.DataCleared() {
		_spec.ClearField(notification.FieldData, field.TypeJSON)
	}
	if nu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.AdminTable,
			Columns: notification.AdminPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedAdminIDs(); len(nodes) > 0 && !nu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.AdminTable,
			Columns: notification.AdminPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.AdminTable,
			Columns: notification.AdminPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.MerchantTable,
			Columns: notification.MerchantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedMerchantIDs(); len(nodes) > 0 && !nu.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.MerchantTable,
			Columns: notification.MerchantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.MerchantTable,
			Columns: notification.MerchantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.AgentTable,
			Columns: notification.AgentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedAgentIDs(); len(nodes) > 0 && !nu.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.AgentTable,
			Columns: notification.AgentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.AgentTable,
			Columns: notification.AgentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedCustomerIDs(); len(nodes) > 0 && !nu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NotificationUpdateOne) SetUpdatedAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetEvent sets the "event" field.
func (nuo *NotificationUpdateOne) SetEvent(s string) *NotificationUpdateOne {
	nuo.mutation.SetEvent(s)
	return nuo
}

// SetActivity sets the "activity" field.
func (nuo *NotificationUpdateOne) SetActivity(s string) *NotificationUpdateOne {
	nuo.mutation.SetActivity(s)
	return nuo
}

// SetDescription sets the "description" field.
func (nuo *NotificationUpdateOne) SetDescription(s string) *NotificationUpdateOne {
	nuo.mutation.SetDescription(s)
	return nuo
}

// SetSubjectType sets the "subject_type" field.
func (nuo *NotificationUpdateOne) SetSubjectType(s string) *NotificationUpdateOne {
	nuo.mutation.SetSubjectType(s)
	return nuo
}

// SetSubjectID sets the "subject_id" field.
func (nuo *NotificationUpdateOne) SetSubjectID(i int) *NotificationUpdateOne {
	nuo.mutation.ResetSubjectID()
	nuo.mutation.SetSubjectID(i)
	return nuo
}

// SetNillableSubjectID sets the "subject_id" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableSubjectID(i *int) *NotificationUpdateOne {
	if i != nil {
		nuo.SetSubjectID(*i)
	}
	return nuo
}

// AddSubjectID adds i to the "subject_id" field.
func (nuo *NotificationUpdateOne) AddSubjectID(i int) *NotificationUpdateOne {
	nuo.mutation.AddSubjectID(i)
	return nuo
}

// ClearSubjectID clears the value of the "subject_id" field.
func (nuo *NotificationUpdateOne) ClearSubjectID() *NotificationUpdateOne {
	nuo.mutation.ClearSubjectID()
	return nuo
}

// SetCreatorType sets the "creator_type" field.
func (nuo *NotificationUpdateOne) SetCreatorType(s string) *NotificationUpdateOne {
	nuo.mutation.SetCreatorType(s)
	return nuo
}

// SetCreatorID sets the "creator_id" field.
func (nuo *NotificationUpdateOne) SetCreatorID(i int) *NotificationUpdateOne {
	nuo.mutation.ResetCreatorID()
	nuo.mutation.SetCreatorID(i)
	return nuo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableCreatorID(i *int) *NotificationUpdateOne {
	if i != nil {
		nuo.SetCreatorID(*i)
	}
	return nuo
}

// AddCreatorID adds i to the "creator_id" field.
func (nuo *NotificationUpdateOne) AddCreatorID(i int) *NotificationUpdateOne {
	nuo.mutation.AddCreatorID(i)
	return nuo
}

// ClearCreatorID clears the value of the "creator_id" field.
func (nuo *NotificationUpdateOne) ClearCreatorID() *NotificationUpdateOne {
	nuo.mutation.ClearCreatorID()
	return nuo
}

// SetCustomerReadAt sets the "customer_read_at" field.
func (nuo *NotificationUpdateOne) SetCustomerReadAt(s string) *NotificationUpdateOne {
	nuo.mutation.SetCustomerReadAt(s)
	return nuo
}

// SetNillableCustomerReadAt sets the "customer_read_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableCustomerReadAt(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetCustomerReadAt(*s)
	}
	return nuo
}

// ClearCustomerReadAt clears the value of the "customer_read_at" field.
func (nuo *NotificationUpdateOne) ClearCustomerReadAt() *NotificationUpdateOne {
	nuo.mutation.ClearCustomerReadAt()
	return nuo
}

// SetAgentReadAt sets the "agent_read_at" field.
func (nuo *NotificationUpdateOne) SetAgentReadAt(s string) *NotificationUpdateOne {
	nuo.mutation.SetAgentReadAt(s)
	return nuo
}

// SetNillableAgentReadAt sets the "agent_read_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableAgentReadAt(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetAgentReadAt(*s)
	}
	return nuo
}

// ClearAgentReadAt clears the value of the "agent_read_at" field.
func (nuo *NotificationUpdateOne) ClearAgentReadAt() *NotificationUpdateOne {
	nuo.mutation.ClearAgentReadAt()
	return nuo
}

// SetMerchantReadAt sets the "merchant_read_at" field.
func (nuo *NotificationUpdateOne) SetMerchantReadAt(s string) *NotificationUpdateOne {
	nuo.mutation.SetMerchantReadAt(s)
	return nuo
}

// SetNillableMerchantReadAt sets the "merchant_read_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableMerchantReadAt(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetMerchantReadAt(*s)
	}
	return nuo
}

// ClearMerchantReadAt clears the value of the "merchant_read_at" field.
func (nuo *NotificationUpdateOne) ClearMerchantReadAt() *NotificationUpdateOne {
	nuo.mutation.ClearMerchantReadAt()
	return nuo
}

// SetAdminReadAt sets the "admin_read_at" field.
func (nuo *NotificationUpdateOne) SetAdminReadAt(mr []*models.AdminRead) *NotificationUpdateOne {
	nuo.mutation.SetAdminReadAt(mr)
	return nuo
}

// AppendAdminReadAt appends mr to the "admin_read_at" field.
func (nuo *NotificationUpdateOne) AppendAdminReadAt(mr []*models.AdminRead) *NotificationUpdateOne {
	nuo.mutation.AppendAdminReadAt(mr)
	return nuo
}

// ClearAdminReadAt clears the value of the "admin_read_at" field.
func (nuo *NotificationUpdateOne) ClearAdminReadAt() *NotificationUpdateOne {
	nuo.mutation.ClearAdminReadAt()
	return nuo
}

// SetData sets the "data" field.
func (nuo *NotificationUpdateOne) SetData(s *struct {
	Data interface{} "json:\"data\""
}) *NotificationUpdateOne {
	nuo.mutation.SetData(s)
	return nuo
}

// ClearData clears the value of the "data" field.
func (nuo *NotificationUpdateOne) ClearData() *NotificationUpdateOne {
	nuo.mutation.ClearData()
	return nuo
}

// AddAdminIDs adds the "admin" edge to the Admin entity by IDs.
func (nuo *NotificationUpdateOne) AddAdminIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.AddAdminIDs(ids...)
	return nuo
}

// AddAdmin adds the "admin" edges to the Admin entity.
func (nuo *NotificationUpdateOne) AddAdmin(a ...*Admin) *NotificationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.AddAdminIDs(ids...)
}

// AddMerchantIDs adds the "merchant" edge to the Merchant entity by IDs.
func (nuo *NotificationUpdateOne) AddMerchantIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.AddMerchantIDs(ids...)
	return nuo
}

// AddMerchant adds the "merchant" edges to the Merchant entity.
func (nuo *NotificationUpdateOne) AddMerchant(m ...*Merchant) *NotificationUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nuo.AddMerchantIDs(ids...)
}

// AddAgentIDs adds the "agent" edge to the Agent entity by IDs.
func (nuo *NotificationUpdateOne) AddAgentIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.AddAgentIDs(ids...)
	return nuo
}

// AddAgent adds the "agent" edges to the Agent entity.
func (nuo *NotificationUpdateOne) AddAgent(a ...*Agent) *NotificationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.AddAgentIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (nuo *NotificationUpdateOne) AddCustomerIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.AddCustomerIDs(ids...)
	return nuo
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (nuo *NotificationUpdateOne) AddCustomer(c ...*Customer) *NotificationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.AddCustomerIDs(ids...)
}

// Mutation returns the NotificationMutation object of the builder.
func (nuo *NotificationUpdateOne) Mutation() *NotificationMutation {
	return nuo.mutation
}

// ClearAdmin clears all "admin" edges to the Admin entity.
func (nuo *NotificationUpdateOne) ClearAdmin() *NotificationUpdateOne {
	nuo.mutation.ClearAdmin()
	return nuo
}

// RemoveAdminIDs removes the "admin" edge to Admin entities by IDs.
func (nuo *NotificationUpdateOne) RemoveAdminIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.RemoveAdminIDs(ids...)
	return nuo
}

// RemoveAdmin removes "admin" edges to Admin entities.
func (nuo *NotificationUpdateOne) RemoveAdmin(a ...*Admin) *NotificationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.RemoveAdminIDs(ids...)
}

// ClearMerchant clears all "merchant" edges to the Merchant entity.
func (nuo *NotificationUpdateOne) ClearMerchant() *NotificationUpdateOne {
	nuo.mutation.ClearMerchant()
	return nuo
}

// RemoveMerchantIDs removes the "merchant" edge to Merchant entities by IDs.
func (nuo *NotificationUpdateOne) RemoveMerchantIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.RemoveMerchantIDs(ids...)
	return nuo
}

// RemoveMerchant removes "merchant" edges to Merchant entities.
func (nuo *NotificationUpdateOne) RemoveMerchant(m ...*Merchant) *NotificationUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nuo.RemoveMerchantIDs(ids...)
}

// ClearAgent clears all "agent" edges to the Agent entity.
func (nuo *NotificationUpdateOne) ClearAgent() *NotificationUpdateOne {
	nuo.mutation.ClearAgent()
	return nuo
}

// RemoveAgentIDs removes the "agent" edge to Agent entities by IDs.
func (nuo *NotificationUpdateOne) RemoveAgentIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.RemoveAgentIDs(ids...)
	return nuo
}

// RemoveAgent removes "agent" edges to Agent entities.
func (nuo *NotificationUpdateOne) RemoveAgent(a ...*Agent) *NotificationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.RemoveAgentIDs(ids...)
}

// ClearCustomer clears all "customer" edges to the Customer entity.
func (nuo *NotificationUpdateOne) ClearCustomer() *NotificationUpdateOne {
	nuo.mutation.ClearCustomer()
	return nuo
}

// RemoveCustomerIDs removes the "customer" edge to Customer entities by IDs.
func (nuo *NotificationUpdateOne) RemoveCustomerIDs(ids ...int) *NotificationUpdateOne {
	nuo.mutation.RemoveCustomerIDs(ids...)
	return nuo
}

// RemoveCustomer removes "customer" edges to Customer entities.
func (nuo *NotificationUpdateOne) RemoveCustomer(c ...*Customer) *NotificationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.RemoveCustomerIDs(ids...)
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nuo *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notification entity.
func (nuo *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NotificationUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NotificationUpdateOne) check() error {
	if v, ok := nuo.mutation.Event(); ok {
		if err := notification.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf(`ent: validator failed for field "Notification.event": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Activity(); ok {
		if err := notification.ActivityValidator(v); err != nil {
			return &ValidationError{Name: "activity", err: fmt.Errorf(`ent: validator failed for field "Notification.activity": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Description(); ok {
		if err := notification.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Notification.description": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.SubjectType(); ok {
		if err := notification.SubjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "subject_type", err: fmt.Errorf(`ent: validator failed for field "Notification.subject_type": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.CreatorType(); ok {
		if err := notification.CreatorTypeValidator(v); err != nil {
			return &ValidationError{Name: "creator_type", err: fmt.Errorf(`ent: validator failed for field "Notification.creator_type": %w`, err)}
		}
	}
	return nil
}

func (nuo *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.Event(); ok {
		_spec.SetField(notification.FieldEvent, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Activity(); ok {
		_spec.SetField(notification.FieldActivity, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Description(); ok {
		_spec.SetField(notification.FieldDescription, field.TypeString, value)
	}
	if value, ok := nuo.mutation.SubjectType(); ok {
		_spec.SetField(notification.FieldSubjectType, field.TypeString, value)
	}
	if value, ok := nuo.mutation.SubjectID(); ok {
		_spec.SetField(notification.FieldSubjectID, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedSubjectID(); ok {
		_spec.AddField(notification.FieldSubjectID, field.TypeInt, value)
	}
	if nuo.mutation.SubjectIDCleared() {
		_spec.ClearField(notification.FieldSubjectID, field.TypeInt)
	}
	if value, ok := nuo.mutation.CreatorType(); ok {
		_spec.SetField(notification.FieldCreatorType, field.TypeString, value)
	}
	if value, ok := nuo.mutation.CreatorID(); ok {
		_spec.SetField(notification.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedCreatorID(); ok {
		_spec.AddField(notification.FieldCreatorID, field.TypeInt, value)
	}
	if nuo.mutation.CreatorIDCleared() {
		_spec.ClearField(notification.FieldCreatorID, field.TypeInt)
	}
	if value, ok := nuo.mutation.CustomerReadAt(); ok {
		_spec.SetField(notification.FieldCustomerReadAt, field.TypeString, value)
	}
	if nuo.mutation.CustomerReadAtCleared() {
		_spec.ClearField(notification.FieldCustomerReadAt, field.TypeString)
	}
	if value, ok := nuo.mutation.AgentReadAt(); ok {
		_spec.SetField(notification.FieldAgentReadAt, field.TypeString, value)
	}
	if nuo.mutation.AgentReadAtCleared() {
		_spec.ClearField(notification.FieldAgentReadAt, field.TypeString)
	}
	if value, ok := nuo.mutation.MerchantReadAt(); ok {
		_spec.SetField(notification.FieldMerchantReadAt, field.TypeString, value)
	}
	if nuo.mutation.MerchantReadAtCleared() {
		_spec.ClearField(notification.FieldMerchantReadAt, field.TypeString)
	}
	if value, ok := nuo.mutation.AdminReadAt(); ok {
		_spec.SetField(notification.FieldAdminReadAt, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedAdminReadAt(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notification.FieldAdminReadAt, value)
		})
	}
	if nuo.mutation.AdminReadAtCleared() {
		_spec.ClearField(notification.FieldAdminReadAt, field.TypeJSON)
	}
	if value, ok := nuo.mutation.Data(); ok {
		_spec.SetField(notification.FieldData, field.TypeJSON, value)
	}
	if nuo.mutation.DataCleared() {
		_spec.ClearField(notification.FieldData, field.TypeJSON)
	}
	if nuo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.AdminTable,
			Columns: notification.AdminPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedAdminIDs(); len(nodes) > 0 && !nuo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.AdminTable,
			Columns: notification.AdminPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.AdminTable,
			Columns: notification.AdminPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.MerchantTable,
			Columns: notification.MerchantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedMerchantIDs(); len(nodes) > 0 && !nuo.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.MerchantTable,
			Columns: notification.MerchantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.MerchantTable,
			Columns: notification.MerchantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.AgentTable,
			Columns: notification.AgentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedAgentIDs(); len(nodes) > 0 && !nuo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.AgentTable,
			Columns: notification.AgentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.AgentTable,
			Columns: notification.AgentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedCustomerIDs(); len(nodes) > 0 && !nuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notification.CustomerTable,
			Columns: notification.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Notification{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
