// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/product"
	"github.com/SeyramWood/ent/productcategorymajor"
	"github.com/SeyramWood/ent/productcategoryminor"
	"github.com/SeyramWood/ent/retailmerchant"
	"github.com/SeyramWood/ent/suppliermerchant"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetName sets the "Name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetPrice sets the "Price" field.
func (pu *ProductUpdate) SetPrice(f float64) *ProductUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// SetNillablePrice sets the "Price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePrice(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetPrice(*f)
	}
	return pu
}

// AddPrice adds f to the "Price" field.
func (pu *ProductUpdate) AddPrice(f float64) *ProductUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// SetPromoPrice sets the "PromoPrice" field.
func (pu *ProductUpdate) SetPromoPrice(f float64) *ProductUpdate {
	pu.mutation.ResetPromoPrice()
	pu.mutation.SetPromoPrice(f)
	return pu
}

// SetNillablePromoPrice sets the "PromoPrice" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePromoPrice(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetPromoPrice(*f)
	}
	return pu
}

// AddPromoPrice adds f to the "PromoPrice" field.
func (pu *ProductUpdate) AddPromoPrice(f float64) *ProductUpdate {
	pu.mutation.AddPromoPrice(f)
	return pu
}

// SetDescription sets the "Description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetImage sets the "Image" field.
func (pu *ProductUpdate) SetImage(s string) *ProductUpdate {
	pu.mutation.SetImage(s)
	return pu
}

// AddMajorIDs adds the "major" edge to the ProductCategoryMajor entity by IDs.
func (pu *ProductUpdate) AddMajorIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddMajorIDs(ids...)
	return pu
}

// AddMajor adds the "major" edges to the ProductCategoryMajor entity.
func (pu *ProductUpdate) AddMajor(p ...*ProductCategoryMajor) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddMajorIDs(ids...)
}

// AddMinorIDs adds the "minor" edge to the ProductCategoryMinor entity by IDs.
func (pu *ProductUpdate) AddMinorIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddMinorIDs(ids...)
	return pu
}

// AddMinor adds the "minor" edges to the ProductCategoryMinor entity.
func (pu *ProductUpdate) AddMinor(p ...*ProductCategoryMinor) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddMinorIDs(ids...)
}

// AddMechantIDs adds the "mechant" edge to the Merchant entity by IDs.
func (pu *ProductUpdate) AddMechantIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddMechantIDs(ids...)
	return pu
}

// AddMechant adds the "mechant" edges to the Merchant entity.
func (pu *ProductUpdate) AddMechant(m ...*Merchant) *ProductUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMechantIDs(ids...)
}

// AddSupplierIDs adds the "supplier" edge to the SupplierMerchant entity by IDs.
func (pu *ProductUpdate) AddSupplierIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddSupplierIDs(ids...)
	return pu
}

// AddSupplier adds the "supplier" edges to the SupplierMerchant entity.
func (pu *ProductUpdate) AddSupplier(s ...*SupplierMerchant) *ProductUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSupplierIDs(ids...)
}

// AddRetailerIDs adds the "retailer" edge to the RetailMerchant entity by IDs.
func (pu *ProductUpdate) AddRetailerIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddRetailerIDs(ids...)
	return pu
}

// AddRetailer adds the "retailer" edges to the RetailMerchant entity.
func (pu *ProductUpdate) AddRetailer(r ...*RetailMerchant) *ProductUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRetailerIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearMajor clears all "major" edges to the ProductCategoryMajor entity.
func (pu *ProductUpdate) ClearMajor() *ProductUpdate {
	pu.mutation.ClearMajor()
	return pu
}

// RemoveMajorIDs removes the "major" edge to ProductCategoryMajor entities by IDs.
func (pu *ProductUpdate) RemoveMajorIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveMajorIDs(ids...)
	return pu
}

// RemoveMajor removes "major" edges to ProductCategoryMajor entities.
func (pu *ProductUpdate) RemoveMajor(p ...*ProductCategoryMajor) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveMajorIDs(ids...)
}

// ClearMinor clears all "minor" edges to the ProductCategoryMinor entity.
func (pu *ProductUpdate) ClearMinor() *ProductUpdate {
	pu.mutation.ClearMinor()
	return pu
}

// RemoveMinorIDs removes the "minor" edge to ProductCategoryMinor entities by IDs.
func (pu *ProductUpdate) RemoveMinorIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveMinorIDs(ids...)
	return pu
}

// RemoveMinor removes "minor" edges to ProductCategoryMinor entities.
func (pu *ProductUpdate) RemoveMinor(p ...*ProductCategoryMinor) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveMinorIDs(ids...)
}

// ClearMechant clears all "mechant" edges to the Merchant entity.
func (pu *ProductUpdate) ClearMechant() *ProductUpdate {
	pu.mutation.ClearMechant()
	return pu
}

// RemoveMechantIDs removes the "mechant" edge to Merchant entities by IDs.
func (pu *ProductUpdate) RemoveMechantIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveMechantIDs(ids...)
	return pu
}

// RemoveMechant removes "mechant" edges to Merchant entities.
func (pu *ProductUpdate) RemoveMechant(m ...*Merchant) *ProductUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMechantIDs(ids...)
}

// ClearSupplier clears all "supplier" edges to the SupplierMerchant entity.
func (pu *ProductUpdate) ClearSupplier() *ProductUpdate {
	pu.mutation.ClearSupplier()
	return pu
}

// RemoveSupplierIDs removes the "supplier" edge to SupplierMerchant entities by IDs.
func (pu *ProductUpdate) RemoveSupplierIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveSupplierIDs(ids...)
	return pu
}

// RemoveSupplier removes "supplier" edges to SupplierMerchant entities.
func (pu *ProductUpdate) RemoveSupplier(s ...*SupplierMerchant) *ProductUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSupplierIDs(ids...)
}

// ClearRetailer clears all "retailer" edges to the RetailMerchant entity.
func (pu *ProductUpdate) ClearRetailer() *ProductUpdate {
	pu.mutation.ClearRetailer()
	return pu
}

// RemoveRetailerIDs removes the "retailer" edge to RetailMerchant entities by IDs.
func (pu *ProductUpdate) RemoveRetailerIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveRetailerIDs(ids...)
	return pu
}

// RemoveRetailer removes "retailer" edges to RetailMerchant entities.
func (pu *ProductUpdate) RemoveRetailer(r ...*RetailMerchant) *ProductUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRetailerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Product.Name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`ent: validator failed for field "Product.Description": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Image(); ok {
		if err := product.ImageValidator(v); err != nil {
			return &ValidationError{Name: "Image", err: fmt.Errorf(`ent: validator failed for field "Product.Image": %w`, err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldName,
		})
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPrice,
		})
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPrice,
		})
	}
	if value, ok := pu.mutation.PromoPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPromoPrice,
		})
	}
	if value, ok := pu.mutation.AddedPromoPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPromoPrice,
		})
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDescription,
		})
	}
	if value, ok := pu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldImage,
		})
	}
	if pu.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.MajorTable,
			Columns: product.MajorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorymajor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMajorIDs(); len(nodes) > 0 && !pu.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.MajorTable,
			Columns: product.MajorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorymajor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.MajorTable,
			Columns: product.MajorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorymajor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MinorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.MinorTable,
			Columns: product.MinorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategoryminor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMinorIDs(); len(nodes) > 0 && !pu.mutation.MinorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.MinorTable,
			Columns: product.MinorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategoryminor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MinorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.MinorTable,
			Columns: product.MinorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategoryminor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MechantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.MechantTable,
			Columns: []string{product.MechantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMechantIDs(); len(nodes) > 0 && !pu.mutation.MechantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.MechantTable,
			Columns: []string{product.MechantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MechantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.MechantTable,
			Columns: []string{product.MechantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SupplierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.SupplierTable,
			Columns: []string{product.SupplierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: suppliermerchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSupplierIDs(); len(nodes) > 0 && !pu.mutation.SupplierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.SupplierTable,
			Columns: []string{product.SupplierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: suppliermerchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SupplierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.SupplierTable,
			Columns: []string{product.SupplierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: suppliermerchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RetailerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.RetailerTable,
			Columns: []string{product.RetailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: retailmerchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRetailerIDs(); len(nodes) > 0 && !pu.mutation.RetailerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.RetailerTable,
			Columns: []string{product.RetailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: retailmerchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RetailerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.RetailerTable,
			Columns: []string{product.RetailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: retailmerchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetName sets the "Name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetPrice sets the "Price" field.
func (puo *ProductUpdateOne) SetPrice(f float64) *ProductUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// SetNillablePrice sets the "Price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePrice(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetPrice(*f)
	}
	return puo
}

// AddPrice adds f to the "Price" field.
func (puo *ProductUpdateOne) AddPrice(f float64) *ProductUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// SetPromoPrice sets the "PromoPrice" field.
func (puo *ProductUpdateOne) SetPromoPrice(f float64) *ProductUpdateOne {
	puo.mutation.ResetPromoPrice()
	puo.mutation.SetPromoPrice(f)
	return puo
}

// SetNillablePromoPrice sets the "PromoPrice" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePromoPrice(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetPromoPrice(*f)
	}
	return puo
}

// AddPromoPrice adds f to the "PromoPrice" field.
func (puo *ProductUpdateOne) AddPromoPrice(f float64) *ProductUpdateOne {
	puo.mutation.AddPromoPrice(f)
	return puo
}

// SetDescription sets the "Description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetImage sets the "Image" field.
func (puo *ProductUpdateOne) SetImage(s string) *ProductUpdateOne {
	puo.mutation.SetImage(s)
	return puo
}

// AddMajorIDs adds the "major" edge to the ProductCategoryMajor entity by IDs.
func (puo *ProductUpdateOne) AddMajorIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddMajorIDs(ids...)
	return puo
}

// AddMajor adds the "major" edges to the ProductCategoryMajor entity.
func (puo *ProductUpdateOne) AddMajor(p ...*ProductCategoryMajor) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddMajorIDs(ids...)
}

// AddMinorIDs adds the "minor" edge to the ProductCategoryMinor entity by IDs.
func (puo *ProductUpdateOne) AddMinorIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddMinorIDs(ids...)
	return puo
}

// AddMinor adds the "minor" edges to the ProductCategoryMinor entity.
func (puo *ProductUpdateOne) AddMinor(p ...*ProductCategoryMinor) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddMinorIDs(ids...)
}

// AddMechantIDs adds the "mechant" edge to the Merchant entity by IDs.
func (puo *ProductUpdateOne) AddMechantIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddMechantIDs(ids...)
	return puo
}

// AddMechant adds the "mechant" edges to the Merchant entity.
func (puo *ProductUpdateOne) AddMechant(m ...*Merchant) *ProductUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMechantIDs(ids...)
}

// AddSupplierIDs adds the "supplier" edge to the SupplierMerchant entity by IDs.
func (puo *ProductUpdateOne) AddSupplierIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddSupplierIDs(ids...)
	return puo
}

// AddSupplier adds the "supplier" edges to the SupplierMerchant entity.
func (puo *ProductUpdateOne) AddSupplier(s ...*SupplierMerchant) *ProductUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSupplierIDs(ids...)
}

// AddRetailerIDs adds the "retailer" edge to the RetailMerchant entity by IDs.
func (puo *ProductUpdateOne) AddRetailerIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddRetailerIDs(ids...)
	return puo
}

// AddRetailer adds the "retailer" edges to the RetailMerchant entity.
func (puo *ProductUpdateOne) AddRetailer(r ...*RetailMerchant) *ProductUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRetailerIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearMajor clears all "major" edges to the ProductCategoryMajor entity.
func (puo *ProductUpdateOne) ClearMajor() *ProductUpdateOne {
	puo.mutation.ClearMajor()
	return puo
}

// RemoveMajorIDs removes the "major" edge to ProductCategoryMajor entities by IDs.
func (puo *ProductUpdateOne) RemoveMajorIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveMajorIDs(ids...)
	return puo
}

// RemoveMajor removes "major" edges to ProductCategoryMajor entities.
func (puo *ProductUpdateOne) RemoveMajor(p ...*ProductCategoryMajor) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveMajorIDs(ids...)
}

// ClearMinor clears all "minor" edges to the ProductCategoryMinor entity.
func (puo *ProductUpdateOne) ClearMinor() *ProductUpdateOne {
	puo.mutation.ClearMinor()
	return puo
}

// RemoveMinorIDs removes the "minor" edge to ProductCategoryMinor entities by IDs.
func (puo *ProductUpdateOne) RemoveMinorIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveMinorIDs(ids...)
	return puo
}

// RemoveMinor removes "minor" edges to ProductCategoryMinor entities.
func (puo *ProductUpdateOne) RemoveMinor(p ...*ProductCategoryMinor) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveMinorIDs(ids...)
}

// ClearMechant clears all "mechant" edges to the Merchant entity.
func (puo *ProductUpdateOne) ClearMechant() *ProductUpdateOne {
	puo.mutation.ClearMechant()
	return puo
}

// RemoveMechantIDs removes the "mechant" edge to Merchant entities by IDs.
func (puo *ProductUpdateOne) RemoveMechantIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveMechantIDs(ids...)
	return puo
}

// RemoveMechant removes "mechant" edges to Merchant entities.
func (puo *ProductUpdateOne) RemoveMechant(m ...*Merchant) *ProductUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMechantIDs(ids...)
}

// ClearSupplier clears all "supplier" edges to the SupplierMerchant entity.
func (puo *ProductUpdateOne) ClearSupplier() *ProductUpdateOne {
	puo.mutation.ClearSupplier()
	return puo
}

// RemoveSupplierIDs removes the "supplier" edge to SupplierMerchant entities by IDs.
func (puo *ProductUpdateOne) RemoveSupplierIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveSupplierIDs(ids...)
	return puo
}

// RemoveSupplier removes "supplier" edges to SupplierMerchant entities.
func (puo *ProductUpdateOne) RemoveSupplier(s ...*SupplierMerchant) *ProductUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSupplierIDs(ids...)
}

// ClearRetailer clears all "retailer" edges to the RetailMerchant entity.
func (puo *ProductUpdateOne) ClearRetailer() *ProductUpdateOne {
	puo.mutation.ClearRetailer()
	return puo
}

// RemoveRetailerIDs removes the "retailer" edge to RetailMerchant entities by IDs.
func (puo *ProductUpdateOne) RemoveRetailerIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveRetailerIDs(ids...)
	return puo
}

// RemoveRetailer removes "retailer" edges to RetailMerchant entities.
func (puo *ProductUpdateOne) RemoveRetailer(r ...*RetailMerchant) *ProductUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRetailerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	var (
		err  error
		node *Product
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Product.Name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`ent: validator failed for field "Product.Description": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Image(); ok {
		if err := product.ImageValidator(v); err != nil {
			return &ValidationError{Name: "Image", err: fmt.Errorf(`ent: validator failed for field "Product.Image": %w`, err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldName,
		})
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPrice,
		})
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPrice,
		})
	}
	if value, ok := puo.mutation.PromoPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPromoPrice,
		})
	}
	if value, ok := puo.mutation.AddedPromoPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPromoPrice,
		})
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDescription,
		})
	}
	if value, ok := puo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldImage,
		})
	}
	if puo.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.MajorTable,
			Columns: product.MajorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorymajor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMajorIDs(); len(nodes) > 0 && !puo.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.MajorTable,
			Columns: product.MajorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorymajor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.MajorTable,
			Columns: product.MajorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorymajor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MinorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.MinorTable,
			Columns: product.MinorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategoryminor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMinorIDs(); len(nodes) > 0 && !puo.mutation.MinorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.MinorTable,
			Columns: product.MinorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategoryminor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MinorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.MinorTable,
			Columns: product.MinorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategoryminor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MechantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.MechantTable,
			Columns: []string{product.MechantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMechantIDs(); len(nodes) > 0 && !puo.mutation.MechantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.MechantTable,
			Columns: []string{product.MechantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MechantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.MechantTable,
			Columns: []string{product.MechantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SupplierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.SupplierTable,
			Columns: []string{product.SupplierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: suppliermerchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSupplierIDs(); len(nodes) > 0 && !puo.mutation.SupplierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.SupplierTable,
			Columns: []string{product.SupplierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: suppliermerchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SupplierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.SupplierTable,
			Columns: []string{product.SupplierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: suppliermerchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RetailerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.RetailerTable,
			Columns: []string{product.RetailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: retailmerchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRetailerIDs(); len(nodes) > 0 && !puo.mutation.RetailerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.RetailerTable,
			Columns: []string{product.RetailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: retailmerchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RetailerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.RetailerTable,
			Columns: []string{product.RetailerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: retailmerchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
