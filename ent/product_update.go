// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/basket"
	"github.com/SeyramWood/ent/favourite"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/product"
	"github.com/SeyramWood/ent/productcategorymajor"
	"github.com/SeyramWood/ent/productcategoryminor"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetPrice sets the "price" field.
func (pu *ProductUpdate) SetPrice(f float64) *ProductUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePrice(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetPrice(*f)
	}
	return pu
}

// AddPrice adds f to the "price" field.
func (pu *ProductUpdate) AddPrice(f float64) *ProductUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// SetPromoPrice sets the "promo_price" field.
func (pu *ProductUpdate) SetPromoPrice(f float64) *ProductUpdate {
	pu.mutation.ResetPromoPrice()
	pu.mutation.SetPromoPrice(f)
	return pu
}

// SetNillablePromoPrice sets the "promo_price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePromoPrice(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetPromoPrice(*f)
	}
	return pu
}

// AddPromoPrice adds f to the "promo_price" field.
func (pu *ProductUpdate) AddPromoPrice(f float64) *ProductUpdate {
	pu.mutation.AddPromoPrice(f)
	return pu
}

// ClearPromoPrice clears the value of the "promo_price" field.
func (pu *ProductUpdate) ClearPromoPrice() *ProductUpdate {
	pu.mutation.ClearPromoPrice()
	return pu
}

// SetQuantity sets the "quantity" field.
func (pu *ProductUpdate) SetQuantity(u uint32) *ProductUpdate {
	pu.mutation.ResetQuantity()
	pu.mutation.SetQuantity(u)
	return pu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableQuantity(u *uint32) *ProductUpdate {
	if u != nil {
		pu.SetQuantity(*u)
	}
	return pu
}

// AddQuantity adds u to the "quantity" field.
func (pu *ProductUpdate) AddQuantity(u int32) *ProductUpdate {
	pu.mutation.AddQuantity(u)
	return pu
}

// SetUnit sets the "unit" field.
func (pu *ProductUpdate) SetUnit(s string) *ProductUpdate {
	pu.mutation.SetUnit(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetImage sets the "image" field.
func (pu *ProductUpdate) SetImage(s string) *ProductUpdate {
	pu.mutation.SetImage(s)
	return pu
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (pu *ProductUpdate) SetMerchantID(id int) *ProductUpdate {
	pu.mutation.SetMerchantID(id)
	return pu
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (pu *ProductUpdate) SetMerchant(m *Merchant) *ProductUpdate {
	return pu.SetMerchantID(m.ID)
}

// SetMajorID sets the "major" edge to the ProductCategoryMajor entity by ID.
func (pu *ProductUpdate) SetMajorID(id int) *ProductUpdate {
	pu.mutation.SetMajorID(id)
	return pu
}

// SetMajor sets the "major" edge to the ProductCategoryMajor entity.
func (pu *ProductUpdate) SetMajor(p *ProductCategoryMajor) *ProductUpdate {
	return pu.SetMajorID(p.ID)
}

// SetMinorID sets the "minor" edge to the ProductCategoryMinor entity by ID.
func (pu *ProductUpdate) SetMinorID(id int) *ProductUpdate {
	pu.mutation.SetMinorID(id)
	return pu
}

// SetMinor sets the "minor" edge to the ProductCategoryMinor entity.
func (pu *ProductUpdate) SetMinor(p *ProductCategoryMinor) *ProductUpdate {
	return pu.SetMinorID(p.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (pu *ProductUpdate) AddOrderIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddOrderIDs(ids...)
	return pu
}

// AddOrders adds the "orders" edges to the Order entity.
func (pu *ProductUpdate) AddOrders(o ...*Order) *ProductUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrderIDs(ids...)
}

// AddBasketIDs adds the "baskets" edge to the Basket entity by IDs.
func (pu *ProductUpdate) AddBasketIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddBasketIDs(ids...)
	return pu
}

// AddBaskets adds the "baskets" edges to the Basket entity.
func (pu *ProductUpdate) AddBaskets(b ...*Basket) *ProductUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBasketIDs(ids...)
}

// AddFavouriteIDs adds the "favourites" edge to the Favourite entity by IDs.
func (pu *ProductUpdate) AddFavouriteIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddFavouriteIDs(ids...)
	return pu
}

// AddFavourites adds the "favourites" edges to the Favourite entity.
func (pu *ProductUpdate) AddFavourites(f ...*Favourite) *ProductUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddFavouriteIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (pu *ProductUpdate) ClearMerchant() *ProductUpdate {
	pu.mutation.ClearMerchant()
	return pu
}

// ClearMajor clears the "major" edge to the ProductCategoryMajor entity.
func (pu *ProductUpdate) ClearMajor() *ProductUpdate {
	pu.mutation.ClearMajor()
	return pu
}

// ClearMinor clears the "minor" edge to the ProductCategoryMinor entity.
func (pu *ProductUpdate) ClearMinor() *ProductUpdate {
	pu.mutation.ClearMinor()
	return pu
}

// ClearOrders clears all "orders" edges to the Order entity.
func (pu *ProductUpdate) ClearOrders() *ProductUpdate {
	pu.mutation.ClearOrders()
	return pu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (pu *ProductUpdate) RemoveOrderIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveOrderIDs(ids...)
	return pu
}

// RemoveOrders removes "orders" edges to Order entities.
func (pu *ProductUpdate) RemoveOrders(o ...*Order) *ProductUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrderIDs(ids...)
}

// ClearBaskets clears all "baskets" edges to the Basket entity.
func (pu *ProductUpdate) ClearBaskets() *ProductUpdate {
	pu.mutation.ClearBaskets()
	return pu
}

// RemoveBasketIDs removes the "baskets" edge to Basket entities by IDs.
func (pu *ProductUpdate) RemoveBasketIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveBasketIDs(ids...)
	return pu
}

// RemoveBaskets removes "baskets" edges to Basket entities.
func (pu *ProductUpdate) RemoveBaskets(b ...*Basket) *ProductUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBasketIDs(ids...)
}

// ClearFavourites clears all "favourites" edges to the Favourite entity.
func (pu *ProductUpdate) ClearFavourites() *ProductUpdate {
	pu.mutation.ClearFavourites()
	return pu
}

// RemoveFavouriteIDs removes the "favourites" edge to Favourite entities by IDs.
func (pu *ProductUpdate) RemoveFavouriteIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveFavouriteIDs(ids...)
	return pu
}

// RemoveFavourites removes "favourites" edges to Favourite entities.
func (pu *ProductUpdate) RemoveFavourites(f ...*Favourite) *ProductUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveFavouriteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Unit(); ok {
		if err := product.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "Product.unit": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Image(); ok {
		if err := product.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Product.image": %w`, err)}
		}
	}
	if _, ok := pu.mutation.MerchantID(); pu.mutation.MerchantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Product.merchant"`)
	}
	if _, ok := pu.mutation.MajorID(); pu.mutation.MajorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Product.major"`)
	}
	if _, ok := pu.mutation.MinorID(); pu.mutation.MinorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Product.minor"`)
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldName,
		})
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPrice,
		})
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPrice,
		})
	}
	if value, ok := pu.mutation.PromoPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPromoPrice,
		})
	}
	if value, ok := pu.mutation.AddedPromoPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPromoPrice,
		})
	}
	if pu.mutation.PromoPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldPromoPrice,
		})
	}
	if value, ok := pu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: product.FieldQuantity,
		})
	}
	if value, ok := pu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: product.FieldQuantity,
		})
	}
	if value, ok := pu.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldUnit,
		})
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDescription,
		})
	}
	if value, ok := pu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldImage,
		})
	}
	if pu.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.MerchantTable,
			Columns: []string{product.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.MerchantTable,
			Columns: []string{product.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.MajorTable,
			Columns: []string{product.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorymajor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.MajorTable,
			Columns: []string{product.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorymajor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MinorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.MinorTable,
			Columns: []string{product.MinorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategoryminor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MinorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.MinorTable,
			Columns: []string{product.MinorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategoryminor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !pu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BasketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BasketsTable,
			Columns: []string{product.BasketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basket.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBasketsIDs(); len(nodes) > 0 && !pu.mutation.BasketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BasketsTable,
			Columns: []string{product.BasketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BasketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BasketsTable,
			Columns: []string{product.BasketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FavouritesTable,
			Columns: []string{product.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: favourite.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFavouritesIDs(); len(nodes) > 0 && !pu.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FavouritesTable,
			Columns: []string{product.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: favourite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FavouritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FavouritesTable,
			Columns: []string{product.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: favourite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetPrice sets the "price" field.
func (puo *ProductUpdateOne) SetPrice(f float64) *ProductUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePrice(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetPrice(*f)
	}
	return puo
}

// AddPrice adds f to the "price" field.
func (puo *ProductUpdateOne) AddPrice(f float64) *ProductUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// SetPromoPrice sets the "promo_price" field.
func (puo *ProductUpdateOne) SetPromoPrice(f float64) *ProductUpdateOne {
	puo.mutation.ResetPromoPrice()
	puo.mutation.SetPromoPrice(f)
	return puo
}

// SetNillablePromoPrice sets the "promo_price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePromoPrice(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetPromoPrice(*f)
	}
	return puo
}

// AddPromoPrice adds f to the "promo_price" field.
func (puo *ProductUpdateOne) AddPromoPrice(f float64) *ProductUpdateOne {
	puo.mutation.AddPromoPrice(f)
	return puo
}

// ClearPromoPrice clears the value of the "promo_price" field.
func (puo *ProductUpdateOne) ClearPromoPrice() *ProductUpdateOne {
	puo.mutation.ClearPromoPrice()
	return puo
}

// SetQuantity sets the "quantity" field.
func (puo *ProductUpdateOne) SetQuantity(u uint32) *ProductUpdateOne {
	puo.mutation.ResetQuantity()
	puo.mutation.SetQuantity(u)
	return puo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableQuantity(u *uint32) *ProductUpdateOne {
	if u != nil {
		puo.SetQuantity(*u)
	}
	return puo
}

// AddQuantity adds u to the "quantity" field.
func (puo *ProductUpdateOne) AddQuantity(u int32) *ProductUpdateOne {
	puo.mutation.AddQuantity(u)
	return puo
}

// SetUnit sets the "unit" field.
func (puo *ProductUpdateOne) SetUnit(s string) *ProductUpdateOne {
	puo.mutation.SetUnit(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetImage sets the "image" field.
func (puo *ProductUpdateOne) SetImage(s string) *ProductUpdateOne {
	puo.mutation.SetImage(s)
	return puo
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (puo *ProductUpdateOne) SetMerchantID(id int) *ProductUpdateOne {
	puo.mutation.SetMerchantID(id)
	return puo
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (puo *ProductUpdateOne) SetMerchant(m *Merchant) *ProductUpdateOne {
	return puo.SetMerchantID(m.ID)
}

// SetMajorID sets the "major" edge to the ProductCategoryMajor entity by ID.
func (puo *ProductUpdateOne) SetMajorID(id int) *ProductUpdateOne {
	puo.mutation.SetMajorID(id)
	return puo
}

// SetMajor sets the "major" edge to the ProductCategoryMajor entity.
func (puo *ProductUpdateOne) SetMajor(p *ProductCategoryMajor) *ProductUpdateOne {
	return puo.SetMajorID(p.ID)
}

// SetMinorID sets the "minor" edge to the ProductCategoryMinor entity by ID.
func (puo *ProductUpdateOne) SetMinorID(id int) *ProductUpdateOne {
	puo.mutation.SetMinorID(id)
	return puo
}

// SetMinor sets the "minor" edge to the ProductCategoryMinor entity.
func (puo *ProductUpdateOne) SetMinor(p *ProductCategoryMinor) *ProductUpdateOne {
	return puo.SetMinorID(p.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (puo *ProductUpdateOne) AddOrderIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddOrderIDs(ids...)
	return puo
}

// AddOrders adds the "orders" edges to the Order entity.
func (puo *ProductUpdateOne) AddOrders(o ...*Order) *ProductUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrderIDs(ids...)
}

// AddBasketIDs adds the "baskets" edge to the Basket entity by IDs.
func (puo *ProductUpdateOne) AddBasketIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddBasketIDs(ids...)
	return puo
}

// AddBaskets adds the "baskets" edges to the Basket entity.
func (puo *ProductUpdateOne) AddBaskets(b ...*Basket) *ProductUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBasketIDs(ids...)
}

// AddFavouriteIDs adds the "favourites" edge to the Favourite entity by IDs.
func (puo *ProductUpdateOne) AddFavouriteIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddFavouriteIDs(ids...)
	return puo
}

// AddFavourites adds the "favourites" edges to the Favourite entity.
func (puo *ProductUpdateOne) AddFavourites(f ...*Favourite) *ProductUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddFavouriteIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (puo *ProductUpdateOne) ClearMerchant() *ProductUpdateOne {
	puo.mutation.ClearMerchant()
	return puo
}

// ClearMajor clears the "major" edge to the ProductCategoryMajor entity.
func (puo *ProductUpdateOne) ClearMajor() *ProductUpdateOne {
	puo.mutation.ClearMajor()
	return puo
}

// ClearMinor clears the "minor" edge to the ProductCategoryMinor entity.
func (puo *ProductUpdateOne) ClearMinor() *ProductUpdateOne {
	puo.mutation.ClearMinor()
	return puo
}

// ClearOrders clears all "orders" edges to the Order entity.
func (puo *ProductUpdateOne) ClearOrders() *ProductUpdateOne {
	puo.mutation.ClearOrders()
	return puo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (puo *ProductUpdateOne) RemoveOrderIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveOrderIDs(ids...)
	return puo
}

// RemoveOrders removes "orders" edges to Order entities.
func (puo *ProductUpdateOne) RemoveOrders(o ...*Order) *ProductUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrderIDs(ids...)
}

// ClearBaskets clears all "baskets" edges to the Basket entity.
func (puo *ProductUpdateOne) ClearBaskets() *ProductUpdateOne {
	puo.mutation.ClearBaskets()
	return puo
}

// RemoveBasketIDs removes the "baskets" edge to Basket entities by IDs.
func (puo *ProductUpdateOne) RemoveBasketIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveBasketIDs(ids...)
	return puo
}

// RemoveBaskets removes "baskets" edges to Basket entities.
func (puo *ProductUpdateOne) RemoveBaskets(b ...*Basket) *ProductUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBasketIDs(ids...)
}

// ClearFavourites clears all "favourites" edges to the Favourite entity.
func (puo *ProductUpdateOne) ClearFavourites() *ProductUpdateOne {
	puo.mutation.ClearFavourites()
	return puo
}

// RemoveFavouriteIDs removes the "favourites" edge to Favourite entities by IDs.
func (puo *ProductUpdateOne) RemoveFavouriteIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveFavouriteIDs(ids...)
	return puo
}

// RemoveFavourites removes "favourites" edges to Favourite entities.
func (puo *ProductUpdateOne) RemoveFavourites(f ...*Favourite) *ProductUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveFavouriteIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	var (
		err  error
		node *Product
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Unit(); ok {
		if err := product.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "Product.unit": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Image(); ok {
		if err := product.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Product.image": %w`, err)}
		}
	}
	if _, ok := puo.mutation.MerchantID(); puo.mutation.MerchantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Product.merchant"`)
	}
	if _, ok := puo.mutation.MajorID(); puo.mutation.MajorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Product.major"`)
	}
	if _, ok := puo.mutation.MinorID(); puo.mutation.MinorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Product.minor"`)
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldName,
		})
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPrice,
		})
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPrice,
		})
	}
	if value, ok := puo.mutation.PromoPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPromoPrice,
		})
	}
	if value, ok := puo.mutation.AddedPromoPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldPromoPrice,
		})
	}
	if puo.mutation.PromoPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldPromoPrice,
		})
	}
	if value, ok := puo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: product.FieldQuantity,
		})
	}
	if value, ok := puo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: product.FieldQuantity,
		})
	}
	if value, ok := puo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldUnit,
		})
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDescription,
		})
	}
	if value, ok := puo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldImage,
		})
	}
	if puo.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.MerchantTable,
			Columns: []string{product.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.MerchantTable,
			Columns: []string{product.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.MajorTable,
			Columns: []string{product.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorymajor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.MajorTable,
			Columns: []string{product.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorymajor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MinorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.MinorTable,
			Columns: []string{product.MinorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategoryminor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MinorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.MinorTable,
			Columns: []string{product.MinorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategoryminor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !puo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BasketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BasketsTable,
			Columns: []string{product.BasketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basket.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBasketsIDs(); len(nodes) > 0 && !puo.mutation.BasketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BasketsTable,
			Columns: []string{product.BasketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BasketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.BasketsTable,
			Columns: []string{product.BasketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: basket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FavouritesTable,
			Columns: []string{product.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: favourite.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFavouritesIDs(); len(nodes) > 0 && !puo.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FavouritesTable,
			Columns: []string{product.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: favourite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FavouritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FavouritesTable,
			Columns: []string{product.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: favourite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
