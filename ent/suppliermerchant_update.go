// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/product"
	"github.com/SeyramWood/ent/suppliermerchant"
)

// SupplierMerchantUpdate is the builder for updating SupplierMerchant entities.
type SupplierMerchantUpdate struct {
	config
	hooks    []Hook
	mutation *SupplierMerchantMutation
}

// Where appends a list predicates to the SupplierMerchantUpdate builder.
func (smu *SupplierMerchantUpdate) Where(ps ...predicate.SupplierMerchant) *SupplierMerchantUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetUpdatedAt sets the "updated_at" field.
func (smu *SupplierMerchantUpdate) SetUpdatedAt(t time.Time) *SupplierMerchantUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// SetGhanaCard sets the "ghana_card" field.
func (smu *SupplierMerchantUpdate) SetGhanaCard(s string) *SupplierMerchantUpdate {
	smu.mutation.SetGhanaCard(s)
	return smu
}

// SetLastName sets the "last_name" field.
func (smu *SupplierMerchantUpdate) SetLastName(s string) *SupplierMerchantUpdate {
	smu.mutation.SetLastName(s)
	return smu
}

// SetOtherName sets the "other_name" field.
func (smu *SupplierMerchantUpdate) SetOtherName(s string) *SupplierMerchantUpdate {
	smu.mutation.SetOtherName(s)
	return smu
}

// SetPhone sets the "phone" field.
func (smu *SupplierMerchantUpdate) SetPhone(s string) *SupplierMerchantUpdate {
	smu.mutation.SetPhone(s)
	return smu
}

// SetOtherPhone sets the "other_phone" field.
func (smu *SupplierMerchantUpdate) SetOtherPhone(s string) *SupplierMerchantUpdate {
	smu.mutation.SetOtherPhone(s)
	return smu
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (smu *SupplierMerchantUpdate) SetNillableOtherPhone(s *string) *SupplierMerchantUpdate {
	if s != nil {
		smu.SetOtherPhone(*s)
	}
	return smu
}

// ClearOtherPhone clears the value of the "other_phone" field.
func (smu *SupplierMerchantUpdate) ClearOtherPhone() *SupplierMerchantUpdate {
	smu.mutation.ClearOtherPhone()
	return smu
}

// SetAddress sets the "address" field.
func (smu *SupplierMerchantUpdate) SetAddress(s string) *SupplierMerchantUpdate {
	smu.mutation.SetAddress(s)
	return smu
}

// SetDigitalAddress sets the "digital_address" field.
func (smu *SupplierMerchantUpdate) SetDigitalAddress(s string) *SupplierMerchantUpdate {
	smu.mutation.SetDigitalAddress(s)
	return smu
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (smu *SupplierMerchantUpdate) SetProductsID(id int) *SupplierMerchantUpdate {
	smu.mutation.SetProductsID(id)
	return smu
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (smu *SupplierMerchantUpdate) SetNillableProductsID(id *int) *SupplierMerchantUpdate {
	if id != nil {
		smu = smu.SetProductsID(*id)
	}
	return smu
}

// SetProducts sets the "products" edge to the Product entity.
func (smu *SupplierMerchantUpdate) SetProducts(p *Product) *SupplierMerchantUpdate {
	return smu.SetProductsID(p.ID)
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (smu *SupplierMerchantUpdate) SetMerchantID(id int) *SupplierMerchantUpdate {
	smu.mutation.SetMerchantID(id)
	return smu
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (smu *SupplierMerchantUpdate) SetMerchant(m *Merchant) *SupplierMerchantUpdate {
	return smu.SetMerchantID(m.ID)
}

// Mutation returns the SupplierMerchantMutation object of the builder.
func (smu *SupplierMerchantUpdate) Mutation() *SupplierMerchantMutation {
	return smu.mutation
}

// ClearProducts clears the "products" edge to the Product entity.
func (smu *SupplierMerchantUpdate) ClearProducts() *SupplierMerchantUpdate {
	smu.mutation.ClearProducts()
	return smu
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (smu *SupplierMerchantUpdate) ClearMerchant() *SupplierMerchantUpdate {
	smu.mutation.ClearMerchant()
	return smu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SupplierMerchantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	smu.defaults()
	if len(smu.hooks) == 0 {
		if err = smu.check(); err != nil {
			return 0, err
		}
		affected, err = smu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SupplierMerchantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smu.check(); err != nil {
				return 0, err
			}
			smu.mutation = mutation
			affected, err = smu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(smu.hooks) - 1; i >= 0; i-- {
			if smu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SupplierMerchantUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SupplierMerchantUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SupplierMerchantUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *SupplierMerchantUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok {
		v := suppliermerchant.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smu *SupplierMerchantUpdate) check() error {
	if v, ok := smu.mutation.GhanaCard(); ok {
		if err := suppliermerchant.GhanaCardValidator(v); err != nil {
			return &ValidationError{Name: "ghana_card", err: fmt.Errorf(`ent: validator failed for field "SupplierMerchant.ghana_card": %w`, err)}
		}
	}
	if v, ok := smu.mutation.LastName(); ok {
		if err := suppliermerchant.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "SupplierMerchant.last_name": %w`, err)}
		}
	}
	if v, ok := smu.mutation.OtherName(); ok {
		if err := suppliermerchant.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "SupplierMerchant.other_name": %w`, err)}
		}
	}
	if v, ok := smu.mutation.Phone(); ok {
		if err := suppliermerchant.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "SupplierMerchant.phone": %w`, err)}
		}
	}
	if v, ok := smu.mutation.Address(); ok {
		if err := suppliermerchant.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "SupplierMerchant.address": %w`, err)}
		}
	}
	if v, ok := smu.mutation.DigitalAddress(); ok {
		if err := suppliermerchant.DigitalAddressValidator(v); err != nil {
			return &ValidationError{Name: "digital_address", err: fmt.Errorf(`ent: validator failed for field "SupplierMerchant.digital_address": %w`, err)}
		}
	}
	if _, ok := smu.mutation.MerchantID(); smu.mutation.MerchantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SupplierMerchant.merchant"`)
	}
	return nil
}

func (smu *SupplierMerchantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   suppliermerchant.Table,
			Columns: suppliermerchant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: suppliermerchant.FieldID,
			},
		},
	}
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: suppliermerchant.FieldUpdatedAt,
		})
	}
	if value, ok := smu.mutation.GhanaCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldGhanaCard,
		})
	}
	if value, ok := smu.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldLastName,
		})
	}
	if value, ok := smu.mutation.OtherName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldOtherName,
		})
	}
	if value, ok := smu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldPhone,
		})
	}
	if value, ok := smu.mutation.OtherPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldOtherPhone,
		})
	}
	if smu.mutation.OtherPhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: suppliermerchant.FieldOtherPhone,
		})
	}
	if value, ok := smu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldAddress,
		})
	}
	if value, ok := smu.mutation.DigitalAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldDigitalAddress,
		})
	}
	if smu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   suppliermerchant.ProductsTable,
			Columns: []string{suppliermerchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   suppliermerchant.ProductsTable,
			Columns: []string{suppliermerchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   suppliermerchant.MerchantTable,
			Columns: []string{suppliermerchant.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   suppliermerchant.MerchantTable,
			Columns: []string{suppliermerchant.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{suppliermerchant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SupplierMerchantUpdateOne is the builder for updating a single SupplierMerchant entity.
type SupplierMerchantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SupplierMerchantMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (smuo *SupplierMerchantUpdateOne) SetUpdatedAt(t time.Time) *SupplierMerchantUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// SetGhanaCard sets the "ghana_card" field.
func (smuo *SupplierMerchantUpdateOne) SetGhanaCard(s string) *SupplierMerchantUpdateOne {
	smuo.mutation.SetGhanaCard(s)
	return smuo
}

// SetLastName sets the "last_name" field.
func (smuo *SupplierMerchantUpdateOne) SetLastName(s string) *SupplierMerchantUpdateOne {
	smuo.mutation.SetLastName(s)
	return smuo
}

// SetOtherName sets the "other_name" field.
func (smuo *SupplierMerchantUpdateOne) SetOtherName(s string) *SupplierMerchantUpdateOne {
	smuo.mutation.SetOtherName(s)
	return smuo
}

// SetPhone sets the "phone" field.
func (smuo *SupplierMerchantUpdateOne) SetPhone(s string) *SupplierMerchantUpdateOne {
	smuo.mutation.SetPhone(s)
	return smuo
}

// SetOtherPhone sets the "other_phone" field.
func (smuo *SupplierMerchantUpdateOne) SetOtherPhone(s string) *SupplierMerchantUpdateOne {
	smuo.mutation.SetOtherPhone(s)
	return smuo
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (smuo *SupplierMerchantUpdateOne) SetNillableOtherPhone(s *string) *SupplierMerchantUpdateOne {
	if s != nil {
		smuo.SetOtherPhone(*s)
	}
	return smuo
}

// ClearOtherPhone clears the value of the "other_phone" field.
func (smuo *SupplierMerchantUpdateOne) ClearOtherPhone() *SupplierMerchantUpdateOne {
	smuo.mutation.ClearOtherPhone()
	return smuo
}

// SetAddress sets the "address" field.
func (smuo *SupplierMerchantUpdateOne) SetAddress(s string) *SupplierMerchantUpdateOne {
	smuo.mutation.SetAddress(s)
	return smuo
}

// SetDigitalAddress sets the "digital_address" field.
func (smuo *SupplierMerchantUpdateOne) SetDigitalAddress(s string) *SupplierMerchantUpdateOne {
	smuo.mutation.SetDigitalAddress(s)
	return smuo
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (smuo *SupplierMerchantUpdateOne) SetProductsID(id int) *SupplierMerchantUpdateOne {
	smuo.mutation.SetProductsID(id)
	return smuo
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (smuo *SupplierMerchantUpdateOne) SetNillableProductsID(id *int) *SupplierMerchantUpdateOne {
	if id != nil {
		smuo = smuo.SetProductsID(*id)
	}
	return smuo
}

// SetProducts sets the "products" edge to the Product entity.
func (smuo *SupplierMerchantUpdateOne) SetProducts(p *Product) *SupplierMerchantUpdateOne {
	return smuo.SetProductsID(p.ID)
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (smuo *SupplierMerchantUpdateOne) SetMerchantID(id int) *SupplierMerchantUpdateOne {
	smuo.mutation.SetMerchantID(id)
	return smuo
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (smuo *SupplierMerchantUpdateOne) SetMerchant(m *Merchant) *SupplierMerchantUpdateOne {
	return smuo.SetMerchantID(m.ID)
}

// Mutation returns the SupplierMerchantMutation object of the builder.
func (smuo *SupplierMerchantUpdateOne) Mutation() *SupplierMerchantMutation {
	return smuo.mutation
}

// ClearProducts clears the "products" edge to the Product entity.
func (smuo *SupplierMerchantUpdateOne) ClearProducts() *SupplierMerchantUpdateOne {
	smuo.mutation.ClearProducts()
	return smuo
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (smuo *SupplierMerchantUpdateOne) ClearMerchant() *SupplierMerchantUpdateOne {
	smuo.mutation.ClearMerchant()
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SupplierMerchantUpdateOne) Select(field string, fields ...string) *SupplierMerchantUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SupplierMerchant entity.
func (smuo *SupplierMerchantUpdateOne) Save(ctx context.Context) (*SupplierMerchant, error) {
	var (
		err  error
		node *SupplierMerchant
	)
	smuo.defaults()
	if len(smuo.hooks) == 0 {
		if err = smuo.check(); err != nil {
			return nil, err
		}
		node, err = smuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SupplierMerchantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smuo.check(); err != nil {
				return nil, err
			}
			smuo.mutation = mutation
			node, err = smuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smuo.hooks) - 1; i >= 0; i-- {
			if smuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SupplierMerchantUpdateOne) SaveX(ctx context.Context) *SupplierMerchant {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SupplierMerchantUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SupplierMerchantUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *SupplierMerchantUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok {
		v := suppliermerchant.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smuo *SupplierMerchantUpdateOne) check() error {
	if v, ok := smuo.mutation.GhanaCard(); ok {
		if err := suppliermerchant.GhanaCardValidator(v); err != nil {
			return &ValidationError{Name: "ghana_card", err: fmt.Errorf(`ent: validator failed for field "SupplierMerchant.ghana_card": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.LastName(); ok {
		if err := suppliermerchant.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "SupplierMerchant.last_name": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.OtherName(); ok {
		if err := suppliermerchant.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "SupplierMerchant.other_name": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.Phone(); ok {
		if err := suppliermerchant.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "SupplierMerchant.phone": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.Address(); ok {
		if err := suppliermerchant.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "SupplierMerchant.address": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.DigitalAddress(); ok {
		if err := suppliermerchant.DigitalAddressValidator(v); err != nil {
			return &ValidationError{Name: "digital_address", err: fmt.Errorf(`ent: validator failed for field "SupplierMerchant.digital_address": %w`, err)}
		}
	}
	if _, ok := smuo.mutation.MerchantID(); smuo.mutation.MerchantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SupplierMerchant.merchant"`)
	}
	return nil
}

func (smuo *SupplierMerchantUpdateOne) sqlSave(ctx context.Context) (_node *SupplierMerchant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   suppliermerchant.Table,
			Columns: suppliermerchant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: suppliermerchant.FieldID,
			},
		},
	}
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SupplierMerchant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, suppliermerchant.FieldID)
		for _, f := range fields {
			if !suppliermerchant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != suppliermerchant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: suppliermerchant.FieldUpdatedAt,
		})
	}
	if value, ok := smuo.mutation.GhanaCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldGhanaCard,
		})
	}
	if value, ok := smuo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldLastName,
		})
	}
	if value, ok := smuo.mutation.OtherName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldOtherName,
		})
	}
	if value, ok := smuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldPhone,
		})
	}
	if value, ok := smuo.mutation.OtherPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldOtherPhone,
		})
	}
	if smuo.mutation.OtherPhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: suppliermerchant.FieldOtherPhone,
		})
	}
	if value, ok := smuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldAddress,
		})
	}
	if value, ok := smuo.mutation.DigitalAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: suppliermerchant.FieldDigitalAddress,
		})
	}
	if smuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   suppliermerchant.ProductsTable,
			Columns: []string{suppliermerchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   suppliermerchant.ProductsTable,
			Columns: []string{suppliermerchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   suppliermerchant.MerchantTable,
			Columns: []string{suppliermerchant.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   suppliermerchant.MerchantTable,
			Columns: []string{suppliermerchant.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SupplierMerchant{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{suppliermerchant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
