// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/product"
	"github.com/SeyramWood/ent/productcategorymajor"
	"github.com/SeyramWood/ent/productcategoryminor"
)

// ProductCategoryMinorUpdate is the builder for updating ProductCategoryMinor entities.
type ProductCategoryMinorUpdate struct {
	config
	hooks    []Hook
	mutation *ProductCategoryMinorMutation
}

// Where appends a list predicates to the ProductCategoryMinorUpdate builder.
func (pcmu *ProductCategoryMinorUpdate) Where(ps ...predicate.ProductCategoryMinor) *ProductCategoryMinorUpdate {
	pcmu.mutation.Where(ps...)
	return pcmu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcmu *ProductCategoryMinorUpdate) SetUpdatedAt(t time.Time) *ProductCategoryMinorUpdate {
	pcmu.mutation.SetUpdatedAt(t)
	return pcmu
}

// SetCategory sets the "category" field.
func (pcmu *ProductCategoryMinorUpdate) SetCategory(s string) *ProductCategoryMinorUpdate {
	pcmu.mutation.SetCategory(s)
	return pcmu
}

// SetImage sets the "image" field.
func (pcmu *ProductCategoryMinorUpdate) SetImage(s string) *ProductCategoryMinorUpdate {
	pcmu.mutation.SetImage(s)
	return pcmu
}

// SetSlug sets the "slug" field.
func (pcmu *ProductCategoryMinorUpdate) SetSlug(s string) *ProductCategoryMinorUpdate {
	pcmu.mutation.SetSlug(s)
	return pcmu
}

// SetPercentage sets the "percentage" field.
func (pcmu *ProductCategoryMinorUpdate) SetPercentage(i int) *ProductCategoryMinorUpdate {
	pcmu.mutation.ResetPercentage()
	pcmu.mutation.SetPercentage(i)
	return pcmu
}

// SetNillablePercentage sets the "percentage" field if the given value is not nil.
func (pcmu *ProductCategoryMinorUpdate) SetNillablePercentage(i *int) *ProductCategoryMinorUpdate {
	if i != nil {
		pcmu.SetPercentage(*i)
	}
	return pcmu
}

// AddPercentage adds i to the "percentage" field.
func (pcmu *ProductCategoryMinorUpdate) AddPercentage(i int) *ProductCategoryMinorUpdate {
	pcmu.mutation.AddPercentage(i)
	return pcmu
}

// ClearPercentage clears the value of the "percentage" field.
func (pcmu *ProductCategoryMinorUpdate) ClearPercentage() *ProductCategoryMinorUpdate {
	pcmu.mutation.ClearPercentage()
	return pcmu
}

// SetMajorID sets the "major" edge to the ProductCategoryMajor entity by ID.
func (pcmu *ProductCategoryMinorUpdate) SetMajorID(id int) *ProductCategoryMinorUpdate {
	pcmu.mutation.SetMajorID(id)
	return pcmu
}

// SetMajor sets the "major" edge to the ProductCategoryMajor entity.
func (pcmu *ProductCategoryMinorUpdate) SetMajor(p *ProductCategoryMajor) *ProductCategoryMinorUpdate {
	return pcmu.SetMajorID(p.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (pcmu *ProductCategoryMinorUpdate) AddProductIDs(ids ...int) *ProductCategoryMinorUpdate {
	pcmu.mutation.AddProductIDs(ids...)
	return pcmu
}

// AddProducts adds the "products" edges to the Product entity.
func (pcmu *ProductCategoryMinorUpdate) AddProducts(p ...*Product) *ProductCategoryMinorUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcmu.AddProductIDs(ids...)
}

// Mutation returns the ProductCategoryMinorMutation object of the builder.
func (pcmu *ProductCategoryMinorUpdate) Mutation() *ProductCategoryMinorMutation {
	return pcmu.mutation
}

// ClearMajor clears the "major" edge to the ProductCategoryMajor entity.
func (pcmu *ProductCategoryMinorUpdate) ClearMajor() *ProductCategoryMinorUpdate {
	pcmu.mutation.ClearMajor()
	return pcmu
}

// ClearProducts clears all "products" edges to the Product entity.
func (pcmu *ProductCategoryMinorUpdate) ClearProducts() *ProductCategoryMinorUpdate {
	pcmu.mutation.ClearProducts()
	return pcmu
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (pcmu *ProductCategoryMinorUpdate) RemoveProductIDs(ids ...int) *ProductCategoryMinorUpdate {
	pcmu.mutation.RemoveProductIDs(ids...)
	return pcmu
}

// RemoveProducts removes "products" edges to Product entities.
func (pcmu *ProductCategoryMinorUpdate) RemoveProducts(p ...*Product) *ProductCategoryMinorUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcmu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcmu *ProductCategoryMinorUpdate) Save(ctx context.Context) (int, error) {
	pcmu.defaults()
	return withHooks(ctx, pcmu.sqlSave, pcmu.mutation, pcmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcmu *ProductCategoryMinorUpdate) SaveX(ctx context.Context) int {
	affected, err := pcmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcmu *ProductCategoryMinorUpdate) Exec(ctx context.Context) error {
	_, err := pcmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcmu *ProductCategoryMinorUpdate) ExecX(ctx context.Context) {
	if err := pcmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcmu *ProductCategoryMinorUpdate) defaults() {
	if _, ok := pcmu.mutation.UpdatedAt(); !ok {
		v := productcategoryminor.UpdateDefaultUpdatedAt()
		pcmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcmu *ProductCategoryMinorUpdate) check() error {
	if v, ok := pcmu.mutation.Category(); ok {
		if err := productcategoryminor.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ProductCategoryMinor.category": %w`, err)}
		}
	}
	if v, ok := pcmu.mutation.Image(); ok {
		if err := productcategoryminor.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "ProductCategoryMinor.image": %w`, err)}
		}
	}
	if v, ok := pcmu.mutation.Slug(); ok {
		if err := productcategoryminor.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "ProductCategoryMinor.slug": %w`, err)}
		}
	}
	if _, ok := pcmu.mutation.MajorID(); pcmu.mutation.MajorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductCategoryMinor.major"`)
	}
	return nil
}

func (pcmu *ProductCategoryMinorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productcategoryminor.Table, productcategoryminor.Columns, sqlgraph.NewFieldSpec(productcategoryminor.FieldID, field.TypeInt))
	if ps := pcmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcmu.mutation.UpdatedAt(); ok {
		_spec.SetField(productcategoryminor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcmu.mutation.Category(); ok {
		_spec.SetField(productcategoryminor.FieldCategory, field.TypeString, value)
	}
	if value, ok := pcmu.mutation.Image(); ok {
		_spec.SetField(productcategoryminor.FieldImage, field.TypeString, value)
	}
	if value, ok := pcmu.mutation.Slug(); ok {
		_spec.SetField(productcategoryminor.FieldSlug, field.TypeString, value)
	}
	if value, ok := pcmu.mutation.Percentage(); ok {
		_spec.SetField(productcategoryminor.FieldPercentage, field.TypeInt, value)
	}
	if value, ok := pcmu.mutation.AddedPercentage(); ok {
		_spec.AddField(productcategoryminor.FieldPercentage, field.TypeInt, value)
	}
	if pcmu.mutation.PercentageCleared() {
		_spec.ClearField(productcategoryminor.FieldPercentage, field.TypeInt)
	}
	if pcmu.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategoryminor.MajorTable,
			Columns: []string{productcategoryminor.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategorymajor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmu.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategoryminor.MajorTable,
			Columns: []string{productcategoryminor.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategorymajor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcmu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategoryminor.ProductsTable,
			Columns: []string{productcategoryminor.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !pcmu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategoryminor.ProductsTable,
			Columns: []string{productcategoryminor.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategoryminor.ProductsTable,
			Columns: []string{productcategoryminor.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategoryminor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcmu.mutation.done = true
	return n, nil
}

// ProductCategoryMinorUpdateOne is the builder for updating a single ProductCategoryMinor entity.
type ProductCategoryMinorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductCategoryMinorMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pcmuo *ProductCategoryMinorUpdateOne) SetUpdatedAt(t time.Time) *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.SetUpdatedAt(t)
	return pcmuo
}

// SetCategory sets the "category" field.
func (pcmuo *ProductCategoryMinorUpdateOne) SetCategory(s string) *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.SetCategory(s)
	return pcmuo
}

// SetImage sets the "image" field.
func (pcmuo *ProductCategoryMinorUpdateOne) SetImage(s string) *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.SetImage(s)
	return pcmuo
}

// SetSlug sets the "slug" field.
func (pcmuo *ProductCategoryMinorUpdateOne) SetSlug(s string) *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.SetSlug(s)
	return pcmuo
}

// SetPercentage sets the "percentage" field.
func (pcmuo *ProductCategoryMinorUpdateOne) SetPercentage(i int) *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.ResetPercentage()
	pcmuo.mutation.SetPercentage(i)
	return pcmuo
}

// SetNillablePercentage sets the "percentage" field if the given value is not nil.
func (pcmuo *ProductCategoryMinorUpdateOne) SetNillablePercentage(i *int) *ProductCategoryMinorUpdateOne {
	if i != nil {
		pcmuo.SetPercentage(*i)
	}
	return pcmuo
}

// AddPercentage adds i to the "percentage" field.
func (pcmuo *ProductCategoryMinorUpdateOne) AddPercentage(i int) *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.AddPercentage(i)
	return pcmuo
}

// ClearPercentage clears the value of the "percentage" field.
func (pcmuo *ProductCategoryMinorUpdateOne) ClearPercentage() *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.ClearPercentage()
	return pcmuo
}

// SetMajorID sets the "major" edge to the ProductCategoryMajor entity by ID.
func (pcmuo *ProductCategoryMinorUpdateOne) SetMajorID(id int) *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.SetMajorID(id)
	return pcmuo
}

// SetMajor sets the "major" edge to the ProductCategoryMajor entity.
func (pcmuo *ProductCategoryMinorUpdateOne) SetMajor(p *ProductCategoryMajor) *ProductCategoryMinorUpdateOne {
	return pcmuo.SetMajorID(p.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (pcmuo *ProductCategoryMinorUpdateOne) AddProductIDs(ids ...int) *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.AddProductIDs(ids...)
	return pcmuo
}

// AddProducts adds the "products" edges to the Product entity.
func (pcmuo *ProductCategoryMinorUpdateOne) AddProducts(p ...*Product) *ProductCategoryMinorUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcmuo.AddProductIDs(ids...)
}

// Mutation returns the ProductCategoryMinorMutation object of the builder.
func (pcmuo *ProductCategoryMinorUpdateOne) Mutation() *ProductCategoryMinorMutation {
	return pcmuo.mutation
}

// ClearMajor clears the "major" edge to the ProductCategoryMajor entity.
func (pcmuo *ProductCategoryMinorUpdateOne) ClearMajor() *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.ClearMajor()
	return pcmuo
}

// ClearProducts clears all "products" edges to the Product entity.
func (pcmuo *ProductCategoryMinorUpdateOne) ClearProducts() *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.ClearProducts()
	return pcmuo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (pcmuo *ProductCategoryMinorUpdateOne) RemoveProductIDs(ids ...int) *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.RemoveProductIDs(ids...)
	return pcmuo
}

// RemoveProducts removes "products" edges to Product entities.
func (pcmuo *ProductCategoryMinorUpdateOne) RemoveProducts(p ...*Product) *ProductCategoryMinorUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcmuo.RemoveProductIDs(ids...)
}

// Where appends a list predicates to the ProductCategoryMinorUpdate builder.
func (pcmuo *ProductCategoryMinorUpdateOne) Where(ps ...predicate.ProductCategoryMinor) *ProductCategoryMinorUpdateOne {
	pcmuo.mutation.Where(ps...)
	return pcmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcmuo *ProductCategoryMinorUpdateOne) Select(field string, fields ...string) *ProductCategoryMinorUpdateOne {
	pcmuo.fields = append([]string{field}, fields...)
	return pcmuo
}

// Save executes the query and returns the updated ProductCategoryMinor entity.
func (pcmuo *ProductCategoryMinorUpdateOne) Save(ctx context.Context) (*ProductCategoryMinor, error) {
	pcmuo.defaults()
	return withHooks(ctx, pcmuo.sqlSave, pcmuo.mutation, pcmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcmuo *ProductCategoryMinorUpdateOne) SaveX(ctx context.Context) *ProductCategoryMinor {
	node, err := pcmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcmuo *ProductCategoryMinorUpdateOne) Exec(ctx context.Context) error {
	_, err := pcmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcmuo *ProductCategoryMinorUpdateOne) ExecX(ctx context.Context) {
	if err := pcmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcmuo *ProductCategoryMinorUpdateOne) defaults() {
	if _, ok := pcmuo.mutation.UpdatedAt(); !ok {
		v := productcategoryminor.UpdateDefaultUpdatedAt()
		pcmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcmuo *ProductCategoryMinorUpdateOne) check() error {
	if v, ok := pcmuo.mutation.Category(); ok {
		if err := productcategoryminor.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ProductCategoryMinor.category": %w`, err)}
		}
	}
	if v, ok := pcmuo.mutation.Image(); ok {
		if err := productcategoryminor.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "ProductCategoryMinor.image": %w`, err)}
		}
	}
	if v, ok := pcmuo.mutation.Slug(); ok {
		if err := productcategoryminor.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "ProductCategoryMinor.slug": %w`, err)}
		}
	}
	if _, ok := pcmuo.mutation.MajorID(); pcmuo.mutation.MajorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductCategoryMinor.major"`)
	}
	return nil
}

func (pcmuo *ProductCategoryMinorUpdateOne) sqlSave(ctx context.Context) (_node *ProductCategoryMinor, err error) {
	if err := pcmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productcategoryminor.Table, productcategoryminor.Columns, sqlgraph.NewFieldSpec(productcategoryminor.FieldID, field.TypeInt))
	id, ok := pcmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductCategoryMinor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productcategoryminor.FieldID)
		for _, f := range fields {
			if !productcategoryminor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productcategoryminor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productcategoryminor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcmuo.mutation.Category(); ok {
		_spec.SetField(productcategoryminor.FieldCategory, field.TypeString, value)
	}
	if value, ok := pcmuo.mutation.Image(); ok {
		_spec.SetField(productcategoryminor.FieldImage, field.TypeString, value)
	}
	if value, ok := pcmuo.mutation.Slug(); ok {
		_spec.SetField(productcategoryminor.FieldSlug, field.TypeString, value)
	}
	if value, ok := pcmuo.mutation.Percentage(); ok {
		_spec.SetField(productcategoryminor.FieldPercentage, field.TypeInt, value)
	}
	if value, ok := pcmuo.mutation.AddedPercentage(); ok {
		_spec.AddField(productcategoryminor.FieldPercentage, field.TypeInt, value)
	}
	if pcmuo.mutation.PercentageCleared() {
		_spec.ClearField(productcategoryminor.FieldPercentage, field.TypeInt)
	}
	if pcmuo.mutation.MajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategoryminor.MajorTable,
			Columns: []string{productcategoryminor.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategorymajor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmuo.mutation.MajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategoryminor.MajorTable,
			Columns: []string{productcategoryminor.MajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategorymajor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcmuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategoryminor.ProductsTable,
			Columns: []string{productcategoryminor.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmuo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !pcmuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategoryminor.ProductsTable,
			Columns: []string{productcategoryminor.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategoryminor.ProductsTable,
			Columns: []string{productcategoryminor.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductCategoryMinor{config: pcmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategoryminor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcmuo.mutation.done = true
	return _node, nil
}
