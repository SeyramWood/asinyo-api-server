// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/product"
	"github.com/SeyramWood/ent/productcategorymajor"
	"github.com/SeyramWood/ent/productcategoryminor"
)

// ProductCategoryMinorQuery is the builder for querying ProductCategoryMinor entities.
type ProductCategoryMinorQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.ProductCategoryMinor
	withMajor    *ProductCategoryMajorQuery
	withProducts *ProductQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductCategoryMinorQuery builder.
func (pcmq *ProductCategoryMinorQuery) Where(ps ...predicate.ProductCategoryMinor) *ProductCategoryMinorQuery {
	pcmq.predicates = append(pcmq.predicates, ps...)
	return pcmq
}

// Limit adds a limit step to the query.
func (pcmq *ProductCategoryMinorQuery) Limit(limit int) *ProductCategoryMinorQuery {
	pcmq.limit = &limit
	return pcmq
}

// Offset adds an offset step to the query.
func (pcmq *ProductCategoryMinorQuery) Offset(offset int) *ProductCategoryMinorQuery {
	pcmq.offset = &offset
	return pcmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pcmq *ProductCategoryMinorQuery) Unique(unique bool) *ProductCategoryMinorQuery {
	pcmq.unique = &unique
	return pcmq
}

// Order adds an order step to the query.
func (pcmq *ProductCategoryMinorQuery) Order(o ...OrderFunc) *ProductCategoryMinorQuery {
	pcmq.order = append(pcmq.order, o...)
	return pcmq
}

// QueryMajor chains the current query on the "major" edge.
func (pcmq *ProductCategoryMinorQuery) QueryMajor() *ProductCategoryMajorQuery {
	query := &ProductCategoryMajorQuery{config: pcmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategoryminor.Table, productcategoryminor.FieldID, selector),
			sqlgraph.To(productcategorymajor.Table, productcategorymajor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productcategoryminor.MajorTable, productcategoryminor.MajorColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProducts chains the current query on the "products" edge.
func (pcmq *ProductCategoryMinorQuery) QueryProducts() *ProductQuery {
	query := &ProductQuery{config: pcmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategoryminor.Table, productcategoryminor.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategoryminor.ProductsTable, productcategoryminor.ProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductCategoryMinor entity from the query.
// Returns a *NotFoundError when no ProductCategoryMinor was found.
func (pcmq *ProductCategoryMinorQuery) First(ctx context.Context) (*ProductCategoryMinor, error) {
	nodes, err := pcmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productcategoryminor.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pcmq *ProductCategoryMinorQuery) FirstX(ctx context.Context) *ProductCategoryMinor {
	node, err := pcmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductCategoryMinor ID from the query.
// Returns a *NotFoundError when no ProductCategoryMinor ID was found.
func (pcmq *ProductCategoryMinorQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pcmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productcategoryminor.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pcmq *ProductCategoryMinorQuery) FirstIDX(ctx context.Context) int {
	id, err := pcmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductCategoryMinor entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProductCategoryMinor entity is found.
// Returns a *NotFoundError when no ProductCategoryMinor entities are found.
func (pcmq *ProductCategoryMinorQuery) Only(ctx context.Context) (*ProductCategoryMinor, error) {
	nodes, err := pcmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productcategoryminor.Label}
	default:
		return nil, &NotSingularError{productcategoryminor.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pcmq *ProductCategoryMinorQuery) OnlyX(ctx context.Context) *ProductCategoryMinor {
	node, err := pcmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductCategoryMinor ID in the query.
// Returns a *NotSingularError when more than one ProductCategoryMinor ID is found.
// Returns a *NotFoundError when no entities are found.
func (pcmq *ProductCategoryMinorQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pcmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productcategoryminor.Label}
	default:
		err = &NotSingularError{productcategoryminor.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pcmq *ProductCategoryMinorQuery) OnlyIDX(ctx context.Context) int {
	id, err := pcmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductCategoryMinors.
func (pcmq *ProductCategoryMinorQuery) All(ctx context.Context) ([]*ProductCategoryMinor, error) {
	if err := pcmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pcmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pcmq *ProductCategoryMinorQuery) AllX(ctx context.Context) []*ProductCategoryMinor {
	nodes, err := pcmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductCategoryMinor IDs.
func (pcmq *ProductCategoryMinorQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pcmq.Select(productcategoryminor.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pcmq *ProductCategoryMinorQuery) IDsX(ctx context.Context) []int {
	ids, err := pcmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pcmq *ProductCategoryMinorQuery) Count(ctx context.Context) (int, error) {
	if err := pcmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pcmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pcmq *ProductCategoryMinorQuery) CountX(ctx context.Context) int {
	count, err := pcmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pcmq *ProductCategoryMinorQuery) Exist(ctx context.Context) (bool, error) {
	if err := pcmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pcmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pcmq *ProductCategoryMinorQuery) ExistX(ctx context.Context) bool {
	exist, err := pcmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductCategoryMinorQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pcmq *ProductCategoryMinorQuery) Clone() *ProductCategoryMinorQuery {
	if pcmq == nil {
		return nil
	}
	return &ProductCategoryMinorQuery{
		config:       pcmq.config,
		limit:        pcmq.limit,
		offset:       pcmq.offset,
		order:        append([]OrderFunc{}, pcmq.order...),
		predicates:   append([]predicate.ProductCategoryMinor{}, pcmq.predicates...),
		withMajor:    pcmq.withMajor.Clone(),
		withProducts: pcmq.withProducts.Clone(),
		// clone intermediate query.
		sql:    pcmq.sql.Clone(),
		path:   pcmq.path,
		unique: pcmq.unique,
	}
}

// WithMajor tells the query-builder to eager-load the nodes that are connected to
// the "major" edge. The optional arguments are used to configure the query builder of the edge.
func (pcmq *ProductCategoryMinorQuery) WithMajor(opts ...func(*ProductCategoryMajorQuery)) *ProductCategoryMinorQuery {
	query := &ProductCategoryMajorQuery{config: pcmq.config}
	for _, opt := range opts {
		opt(query)
	}
	pcmq.withMajor = query
	return pcmq
}

// WithProducts tells the query-builder to eager-load the nodes that are connected to
// the "products" edge. The optional arguments are used to configure the query builder of the edge.
func (pcmq *ProductCategoryMinorQuery) WithProducts(opts ...func(*ProductQuery)) *ProductCategoryMinorQuery {
	query := &ProductQuery{config: pcmq.config}
	for _, opt := range opts {
		opt(query)
	}
	pcmq.withProducts = query
	return pcmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductCategoryMinor.Query().
//		GroupBy(productcategoryminor.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pcmq *ProductCategoryMinorQuery) GroupBy(field string, fields ...string) *ProductCategoryMinorGroupBy {
	grbuild := &ProductCategoryMinorGroupBy{config: pcmq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pcmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pcmq.sqlQuery(ctx), nil
	}
	grbuild.label = productcategoryminor.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ProductCategoryMinor.Query().
//		Select(productcategoryminor.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (pcmq *ProductCategoryMinorQuery) Select(fields ...string) *ProductCategoryMinorSelect {
	pcmq.fields = append(pcmq.fields, fields...)
	selbuild := &ProductCategoryMinorSelect{ProductCategoryMinorQuery: pcmq}
	selbuild.label = productcategoryminor.Label
	selbuild.flds, selbuild.scan = &pcmq.fields, selbuild.Scan
	return selbuild
}

func (pcmq *ProductCategoryMinorQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pcmq.fields {
		if !productcategoryminor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pcmq.path != nil {
		prev, err := pcmq.path(ctx)
		if err != nil {
			return err
		}
		pcmq.sql = prev
	}
	return nil
}

func (pcmq *ProductCategoryMinorQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProductCategoryMinor, error) {
	var (
		nodes       = []*ProductCategoryMinor{}
		withFKs     = pcmq.withFKs
		_spec       = pcmq.querySpec()
		loadedTypes = [2]bool{
			pcmq.withMajor != nil,
			pcmq.withProducts != nil,
		}
	)
	if pcmq.withMajor != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, productcategoryminor.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProductCategoryMinor).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProductCategoryMinor{config: pcmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pcmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pcmq.withMajor; query != nil {
		if err := pcmq.loadMajor(ctx, query, nodes, nil,
			func(n *ProductCategoryMinor, e *ProductCategoryMajor) { n.Edges.Major = e }); err != nil {
			return nil, err
		}
	}
	if query := pcmq.withProducts; query != nil {
		if err := pcmq.loadProducts(ctx, query, nodes,
			func(n *ProductCategoryMinor) { n.Edges.Products = []*Product{} },
			func(n *ProductCategoryMinor, e *Product) { n.Edges.Products = append(n.Edges.Products, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pcmq *ProductCategoryMinorQuery) loadMajor(ctx context.Context, query *ProductCategoryMajorQuery, nodes []*ProductCategoryMinor, init func(*ProductCategoryMinor), assign func(*ProductCategoryMinor, *ProductCategoryMajor)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProductCategoryMinor)
	for i := range nodes {
		if nodes[i].product_category_major_minors == nil {
			continue
		}
		fk := *nodes[i].product_category_major_minors
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(productcategorymajor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_category_major_minors" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pcmq *ProductCategoryMinorQuery) loadProducts(ctx context.Context, query *ProductQuery, nodes []*ProductCategoryMinor, init func(*ProductCategoryMinor), assign func(*ProductCategoryMinor, *Product)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ProductCategoryMinor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Product(func(s *sql.Selector) {
		s.Where(sql.InValues(productcategoryminor.ProductsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_category_minor_products
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_category_minor_products" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_category_minor_products" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pcmq *ProductCategoryMinorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pcmq.querySpec()
	_spec.Node.Columns = pcmq.fields
	if len(pcmq.fields) > 0 {
		_spec.Unique = pcmq.unique != nil && *pcmq.unique
	}
	return sqlgraph.CountNodes(ctx, pcmq.driver, _spec)
}

func (pcmq *ProductCategoryMinorQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := pcmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (pcmq *ProductCategoryMinorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productcategoryminor.Table,
			Columns: productcategoryminor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcategoryminor.FieldID,
			},
		},
		From:   pcmq.sql,
		Unique: true,
	}
	if unique := pcmq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pcmq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productcategoryminor.FieldID)
		for i := range fields {
			if fields[i] != productcategoryminor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pcmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pcmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pcmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pcmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pcmq *ProductCategoryMinorQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pcmq.driver.Dialect())
	t1 := builder.Table(productcategoryminor.Table)
	columns := pcmq.fields
	if len(columns) == 0 {
		columns = productcategoryminor.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pcmq.sql != nil {
		selector = pcmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pcmq.unique != nil && *pcmq.unique {
		selector.Distinct()
	}
	for _, p := range pcmq.predicates {
		p(selector)
	}
	for _, p := range pcmq.order {
		p(selector)
	}
	if offset := pcmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pcmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductCategoryMinorGroupBy is the group-by builder for ProductCategoryMinor entities.
type ProductCategoryMinorGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pcmgb *ProductCategoryMinorGroupBy) Aggregate(fns ...AggregateFunc) *ProductCategoryMinorGroupBy {
	pcmgb.fns = append(pcmgb.fns, fns...)
	return pcmgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pcmgb *ProductCategoryMinorGroupBy) Scan(ctx context.Context, v any) error {
	query, err := pcmgb.path(ctx)
	if err != nil {
		return err
	}
	pcmgb.sql = query
	return pcmgb.sqlScan(ctx, v)
}

func (pcmgb *ProductCategoryMinorGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range pcmgb.fields {
		if !productcategoryminor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pcmgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pcmgb *ProductCategoryMinorGroupBy) sqlQuery() *sql.Selector {
	selector := pcmgb.sql.Select()
	aggregation := make([]string, 0, len(pcmgb.fns))
	for _, fn := range pcmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pcmgb.fields)+len(pcmgb.fns))
		for _, f := range pcmgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pcmgb.fields...)...)
}

// ProductCategoryMinorSelect is the builder for selecting fields of ProductCategoryMinor entities.
type ProductCategoryMinorSelect struct {
	*ProductCategoryMinorQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pcms *ProductCategoryMinorSelect) Scan(ctx context.Context, v any) error {
	if err := pcms.prepareQuery(ctx); err != nil {
		return err
	}
	pcms.sql = pcms.ProductCategoryMinorQuery.sqlQuery(ctx)
	return pcms.sqlScan(ctx, v)
}

func (pcms *ProductCategoryMinorSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := pcms.sql.Query()
	if err := pcms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
