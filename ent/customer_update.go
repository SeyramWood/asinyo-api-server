// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/address"
	"github.com/SeyramWood/ent/admin"
	"github.com/SeyramWood/ent/businesscustomer"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/favourite"
	"github.com/SeyramWood/ent/individualcustomer"
	"github.com/SeyramWood/ent/notification"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/purchaserequest"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CustomerUpdate) SetUpdatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUsername sets the "username" field.
func (cu *CustomerUpdate) SetUsername(s string) *CustomerUpdate {
	cu.mutation.SetUsername(s)
	return cu
}

// SetPassword sets the "password" field.
func (cu *CustomerUpdate) SetPassword(b []byte) *CustomerUpdate {
	cu.mutation.SetPassword(b)
	return cu
}

// SetType sets the "type" field.
func (cu *CustomerUpdate) SetType(s string) *CustomerUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetBusinessID sets the "business" edge to the BusinessCustomer entity by ID.
func (cu *CustomerUpdate) SetBusinessID(id int) *CustomerUpdate {
	cu.mutation.SetBusinessID(id)
	return cu
}

// SetNillableBusinessID sets the "business" edge to the BusinessCustomer entity by ID if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBusinessID(id *int) *CustomerUpdate {
	if id != nil {
		cu = cu.SetBusinessID(*id)
	}
	return cu
}

// SetBusiness sets the "business" edge to the BusinessCustomer entity.
func (cu *CustomerUpdate) SetBusiness(b *BusinessCustomer) *CustomerUpdate {
	return cu.SetBusinessID(b.ID)
}

// SetIndividualID sets the "individual" edge to the IndividualCustomer entity by ID.
func (cu *CustomerUpdate) SetIndividualID(id int) *CustomerUpdate {
	cu.mutation.SetIndividualID(id)
	return cu
}

// SetNillableIndividualID sets the "individual" edge to the IndividualCustomer entity by ID if the given value is not nil.
func (cu *CustomerUpdate) SetNillableIndividualID(id *int) *CustomerUpdate {
	if id != nil {
		cu = cu.SetIndividualID(*id)
	}
	return cu
}

// SetIndividual sets the "individual" edge to the IndividualCustomer entity.
func (cu *CustomerUpdate) SetIndividual(i *IndividualCustomer) *CustomerUpdate {
	return cu.SetIndividualID(i.ID)
}

// AddAddressIDs adds the "addresses" edge to the Address entity by IDs.
func (cu *CustomerUpdate) AddAddressIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddAddressIDs(ids...)
	return cu
}

// AddAddresses adds the "addresses" edges to the Address entity.
func (cu *CustomerUpdate) AddAddresses(a ...*Address) *CustomerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAddressIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cu *CustomerUpdate) AddOrderIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddOrderIDs(ids...)
	return cu
}

// AddOrders adds the "orders" edges to the Order entity.
func (cu *CustomerUpdate) AddOrders(o ...*Order) *CustomerUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOrderIDs(ids...)
}

// AddFavouriteIDs adds the "favourites" edge to the Favourite entity by IDs.
func (cu *CustomerUpdate) AddFavouriteIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddFavouriteIDs(ids...)
	return cu
}

// AddFavourites adds the "favourites" edges to the Favourite entity.
func (cu *CustomerUpdate) AddFavourites(f ...*Favourite) *CustomerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.AddFavouriteIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (cu *CustomerUpdate) AddNotificationIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddNotificationIDs(ids...)
	return cu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (cu *CustomerUpdate) AddNotifications(n ...*Notification) *CustomerUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.AddNotificationIDs(ids...)
}

// AddPurchaseRequestIDs adds the "purchase_request" edge to the PurchaseRequest entity by IDs.
func (cu *CustomerUpdate) AddPurchaseRequestIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddPurchaseRequestIDs(ids...)
	return cu
}

// AddPurchaseRequest adds the "purchase_request" edges to the PurchaseRequest entity.
func (cu *CustomerUpdate) AddPurchaseRequest(p ...*PurchaseRequest) *CustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPurchaseRequestIDs(ids...)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (cu *CustomerUpdate) SetAdminID(id int) *CustomerUpdate {
	cu.mutation.SetAdminID(id)
	return cu
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAdminID(id *int) *CustomerUpdate {
	if id != nil {
		cu = cu.SetAdminID(*id)
	}
	return cu
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (cu *CustomerUpdate) SetAdmin(a *Admin) *CustomerUpdate {
	return cu.SetAdminID(a.ID)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearBusiness clears the "business" edge to the BusinessCustomer entity.
func (cu *CustomerUpdate) ClearBusiness() *CustomerUpdate {
	cu.mutation.ClearBusiness()
	return cu
}

// ClearIndividual clears the "individual" edge to the IndividualCustomer entity.
func (cu *CustomerUpdate) ClearIndividual() *CustomerUpdate {
	cu.mutation.ClearIndividual()
	return cu
}

// ClearAddresses clears all "addresses" edges to the Address entity.
func (cu *CustomerUpdate) ClearAddresses() *CustomerUpdate {
	cu.mutation.ClearAddresses()
	return cu
}

// RemoveAddressIDs removes the "addresses" edge to Address entities by IDs.
func (cu *CustomerUpdate) RemoveAddressIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveAddressIDs(ids...)
	return cu
}

// RemoveAddresses removes "addresses" edges to Address entities.
func (cu *CustomerUpdate) RemoveAddresses(a ...*Address) *CustomerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAddressIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (cu *CustomerUpdate) ClearOrders() *CustomerUpdate {
	cu.mutation.ClearOrders()
	return cu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (cu *CustomerUpdate) RemoveOrderIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveOrderIDs(ids...)
	return cu
}

// RemoveOrders removes "orders" edges to Order entities.
func (cu *CustomerUpdate) RemoveOrders(o ...*Order) *CustomerUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOrderIDs(ids...)
}

// ClearFavourites clears all "favourites" edges to the Favourite entity.
func (cu *CustomerUpdate) ClearFavourites() *CustomerUpdate {
	cu.mutation.ClearFavourites()
	return cu
}

// RemoveFavouriteIDs removes the "favourites" edge to Favourite entities by IDs.
func (cu *CustomerUpdate) RemoveFavouriteIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveFavouriteIDs(ids...)
	return cu
}

// RemoveFavourites removes "favourites" edges to Favourite entities.
func (cu *CustomerUpdate) RemoveFavourites(f ...*Favourite) *CustomerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.RemoveFavouriteIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (cu *CustomerUpdate) ClearNotifications() *CustomerUpdate {
	cu.mutation.ClearNotifications()
	return cu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (cu *CustomerUpdate) RemoveNotificationIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveNotificationIDs(ids...)
	return cu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (cu *CustomerUpdate) RemoveNotifications(n ...*Notification) *CustomerUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.RemoveNotificationIDs(ids...)
}

// ClearPurchaseRequest clears all "purchase_request" edges to the PurchaseRequest entity.
func (cu *CustomerUpdate) ClearPurchaseRequest() *CustomerUpdate {
	cu.mutation.ClearPurchaseRequest()
	return cu
}

// RemovePurchaseRequestIDs removes the "purchase_request" edge to PurchaseRequest entities by IDs.
func (cu *CustomerUpdate) RemovePurchaseRequestIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemovePurchaseRequestIDs(ids...)
	return cu
}

// RemovePurchaseRequest removes "purchase_request" edges to PurchaseRequest entities.
func (cu *CustomerUpdate) RemovePurchaseRequest(p ...*PurchaseRequest) *CustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePurchaseRequestIDs(ids...)
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (cu *CustomerUpdate) ClearAdmin() *CustomerUpdate {
	cu.mutation.ClearAdmin()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CustomerUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.Username(); ok {
		if err := customer.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Customer.username": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Password(); ok {
		if err := customer.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Customer.password": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GetType(); ok {
		if err := customer.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Customer.type": %w`, err)}
		}
	}
	return nil
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Username(); ok {
		_spec.SetField(customer.FieldUsername, field.TypeString, value)
	}
	if value, ok := cu.mutation.Password(); ok {
		_spec.SetField(customer.FieldPassword, field.TypeBytes, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(customer.FieldType, field.TypeString, value)
	}
	if cu.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BusinessTable,
			Columns: []string{customer.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businesscustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BusinessTable,
			Columns: []string{customer.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businesscustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.IndividualCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.IndividualTable,
			Columns: []string{customer.IndividualColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individualcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.IndividualIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.IndividualTable,
			Columns: []string{customer.IndividualColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individualcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AddressesTable,
			Columns: []string{customer.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAddressesIDs(); len(nodes) > 0 && !cu.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AddressesTable,
			Columns: []string{customer.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AddressesTable,
			Columns: []string{customer.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FavouritesTable,
			Columns: []string{customer.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedFavouritesIDs(); len(nodes) > 0 && !cu.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FavouritesTable,
			Columns: []string{customer.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.FavouritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FavouritesTable,
			Columns: []string{customer.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.NotificationsTable,
			Columns: customer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !cu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.NotificationsTable,
			Columns: customer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.NotificationsTable,
			Columns: customer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PurchaseRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PurchaseRequestTable,
			Columns: []string{customer.PurchaseRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPurchaseRequestIDs(); len(nodes) > 0 && !cu.mutation.PurchaseRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PurchaseRequestTable,
			Columns: []string{customer.PurchaseRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PurchaseRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PurchaseRequestTable,
			Columns: []string{customer.PurchaseRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.AdminTable,
			Columns: []string{customer.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.AdminTable,
			Columns: []string{customer.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CustomerUpdateOne) SetUpdatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUsername sets the "username" field.
func (cuo *CustomerUpdateOne) SetUsername(s string) *CustomerUpdateOne {
	cuo.mutation.SetUsername(s)
	return cuo
}

// SetPassword sets the "password" field.
func (cuo *CustomerUpdateOne) SetPassword(b []byte) *CustomerUpdateOne {
	cuo.mutation.SetPassword(b)
	return cuo
}

// SetType sets the "type" field.
func (cuo *CustomerUpdateOne) SetType(s string) *CustomerUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetBusinessID sets the "business" edge to the BusinessCustomer entity by ID.
func (cuo *CustomerUpdateOne) SetBusinessID(id int) *CustomerUpdateOne {
	cuo.mutation.SetBusinessID(id)
	return cuo
}

// SetNillableBusinessID sets the "business" edge to the BusinessCustomer entity by ID if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBusinessID(id *int) *CustomerUpdateOne {
	if id != nil {
		cuo = cuo.SetBusinessID(*id)
	}
	return cuo
}

// SetBusiness sets the "business" edge to the BusinessCustomer entity.
func (cuo *CustomerUpdateOne) SetBusiness(b *BusinessCustomer) *CustomerUpdateOne {
	return cuo.SetBusinessID(b.ID)
}

// SetIndividualID sets the "individual" edge to the IndividualCustomer entity by ID.
func (cuo *CustomerUpdateOne) SetIndividualID(id int) *CustomerUpdateOne {
	cuo.mutation.SetIndividualID(id)
	return cuo
}

// SetNillableIndividualID sets the "individual" edge to the IndividualCustomer entity by ID if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableIndividualID(id *int) *CustomerUpdateOne {
	if id != nil {
		cuo = cuo.SetIndividualID(*id)
	}
	return cuo
}

// SetIndividual sets the "individual" edge to the IndividualCustomer entity.
func (cuo *CustomerUpdateOne) SetIndividual(i *IndividualCustomer) *CustomerUpdateOne {
	return cuo.SetIndividualID(i.ID)
}

// AddAddressIDs adds the "addresses" edge to the Address entity by IDs.
func (cuo *CustomerUpdateOne) AddAddressIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddAddressIDs(ids...)
	return cuo
}

// AddAddresses adds the "addresses" edges to the Address entity.
func (cuo *CustomerUpdateOne) AddAddresses(a ...*Address) *CustomerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAddressIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cuo *CustomerUpdateOne) AddOrderIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddOrderIDs(ids...)
	return cuo
}

// AddOrders adds the "orders" edges to the Order entity.
func (cuo *CustomerUpdateOne) AddOrders(o ...*Order) *CustomerUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOrderIDs(ids...)
}

// AddFavouriteIDs adds the "favourites" edge to the Favourite entity by IDs.
func (cuo *CustomerUpdateOne) AddFavouriteIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddFavouriteIDs(ids...)
	return cuo
}

// AddFavourites adds the "favourites" edges to the Favourite entity.
func (cuo *CustomerUpdateOne) AddFavourites(f ...*Favourite) *CustomerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.AddFavouriteIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (cuo *CustomerUpdateOne) AddNotificationIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddNotificationIDs(ids...)
	return cuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (cuo *CustomerUpdateOne) AddNotifications(n ...*Notification) *CustomerUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.AddNotificationIDs(ids...)
}

// AddPurchaseRequestIDs adds the "purchase_request" edge to the PurchaseRequest entity by IDs.
func (cuo *CustomerUpdateOne) AddPurchaseRequestIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddPurchaseRequestIDs(ids...)
	return cuo
}

// AddPurchaseRequest adds the "purchase_request" edges to the PurchaseRequest entity.
func (cuo *CustomerUpdateOne) AddPurchaseRequest(p ...*PurchaseRequest) *CustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPurchaseRequestIDs(ids...)
}

// SetAdminID sets the "admin" edge to the Admin entity by ID.
func (cuo *CustomerUpdateOne) SetAdminID(id int) *CustomerUpdateOne {
	cuo.mutation.SetAdminID(id)
	return cuo
}

// SetNillableAdminID sets the "admin" edge to the Admin entity by ID if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAdminID(id *int) *CustomerUpdateOne {
	if id != nil {
		cuo = cuo.SetAdminID(*id)
	}
	return cuo
}

// SetAdmin sets the "admin" edge to the Admin entity.
func (cuo *CustomerUpdateOne) SetAdmin(a *Admin) *CustomerUpdateOne {
	return cuo.SetAdminID(a.ID)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearBusiness clears the "business" edge to the BusinessCustomer entity.
func (cuo *CustomerUpdateOne) ClearBusiness() *CustomerUpdateOne {
	cuo.mutation.ClearBusiness()
	return cuo
}

// ClearIndividual clears the "individual" edge to the IndividualCustomer entity.
func (cuo *CustomerUpdateOne) ClearIndividual() *CustomerUpdateOne {
	cuo.mutation.ClearIndividual()
	return cuo
}

// ClearAddresses clears all "addresses" edges to the Address entity.
func (cuo *CustomerUpdateOne) ClearAddresses() *CustomerUpdateOne {
	cuo.mutation.ClearAddresses()
	return cuo
}

// RemoveAddressIDs removes the "addresses" edge to Address entities by IDs.
func (cuo *CustomerUpdateOne) RemoveAddressIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveAddressIDs(ids...)
	return cuo
}

// RemoveAddresses removes "addresses" edges to Address entities.
func (cuo *CustomerUpdateOne) RemoveAddresses(a ...*Address) *CustomerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAddressIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (cuo *CustomerUpdateOne) ClearOrders() *CustomerUpdateOne {
	cuo.mutation.ClearOrders()
	return cuo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (cuo *CustomerUpdateOne) RemoveOrderIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveOrderIDs(ids...)
	return cuo
}

// RemoveOrders removes "orders" edges to Order entities.
func (cuo *CustomerUpdateOne) RemoveOrders(o ...*Order) *CustomerUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOrderIDs(ids...)
}

// ClearFavourites clears all "favourites" edges to the Favourite entity.
func (cuo *CustomerUpdateOne) ClearFavourites() *CustomerUpdateOne {
	cuo.mutation.ClearFavourites()
	return cuo
}

// RemoveFavouriteIDs removes the "favourites" edge to Favourite entities by IDs.
func (cuo *CustomerUpdateOne) RemoveFavouriteIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveFavouriteIDs(ids...)
	return cuo
}

// RemoveFavourites removes "favourites" edges to Favourite entities.
func (cuo *CustomerUpdateOne) RemoveFavourites(f ...*Favourite) *CustomerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.RemoveFavouriteIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (cuo *CustomerUpdateOne) ClearNotifications() *CustomerUpdateOne {
	cuo.mutation.ClearNotifications()
	return cuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (cuo *CustomerUpdateOne) RemoveNotificationIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveNotificationIDs(ids...)
	return cuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (cuo *CustomerUpdateOne) RemoveNotifications(n ...*Notification) *CustomerUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.RemoveNotificationIDs(ids...)
}

// ClearPurchaseRequest clears all "purchase_request" edges to the PurchaseRequest entity.
func (cuo *CustomerUpdateOne) ClearPurchaseRequest() *CustomerUpdateOne {
	cuo.mutation.ClearPurchaseRequest()
	return cuo
}

// RemovePurchaseRequestIDs removes the "purchase_request" edge to PurchaseRequest entities by IDs.
func (cuo *CustomerUpdateOne) RemovePurchaseRequestIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemovePurchaseRequestIDs(ids...)
	return cuo
}

// RemovePurchaseRequest removes "purchase_request" edges to PurchaseRequest entities.
func (cuo *CustomerUpdateOne) RemovePurchaseRequest(p ...*PurchaseRequest) *CustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePurchaseRequestIDs(ids...)
}

// ClearAdmin clears the "admin" edge to the Admin entity.
func (cuo *CustomerUpdateOne) ClearAdmin() *CustomerUpdateOne {
	cuo.mutation.ClearAdmin()
	return cuo
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CustomerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.Username(); ok {
		if err := customer.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Customer.username": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Password(); ok {
		if err := customer.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Customer.password": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GetType(); ok {
		if err := customer.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Customer.type": %w`, err)}
		}
	}
	return nil
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Username(); ok {
		_spec.SetField(customer.FieldUsername, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Password(); ok {
		_spec.SetField(customer.FieldPassword, field.TypeBytes, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(customer.FieldType, field.TypeString, value)
	}
	if cuo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BusinessTable,
			Columns: []string{customer.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businesscustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BusinessTable,
			Columns: []string{customer.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businesscustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.IndividualCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.IndividualTable,
			Columns: []string{customer.IndividualColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individualcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.IndividualIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.IndividualTable,
			Columns: []string{customer.IndividualColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individualcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AddressesTable,
			Columns: []string{customer.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAddressesIDs(); len(nodes) > 0 && !cuo.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AddressesTable,
			Columns: []string{customer.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AddressesTable,
			Columns: []string{customer.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.OrdersTable,
			Columns: []string{customer.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FavouritesTable,
			Columns: []string{customer.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedFavouritesIDs(); len(nodes) > 0 && !cuo.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FavouritesTable,
			Columns: []string{customer.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.FavouritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FavouritesTable,
			Columns: []string{customer.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.NotificationsTable,
			Columns: customer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !cuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.NotificationsTable,
			Columns: customer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   customer.NotificationsTable,
			Columns: customer.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PurchaseRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PurchaseRequestTable,
			Columns: []string{customer.PurchaseRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPurchaseRequestIDs(); len(nodes) > 0 && !cuo.mutation.PurchaseRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PurchaseRequestTable,
			Columns: []string{customer.PurchaseRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PurchaseRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PurchaseRequestTable,
			Columns: []string{customer.PurchaseRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.AdminTable,
			Columns: []string{customer.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.AdminTable,
			Columns: []string{customer.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(admin.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
