// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/app/domain/models"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/merchantstore"
)

// MerchantStore is the model entity for the MerchantStore schema.
type MerchantStore struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// About holds the value of the "about" field.
	About string `json:"about,omitempty"`
	// DescTitle holds the value of the "desc_title" field.
	DescTitle string `json:"desc_title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// Images holds the value of the "images" field.
	Images []string `json:"images,omitempty"`
	// DefaultAccount holds the value of the "default_account" field.
	DefaultAccount merchantstore.DefaultAccount `json:"default_account,omitempty"`
	// BankAccount holds the value of the "bank_account" field.
	BankAccount *models.MerchantBankAccount `json:"bank_account,omitempty"`
	// MomoAccount holds the value of the "momo_account" field.
	MomoAccount *models.MerchantMomoAccount `json:"momo_account,omitempty"`
	// MerchantType holds the value of the "merchant_type" field.
	MerchantType string `json:"merchant_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MerchantStoreQuery when eager-loading is set.
	Edges          MerchantStoreEdges `json:"edges"`
	agent_store    *int
	merchant_store *int
}

// MerchantStoreEdges holds the relations/edges for other nodes in the graph.
type MerchantStoreEdges struct {
	// Merchant holds the value of the merchant edge.
	Merchant *Merchant `json:"merchant,omitempty"`
	// Agent holds the value of the agent edge.
	Agent *Agent `json:"agent,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// OrderDetails holds the value of the order_details edge.
	OrderDetails []*OrderDetail `json:"order_details,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// MerchantOrErr returns the Merchant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MerchantStoreEdges) MerchantOrErr() (*Merchant, error) {
	if e.loadedTypes[0] {
		if e.Merchant == nil {
			// The edge merchant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: merchant.Label}
		}
		return e.Merchant, nil
	}
	return nil, &NotLoadedError{edge: "merchant"}
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MerchantStoreEdges) AgentOrErr() (*Agent, error) {
	if e.loadedTypes[1] {
		if e.Agent == nil {
			// The edge agent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: agent.Label}
		}
		return e.Agent, nil
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e MerchantStoreEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[2] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// OrderDetailsOrErr returns the OrderDetails value or an error if the edge
// was not loaded in eager-loading.
func (e MerchantStoreEdges) OrderDetailsOrErr() ([]*OrderDetail, error) {
	if e.loadedTypes[3] {
		return e.OrderDetails, nil
	}
	return nil, &NotLoadedError{edge: "order_details"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MerchantStore) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case merchantstore.FieldImages, merchantstore.FieldBankAccount, merchantstore.FieldMomoAccount:
			values[i] = new([]byte)
		case merchantstore.FieldID:
			values[i] = new(sql.NullInt64)
		case merchantstore.FieldName, merchantstore.FieldAbout, merchantstore.FieldDescTitle, merchantstore.FieldDescription, merchantstore.FieldLogo, merchantstore.FieldDefaultAccount, merchantstore.FieldMerchantType:
			values[i] = new(sql.NullString)
		case merchantstore.FieldCreatedAt, merchantstore.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case merchantstore.ForeignKeys[0]: // agent_store
			values[i] = new(sql.NullInt64)
		case merchantstore.ForeignKeys[1]: // merchant_store
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MerchantStore", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MerchantStore fields.
func (ms *MerchantStore) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case merchantstore.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case merchantstore.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ms.CreatedAt = value.Time
			}
		case merchantstore.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ms.UpdatedAt = value.Time
			}
		case merchantstore.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ms.Name = value.String
			}
		case merchantstore.FieldAbout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field about", values[i])
			} else if value.Valid {
				ms.About = value.String
			}
		case merchantstore.FieldDescTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc_title", values[i])
			} else if value.Valid {
				ms.DescTitle = value.String
			}
		case merchantstore.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ms.Description = value.String
			}
		case merchantstore.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				ms.Logo = value.String
			}
		case merchantstore.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case merchantstore.FieldDefaultAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_account", values[i])
			} else if value.Valid {
				ms.DefaultAccount = merchantstore.DefaultAccount(value.String)
			}
		case merchantstore.FieldBankAccount:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field bank_account", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.BankAccount); err != nil {
					return fmt.Errorf("unmarshal field bank_account: %w", err)
				}
			}
		case merchantstore.FieldMomoAccount:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field momo_account", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.MomoAccount); err != nil {
					return fmt.Errorf("unmarshal field momo_account: %w", err)
				}
			}
		case merchantstore.FieldMerchantType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_type", values[i])
			} else if value.Valid {
				ms.MerchantType = value.String
			}
		case merchantstore.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field agent_store", value)
			} else if value.Valid {
				ms.agent_store = new(int)
				*ms.agent_store = int(value.Int64)
			}
		case merchantstore.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field merchant_store", value)
			} else if value.Valid {
				ms.merchant_store = new(int)
				*ms.merchant_store = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMerchant queries the "merchant" edge of the MerchantStore entity.
func (ms *MerchantStore) QueryMerchant() *MerchantQuery {
	return (&MerchantStoreClient{config: ms.config}).QueryMerchant(ms)
}

// QueryAgent queries the "agent" edge of the MerchantStore entity.
func (ms *MerchantStore) QueryAgent() *AgentQuery {
	return (&MerchantStoreClient{config: ms.config}).QueryAgent(ms)
}

// QueryOrders queries the "orders" edge of the MerchantStore entity.
func (ms *MerchantStore) QueryOrders() *OrderQuery {
	return (&MerchantStoreClient{config: ms.config}).QueryOrders(ms)
}

// QueryOrderDetails queries the "order_details" edge of the MerchantStore entity.
func (ms *MerchantStore) QueryOrderDetails() *OrderDetailQuery {
	return (&MerchantStoreClient{config: ms.config}).QueryOrderDetails(ms)
}

// Update returns a builder for updating this MerchantStore.
// Note that you need to call MerchantStore.Unwrap() before calling this method if this MerchantStore
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MerchantStore) Update() *MerchantStoreUpdateOne {
	return (&MerchantStoreClient{config: ms.config}).UpdateOne(ms)
}

// Unwrap unwraps the MerchantStore entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MerchantStore) Unwrap() *MerchantStore {
	tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MerchantStore is not a transactional entity")
	}
	ms.config.driver = tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MerchantStore) String() string {
	var builder strings.Builder
	builder.WriteString("MerchantStore(")
	builder.WriteString(fmt.Sprintf("id=%v", ms.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ms.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ms.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(ms.Name)
	builder.WriteString(", about=")
	builder.WriteString(ms.About)
	builder.WriteString(", desc_title=")
	builder.WriteString(ms.DescTitle)
	builder.WriteString(", description=")
	builder.WriteString(ms.Description)
	builder.WriteString(", logo=")
	builder.WriteString(ms.Logo)
	builder.WriteString(", images=")
	builder.WriteString(fmt.Sprintf("%v", ms.Images))
	builder.WriteString(", default_account=")
	builder.WriteString(fmt.Sprintf("%v", ms.DefaultAccount))
	builder.WriteString(", bank_account=")
	builder.WriteString(fmt.Sprintf("%v", ms.BankAccount))
	builder.WriteString(", momo_account=")
	builder.WriteString(fmt.Sprintf("%v", ms.MomoAccount))
	builder.WriteString(", merchant_type=")
	builder.WriteString(ms.MerchantType)
	builder.WriteByte(')')
	return builder.String()
}

// MerchantStores is a parsable slice of MerchantStore.
type MerchantStores []*MerchantStore

func (ms MerchantStores) config(cfg config) {
	for _i := range ms {
		ms[_i].config = cfg
	}
}
