// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/agent"
)

// Agent is the model entity for the Agent schema.
type Agent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password []byte `json:"-"`
	// GhanaCard holds the value of the "ghana_card" field.
	GhanaCard string `json:"ghana_card,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// OtherName holds the value of the "other_name" field.
	OtherName string `json:"other_name,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// OtherPhone holds the value of the "other_phone" field.
	OtherPhone *string `json:"other_phone,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// DigitalAddress holds the value of the "digital_address" field.
	DigitalAddress string `json:"digital_address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AgentQuery when eager-loading is set.
	Edges AgentEdges `json:"edges"`
}

// AgentEdges holds the relations/edges for other nodes in the graph.
type AgentEdges struct {
	// Addresses holds the value of the addresses edge.
	Addresses []*Address `json:"addresses,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// Favourites holds the value of the favourites edge.
	Favourites []*Favourite `json:"favourites,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AddressesOrErr returns the Addresses value or an error if the edge
// was not loaded in eager-loading.
func (e AgentEdges) AddressesOrErr() ([]*Address, error) {
	if e.loadedTypes[0] {
		return e.Addresses, nil
	}
	return nil, &NotLoadedError{edge: "addresses"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e AgentEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[1] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// FavouritesOrErr returns the Favourites value or an error if the edge
// was not loaded in eager-loading.
func (e AgentEdges) FavouritesOrErr() ([]*Favourite, error) {
	if e.loadedTypes[2] {
		return e.Favourites, nil
	}
	return nil, &NotLoadedError{edge: "favourites"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Agent) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case agent.FieldPassword:
			values[i] = new([]byte)
		case agent.FieldID:
			values[i] = new(sql.NullInt64)
		case agent.FieldUsername, agent.FieldGhanaCard, agent.FieldLastName, agent.FieldOtherName, agent.FieldPhone, agent.FieldOtherPhone, agent.FieldAddress, agent.FieldDigitalAddress:
			values[i] = new(sql.NullString)
		case agent.FieldCreatedAt, agent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Agent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Agent fields.
func (a *Agent) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case agent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case agent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case agent.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				a.Username = value.String
			}
		case agent.FieldPassword:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value != nil {
				a.Password = *value
			}
		case agent.FieldGhanaCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ghana_card", values[i])
			} else if value.Valid {
				a.GhanaCard = value.String
			}
		case agent.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				a.LastName = value.String
			}
		case agent.FieldOtherName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_name", values[i])
			} else if value.Valid {
				a.OtherName = value.String
			}
		case agent.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				a.Phone = value.String
			}
		case agent.FieldOtherPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_phone", values[i])
			} else if value.Valid {
				a.OtherPhone = new(string)
				*a.OtherPhone = value.String
			}
		case agent.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				a.Address = value.String
			}
		case agent.FieldDigitalAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field digital_address", values[i])
			} else if value.Valid {
				a.DigitalAddress = value.String
			}
		}
	}
	return nil
}

// QueryAddresses queries the "addresses" edge of the Agent entity.
func (a *Agent) QueryAddresses() *AddressQuery {
	return (&AgentClient{config: a.config}).QueryAddresses(a)
}

// QueryOrders queries the "orders" edge of the Agent entity.
func (a *Agent) QueryOrders() *OrderQuery {
	return (&AgentClient{config: a.config}).QueryOrders(a)
}

// QueryFavourites queries the "favourites" edge of the Agent entity.
func (a *Agent) QueryFavourites() *FavouriteQuery {
	return (&AgentClient{config: a.config}).QueryFavourites(a)
}

// Update returns a builder for updating this Agent.
// Note that you need to call Agent.Unwrap() before calling this method if this Agent
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Agent) Update() *AgentUpdateOne {
	return (&AgentClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Agent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Agent) Unwrap() *Agent {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Agent is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Agent) String() string {
	var builder strings.Builder
	builder.WriteString("Agent(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", username=")
	builder.WriteString(a.Username)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", ghana_card=")
	builder.WriteString(a.GhanaCard)
	builder.WriteString(", last_name=")
	builder.WriteString(a.LastName)
	builder.WriteString(", other_name=")
	builder.WriteString(a.OtherName)
	builder.WriteString(", phone=")
	builder.WriteString(a.Phone)
	if v := a.OtherPhone; v != nil {
		builder.WriteString(", other_phone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", address=")
	builder.WriteString(a.Address)
	builder.WriteString(", digital_address=")
	builder.WriteString(a.DigitalAddress)
	builder.WriteByte(')')
	return builder.String()
}

// Agents is a parsable slice of Agent.
type Agents []*Agent

func (a Agents) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
