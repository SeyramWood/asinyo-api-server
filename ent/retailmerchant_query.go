// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/retailmerchant"
)

// RetailMerchantQuery is the builder for querying RetailMerchant entities.
type RetailMerchantQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.RetailMerchant
	withMerchant *MerchantQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RetailMerchantQuery builder.
func (rmq *RetailMerchantQuery) Where(ps ...predicate.RetailMerchant) *RetailMerchantQuery {
	rmq.predicates = append(rmq.predicates, ps...)
	return rmq
}

// Limit adds a limit step to the query.
func (rmq *RetailMerchantQuery) Limit(limit int) *RetailMerchantQuery {
	rmq.limit = &limit
	return rmq
}

// Offset adds an offset step to the query.
func (rmq *RetailMerchantQuery) Offset(offset int) *RetailMerchantQuery {
	rmq.offset = &offset
	return rmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rmq *RetailMerchantQuery) Unique(unique bool) *RetailMerchantQuery {
	rmq.unique = &unique
	return rmq
}

// Order adds an order step to the query.
func (rmq *RetailMerchantQuery) Order(o ...OrderFunc) *RetailMerchantQuery {
	rmq.order = append(rmq.order, o...)
	return rmq
}

// QueryMerchant chains the current query on the "merchant" edge.
func (rmq *RetailMerchantQuery) QueryMerchant() *MerchantQuery {
	query := &MerchantQuery{config: rmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retailmerchant.Table, retailmerchant.FieldID, selector),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, retailmerchant.MerchantTable, retailmerchant.MerchantColumn),
		)
		fromU = sqlgraph.SetNeighbors(rmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RetailMerchant entity from the query.
// Returns a *NotFoundError when no RetailMerchant was found.
func (rmq *RetailMerchantQuery) First(ctx context.Context) (*RetailMerchant, error) {
	nodes, err := rmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{retailmerchant.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rmq *RetailMerchantQuery) FirstX(ctx context.Context) *RetailMerchant {
	node, err := rmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RetailMerchant ID from the query.
// Returns a *NotFoundError when no RetailMerchant ID was found.
func (rmq *RetailMerchantQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{retailmerchant.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rmq *RetailMerchantQuery) FirstIDX(ctx context.Context) int {
	id, err := rmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RetailMerchant entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RetailMerchant entity is found.
// Returns a *NotFoundError when no RetailMerchant entities are found.
func (rmq *RetailMerchantQuery) Only(ctx context.Context) (*RetailMerchant, error) {
	nodes, err := rmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{retailmerchant.Label}
	default:
		return nil, &NotSingularError{retailmerchant.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rmq *RetailMerchantQuery) OnlyX(ctx context.Context) *RetailMerchant {
	node, err := rmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RetailMerchant ID in the query.
// Returns a *NotSingularError when more than one RetailMerchant ID is found.
// Returns a *NotFoundError when no entities are found.
func (rmq *RetailMerchantQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{retailmerchant.Label}
	default:
		err = &NotSingularError{retailmerchant.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rmq *RetailMerchantQuery) OnlyIDX(ctx context.Context) int {
	id, err := rmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RetailMerchants.
func (rmq *RetailMerchantQuery) All(ctx context.Context) ([]*RetailMerchant, error) {
	if err := rmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rmq *RetailMerchantQuery) AllX(ctx context.Context) []*RetailMerchant {
	nodes, err := rmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RetailMerchant IDs.
func (rmq *RetailMerchantQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rmq.Select(retailmerchant.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rmq *RetailMerchantQuery) IDsX(ctx context.Context) []int {
	ids, err := rmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rmq *RetailMerchantQuery) Count(ctx context.Context) (int, error) {
	if err := rmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rmq *RetailMerchantQuery) CountX(ctx context.Context) int {
	count, err := rmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rmq *RetailMerchantQuery) Exist(ctx context.Context) (bool, error) {
	if err := rmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rmq *RetailMerchantQuery) ExistX(ctx context.Context) bool {
	exist, err := rmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RetailMerchantQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rmq *RetailMerchantQuery) Clone() *RetailMerchantQuery {
	if rmq == nil {
		return nil
	}
	return &RetailMerchantQuery{
		config:       rmq.config,
		limit:        rmq.limit,
		offset:       rmq.offset,
		order:        append([]OrderFunc{}, rmq.order...),
		predicates:   append([]predicate.RetailMerchant{}, rmq.predicates...),
		withMerchant: rmq.withMerchant.Clone(),
		// clone intermediate query.
		sql:    rmq.sql.Clone(),
		path:   rmq.path,
		unique: rmq.unique,
	}
}

// WithMerchant tells the query-builder to eager-load the nodes that are connected to
// the "merchant" edge. The optional arguments are used to configure the query builder of the edge.
func (rmq *RetailMerchantQuery) WithMerchant(opts ...func(*MerchantQuery)) *RetailMerchantQuery {
	query := &MerchantQuery{config: rmq.config}
	for _, opt := range opts {
		opt(query)
	}
	rmq.withMerchant = query
	return rmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RetailMerchant.Query().
//		GroupBy(retailmerchant.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rmq *RetailMerchantQuery) GroupBy(field string, fields ...string) *RetailMerchantGroupBy {
	grbuild := &RetailMerchantGroupBy{config: rmq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rmq.sqlQuery(ctx), nil
	}
	grbuild.label = retailmerchant.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.RetailMerchant.Query().
//		Select(retailmerchant.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (rmq *RetailMerchantQuery) Select(fields ...string) *RetailMerchantSelect {
	rmq.fields = append(rmq.fields, fields...)
	selbuild := &RetailMerchantSelect{RetailMerchantQuery: rmq}
	selbuild.label = retailmerchant.Label
	selbuild.flds, selbuild.scan = &rmq.fields, selbuild.Scan
	return selbuild
}

func (rmq *RetailMerchantQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rmq.fields {
		if !retailmerchant.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rmq.path != nil {
		prev, err := rmq.path(ctx)
		if err != nil {
			return err
		}
		rmq.sql = prev
	}
	return nil
}

func (rmq *RetailMerchantQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RetailMerchant, error) {
	var (
		nodes       = []*RetailMerchant{}
		withFKs     = rmq.withFKs
		_spec       = rmq.querySpec()
		loadedTypes = [1]bool{
			rmq.withMerchant != nil,
		}
	)
	if rmq.withMerchant != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, retailmerchant.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RetailMerchant).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RetailMerchant{config: rmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rmq.withMerchant; query != nil {
		if err := rmq.loadMerchant(ctx, query, nodes, nil,
			func(n *RetailMerchant, e *Merchant) { n.Edges.Merchant = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rmq *RetailMerchantQuery) loadMerchant(ctx context.Context, query *MerchantQuery, nodes []*RetailMerchant, init func(*RetailMerchant), assign func(*RetailMerchant, *Merchant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*RetailMerchant)
	for i := range nodes {
		if nodes[i].merchant_retailer == nil {
			continue
		}
		fk := *nodes[i].merchant_retailer
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(merchant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "merchant_retailer" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rmq *RetailMerchantQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rmq.querySpec()
	_spec.Node.Columns = rmq.fields
	if len(rmq.fields) > 0 {
		_spec.Unique = rmq.unique != nil && *rmq.unique
	}
	return sqlgraph.CountNodes(ctx, rmq.driver, _spec)
}

func (rmq *RetailMerchantQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := rmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (rmq *RetailMerchantQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   retailmerchant.Table,
			Columns: retailmerchant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: retailmerchant.FieldID,
			},
		},
		From:   rmq.sql,
		Unique: true,
	}
	if unique := rmq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rmq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retailmerchant.FieldID)
		for i := range fields {
			if fields[i] != retailmerchant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rmq *RetailMerchantQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rmq.driver.Dialect())
	t1 := builder.Table(retailmerchant.Table)
	columns := rmq.fields
	if len(columns) == 0 {
		columns = retailmerchant.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rmq.sql != nil {
		selector = rmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rmq.unique != nil && *rmq.unique {
		selector.Distinct()
	}
	for _, p := range rmq.predicates {
		p(selector)
	}
	for _, p := range rmq.order {
		p(selector)
	}
	if offset := rmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RetailMerchantGroupBy is the group-by builder for RetailMerchant entities.
type RetailMerchantGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rmgb *RetailMerchantGroupBy) Aggregate(fns ...AggregateFunc) *RetailMerchantGroupBy {
	rmgb.fns = append(rmgb.fns, fns...)
	return rmgb
}

// Scan applies the group-by query and scans the result into the given value.
func (rmgb *RetailMerchantGroupBy) Scan(ctx context.Context, v any) error {
	query, err := rmgb.path(ctx)
	if err != nil {
		return err
	}
	rmgb.sql = query
	return rmgb.sqlScan(ctx, v)
}

func (rmgb *RetailMerchantGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range rmgb.fields {
		if !retailmerchant.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rmgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rmgb *RetailMerchantGroupBy) sqlQuery() *sql.Selector {
	selector := rmgb.sql.Select()
	aggregation := make([]string, 0, len(rmgb.fns))
	for _, fn := range rmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rmgb.fields)+len(rmgb.fns))
		for _, f := range rmgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rmgb.fields...)...)
}

// RetailMerchantSelect is the builder for selecting fields of RetailMerchant entities.
type RetailMerchantSelect struct {
	*RetailMerchantQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (rms *RetailMerchantSelect) Scan(ctx context.Context, v any) error {
	if err := rms.prepareQuery(ctx); err != nil {
		return err
	}
	rms.sql = rms.RetailMerchantQuery.sqlQuery(ctx)
	return rms.sqlScan(ctx, v)
}

func (rms *RetailMerchantSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := rms.sql.Query()
	if err := rms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
