// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/merchantstore"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/orderdetail"
	"github.com/SeyramWood/ent/product"
)

// OrderDetail is the model entity for the OrderDetail schema.
type OrderDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// PromoPrice holds the value of the "promo_price" field.
	PromoPrice float64 `json:"promo_price,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Status holds the value of the "status" field.
	Status orderdetail.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderDetailQuery when eager-loading is set.
	Edges                        OrderDetailEdges `json:"edges"`
	merchant_store_order_details *int
	order_details                *int
	product_order_details        *int
}

// OrderDetailEdges holds the relations/edges for other nodes in the graph.
type OrderDetailEdges struct {
	// Order holds the value of the Order edge.
	Order *Order `json:"Order,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// Store holds the value of the store edge.
	Store *MerchantStore `json:"store,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderDetailEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Order == nil {
			// The edge Order was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "Order"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderDetailEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderDetailEdges) StoreOrErr() (*MerchantStore, error) {
	if e.loadedTypes[2] {
		if e.Store == nil {
			// The edge store was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: merchantstore.Label}
		}
		return e.Store, nil
	}
	return nil, &NotLoadedError{edge: "store"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderDetail) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderdetail.FieldPrice, orderdetail.FieldPromoPrice, orderdetail.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case orderdetail.FieldID, orderdetail.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case orderdetail.FieldStatus:
			values[i] = new(sql.NullString)
		case orderdetail.FieldCreatedAt, orderdetail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case orderdetail.ForeignKeys[0]: // merchant_store_order_details
			values[i] = new(sql.NullInt64)
		case orderdetail.ForeignKeys[1]: // order_details
			values[i] = new(sql.NullInt64)
		case orderdetail.ForeignKeys[2]: // product_order_details
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderDetail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderDetail fields.
func (od *OrderDetail) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			od.ID = int(value.Int64)
		case orderdetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				od.CreatedAt = value.Time
			}
		case orderdetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				od.UpdatedAt = value.Time
			}
		case orderdetail.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				od.Price = value.Float64
			}
		case orderdetail.FieldPromoPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field promo_price", values[i])
			} else if value.Valid {
				od.PromoPrice = value.Float64
			}
		case orderdetail.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				od.Amount = value.Float64
			}
		case orderdetail.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				od.Quantity = int(value.Int64)
			}
		case orderdetail.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				od.Status = orderdetail.Status(value.String)
			}
		case orderdetail.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field merchant_store_order_details", value)
			} else if value.Valid {
				od.merchant_store_order_details = new(int)
				*od.merchant_store_order_details = int(value.Int64)
			}
		case orderdetail.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_details", value)
			} else if value.Valid {
				od.order_details = new(int)
				*od.order_details = int(value.Int64)
			}
		case orderdetail.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_order_details", value)
			} else if value.Valid {
				od.product_order_details = new(int)
				*od.product_order_details = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrder queries the "Order" edge of the OrderDetail entity.
func (od *OrderDetail) QueryOrder() *OrderQuery {
	return (&OrderDetailClient{config: od.config}).QueryOrder(od)
}

// QueryProduct queries the "product" edge of the OrderDetail entity.
func (od *OrderDetail) QueryProduct() *ProductQuery {
	return (&OrderDetailClient{config: od.config}).QueryProduct(od)
}

// QueryStore queries the "store" edge of the OrderDetail entity.
func (od *OrderDetail) QueryStore() *MerchantStoreQuery {
	return (&OrderDetailClient{config: od.config}).QueryStore(od)
}

// Update returns a builder for updating this OrderDetail.
// Note that you need to call OrderDetail.Unwrap() before calling this method if this OrderDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (od *OrderDetail) Update() *OrderDetailUpdateOne {
	return (&OrderDetailClient{config: od.config}).UpdateOne(od)
}

// Unwrap unwraps the OrderDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (od *OrderDetail) Unwrap() *OrderDetail {
	tx, ok := od.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderDetail is not a transactional entity")
	}
	od.config.driver = tx.drv
	return od
}

// String implements the fmt.Stringer.
func (od *OrderDetail) String() string {
	var builder strings.Builder
	builder.WriteString("OrderDetail(")
	builder.WriteString(fmt.Sprintf("id=%v", od.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(od.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(od.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", od.Price))
	builder.WriteString(", promo_price=")
	builder.WriteString(fmt.Sprintf("%v", od.PromoPrice))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", od.Amount))
	builder.WriteString(", quantity=")
	builder.WriteString(fmt.Sprintf("%v", od.Quantity))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", od.Status))
	builder.WriteByte(')')
	return builder.String()
}

// OrderDetails is a parsable slice of OrderDetail.
type OrderDetails []*OrderDetail

func (od OrderDetails) config(cfg config) {
	for _i := range od {
		od[_i].config = cfg
	}
}
