// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/productcategoryminor"
)

// ProductCategoryMinorDelete is the builder for deleting a ProductCategoryMinor entity.
type ProductCategoryMinorDelete struct {
	config
	hooks    []Hook
	mutation *ProductCategoryMinorMutation
}

// Where appends a list predicates to the ProductCategoryMinorDelete builder.
func (pcmd *ProductCategoryMinorDelete) Where(ps ...predicate.ProductCategoryMinor) *ProductCategoryMinorDelete {
	pcmd.mutation.Where(ps...)
	return pcmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pcmd *ProductCategoryMinorDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pcmd.sqlExec, pcmd.mutation, pcmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pcmd *ProductCategoryMinorDelete) ExecX(ctx context.Context) int {
	n, err := pcmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pcmd *ProductCategoryMinorDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(productcategoryminor.Table, sqlgraph.NewFieldSpec(productcategoryminor.FieldID, field.TypeInt))
	if ps := pcmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pcmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pcmd.mutation.done = true
	return affected, err
}

// ProductCategoryMinorDeleteOne is the builder for deleting a single ProductCategoryMinor entity.
type ProductCategoryMinorDeleteOne struct {
	pcmd *ProductCategoryMinorDelete
}

// Where appends a list predicates to the ProductCategoryMinorDelete builder.
func (pcmdo *ProductCategoryMinorDeleteOne) Where(ps ...predicate.ProductCategoryMinor) *ProductCategoryMinorDeleteOne {
	pcmdo.pcmd.mutation.Where(ps...)
	return pcmdo
}

// Exec executes the deletion query.
func (pcmdo *ProductCategoryMinorDeleteOne) Exec(ctx context.Context) error {
	n, err := pcmdo.pcmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{productcategoryminor.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pcmdo *ProductCategoryMinorDeleteOne) ExecX(ctx context.Context) {
	if err := pcmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
