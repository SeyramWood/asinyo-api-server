// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/basket"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/product"
)

// BasketUpdate is the builder for updating Basket entities.
type BasketUpdate struct {
	config
	hooks    []Hook
	mutation *BasketMutation
}

// Where appends a list predicates to the BasketUpdate builder.
func (bu *BasketUpdate) Where(ps ...predicate.Basket) *BasketUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BasketUpdate) SetUpdatedAt(t time.Time) *BasketUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (bu *BasketUpdate) SetMerchantID(id int) *BasketUpdate {
	bu.mutation.SetMerchantID(id)
	return bu
}

// SetNillableMerchantID sets the "merchant" edge to the Merchant entity by ID if the given value is not nil.
func (bu *BasketUpdate) SetNillableMerchantID(id *int) *BasketUpdate {
	if id != nil {
		bu = bu.SetMerchantID(*id)
	}
	return bu
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (bu *BasketUpdate) SetMerchant(m *Merchant) *BasketUpdate {
	return bu.SetMerchantID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (bu *BasketUpdate) SetAgentID(id int) *BasketUpdate {
	bu.mutation.SetAgentID(id)
	return bu
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (bu *BasketUpdate) SetNillableAgentID(id *int) *BasketUpdate {
	if id != nil {
		bu = bu.SetAgentID(*id)
	}
	return bu
}

// SetAgent sets the "agent" edge to the Agent entity.
func (bu *BasketUpdate) SetAgent(a *Agent) *BasketUpdate {
	return bu.SetAgentID(a.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (bu *BasketUpdate) SetCustomerID(id int) *BasketUpdate {
	bu.mutation.SetCustomerID(id)
	return bu
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (bu *BasketUpdate) SetNillableCustomerID(id *int) *BasketUpdate {
	if id != nil {
		bu = bu.SetCustomerID(*id)
	}
	return bu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bu *BasketUpdate) SetCustomer(c *Customer) *BasketUpdate {
	return bu.SetCustomerID(c.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (bu *BasketUpdate) SetProductID(id int) *BasketUpdate {
	bu.mutation.SetProductID(id)
	return bu
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (bu *BasketUpdate) SetNillableProductID(id *int) *BasketUpdate {
	if id != nil {
		bu = bu.SetProductID(*id)
	}
	return bu
}

// SetProduct sets the "product" edge to the Product entity.
func (bu *BasketUpdate) SetProduct(p *Product) *BasketUpdate {
	return bu.SetProductID(p.ID)
}

// Mutation returns the BasketMutation object of the builder.
func (bu *BasketUpdate) Mutation() *BasketMutation {
	return bu.mutation
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (bu *BasketUpdate) ClearMerchant() *BasketUpdate {
	bu.mutation.ClearMerchant()
	return bu
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (bu *BasketUpdate) ClearAgent() *BasketUpdate {
	bu.mutation.ClearAgent()
	return bu
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (bu *BasketUpdate) ClearCustomer() *BasketUpdate {
	bu.mutation.ClearCustomer()
	return bu
}

// ClearProduct clears the "product" edge to the Product entity.
func (bu *BasketUpdate) ClearProduct() *BasketUpdate {
	bu.mutation.ClearProduct()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BasketUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bu.defaults()
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BasketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BasketUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BasketUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BasketUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BasketUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := basket.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

func (bu *BasketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   basket.Table,
			Columns: basket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: basket.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basket.FieldUpdatedAt,
		})
	}
	if bu.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.MerchantTable,
			Columns: []string{basket.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.MerchantTable,
			Columns: []string{basket.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.AgentTable,
			Columns: []string{basket.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.AgentTable,
			Columns: []string{basket.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.CustomerTable,
			Columns: []string{basket.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.CustomerTable,
			Columns: []string{basket.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.ProductTable,
			Columns: []string{basket.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.ProductTable,
			Columns: []string{basket.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{basket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BasketUpdateOne is the builder for updating a single Basket entity.
type BasketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BasketMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BasketUpdateOne) SetUpdatedAt(t time.Time) *BasketUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (buo *BasketUpdateOne) SetMerchantID(id int) *BasketUpdateOne {
	buo.mutation.SetMerchantID(id)
	return buo
}

// SetNillableMerchantID sets the "merchant" edge to the Merchant entity by ID if the given value is not nil.
func (buo *BasketUpdateOne) SetNillableMerchantID(id *int) *BasketUpdateOne {
	if id != nil {
		buo = buo.SetMerchantID(*id)
	}
	return buo
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (buo *BasketUpdateOne) SetMerchant(m *Merchant) *BasketUpdateOne {
	return buo.SetMerchantID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (buo *BasketUpdateOne) SetAgentID(id int) *BasketUpdateOne {
	buo.mutation.SetAgentID(id)
	return buo
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (buo *BasketUpdateOne) SetNillableAgentID(id *int) *BasketUpdateOne {
	if id != nil {
		buo = buo.SetAgentID(*id)
	}
	return buo
}

// SetAgent sets the "agent" edge to the Agent entity.
func (buo *BasketUpdateOne) SetAgent(a *Agent) *BasketUpdateOne {
	return buo.SetAgentID(a.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (buo *BasketUpdateOne) SetCustomerID(id int) *BasketUpdateOne {
	buo.mutation.SetCustomerID(id)
	return buo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (buo *BasketUpdateOne) SetNillableCustomerID(id *int) *BasketUpdateOne {
	if id != nil {
		buo = buo.SetCustomerID(*id)
	}
	return buo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (buo *BasketUpdateOne) SetCustomer(c *Customer) *BasketUpdateOne {
	return buo.SetCustomerID(c.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (buo *BasketUpdateOne) SetProductID(id int) *BasketUpdateOne {
	buo.mutation.SetProductID(id)
	return buo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (buo *BasketUpdateOne) SetNillableProductID(id *int) *BasketUpdateOne {
	if id != nil {
		buo = buo.SetProductID(*id)
	}
	return buo
}

// SetProduct sets the "product" edge to the Product entity.
func (buo *BasketUpdateOne) SetProduct(p *Product) *BasketUpdateOne {
	return buo.SetProductID(p.ID)
}

// Mutation returns the BasketMutation object of the builder.
func (buo *BasketUpdateOne) Mutation() *BasketMutation {
	return buo.mutation
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (buo *BasketUpdateOne) ClearMerchant() *BasketUpdateOne {
	buo.mutation.ClearMerchant()
	return buo
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (buo *BasketUpdateOne) ClearAgent() *BasketUpdateOne {
	buo.mutation.ClearAgent()
	return buo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (buo *BasketUpdateOne) ClearCustomer() *BasketUpdateOne {
	buo.mutation.ClearCustomer()
	return buo
}

// ClearProduct clears the "product" edge to the Product entity.
func (buo *BasketUpdateOne) ClearProduct() *BasketUpdateOne {
	buo.mutation.ClearProduct()
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BasketUpdateOne) Select(field string, fields ...string) *BasketUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Basket entity.
func (buo *BasketUpdateOne) Save(ctx context.Context) (*Basket, error) {
	var (
		err  error
		node *Basket
	)
	buo.defaults()
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BasketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BasketUpdateOne) SaveX(ctx context.Context) *Basket {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BasketUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BasketUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BasketUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := basket.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

func (buo *BasketUpdateOne) sqlSave(ctx context.Context) (_node *Basket, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   basket.Table,
			Columns: basket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: basket.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Basket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, basket.FieldID)
		for _, f := range fields {
			if !basket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != basket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basket.FieldUpdatedAt,
		})
	}
	if buo.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.MerchantTable,
			Columns: []string{basket.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.MerchantTable,
			Columns: []string{basket.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.AgentTable,
			Columns: []string{basket.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.AgentTable,
			Columns: []string{basket.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.CustomerTable,
			Columns: []string{basket.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.CustomerTable,
			Columns: []string{basket.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.ProductTable,
			Columns: []string{basket.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basket.ProductTable,
			Columns: []string{basket.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Basket{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{basket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
