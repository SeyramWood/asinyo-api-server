// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/app/domain/models"
	"github.com/SeyramWood/ent/notification"
)

// Notification is the model entity for the Notification schema.
type Notification struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Event holds the value of the "event" field.
	Event string `json:"event,omitempty"`
	// Activity holds the value of the "activity" field.
	Activity string `json:"activity,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// SubjectType holds the value of the "subject_type" field.
	SubjectType string `json:"subject_type,omitempty"`
	// SubjectID holds the value of the "subject_id" field.
	SubjectID int `json:"subject_id,omitempty"`
	// CreatorType holds the value of the "creator_type" field.
	CreatorType string `json:"creator_type,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID int `json:"creator_id,omitempty"`
	// CustomerReadAt holds the value of the "customer_read_at" field.
	CustomerReadAt string `json:"customer_read_at,omitempty"`
	// AgentReadAt holds the value of the "agent_read_at" field.
	AgentReadAt string `json:"agent_read_at,omitempty"`
	// MerchantReadAt holds the value of the "merchant_read_at" field.
	MerchantReadAt string `json:"merchant_read_at,omitempty"`
	// AdminReadAt holds the value of the "admin_read_at" field.
	AdminReadAt []*models.AdminRead `json:"admin_read_at,omitempty"`
	// Data holds the value of the "data" field.
	Data *struct {
		Data interface{} "json:\"data\""
	} `json:"data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationQuery when eager-loading is set.
	Edges        NotificationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NotificationEdges holds the relations/edges for other nodes in the graph.
type NotificationEdges struct {
	// Admin holds the value of the admin edge.
	Admin []*Admin `json:"admin,omitempty"`
	// Merchant holds the value of the merchant edge.
	Merchant []*Merchant `json:"merchant,omitempty"`
	// Agent holds the value of the agent edge.
	Agent []*Agent `json:"agent,omitempty"`
	// Customer holds the value of the customer edge.
	Customer []*Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AdminOrErr returns the Admin value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) AdminOrErr() ([]*Admin, error) {
	if e.loadedTypes[0] {
		return e.Admin, nil
	}
	return nil, &NotLoadedError{edge: "admin"}
}

// MerchantOrErr returns the Merchant value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) MerchantOrErr() ([]*Merchant, error) {
	if e.loadedTypes[1] {
		return e.Merchant, nil
	}
	return nil, &NotLoadedError{edge: "merchant"}
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) AgentOrErr() ([]*Agent, error) {
	if e.loadedTypes[2] {
		return e.Agent, nil
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) CustomerOrErr() ([]*Customer, error) {
	if e.loadedTypes[3] {
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notification.FieldAdminReadAt, notification.FieldData:
			values[i] = new([]byte)
		case notification.FieldID, notification.FieldSubjectID, notification.FieldCreatorID:
			values[i] = new(sql.NullInt64)
		case notification.FieldEvent, notification.FieldActivity, notification.FieldDescription, notification.FieldSubjectType, notification.FieldCreatorType, notification.FieldCustomerReadAt, notification.FieldAgentReadAt, notification.FieldMerchantReadAt:
			values[i] = new(sql.NullString)
		case notification.FieldCreatedAt, notification.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notification fields.
func (n *Notification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case notification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case notification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case notification.FieldEvent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event", values[i])
			} else if value.Valid {
				n.Event = value.String
			}
		case notification.FieldActivity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity", values[i])
			} else if value.Valid {
				n.Activity = value.String
			}
		case notification.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				n.Description = value.String
			}
		case notification.FieldSubjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_type", values[i])
			} else if value.Valid {
				n.SubjectType = value.String
			}
		case notification.FieldSubjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subject_id", values[i])
			} else if value.Valid {
				n.SubjectID = int(value.Int64)
			}
		case notification.FieldCreatorType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_type", values[i])
			} else if value.Valid {
				n.CreatorType = value.String
			}
		case notification.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				n.CreatorID = int(value.Int64)
			}
		case notification.FieldCustomerReadAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_read_at", values[i])
			} else if value.Valid {
				n.CustomerReadAt = value.String
			}
		case notification.FieldAgentReadAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_read_at", values[i])
			} else if value.Valid {
				n.AgentReadAt = value.String
			}
		case notification.FieldMerchantReadAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_read_at", values[i])
			} else if value.Valid {
				n.MerchantReadAt = value.String
			}
		case notification.FieldAdminReadAt:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field admin_read_at", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.AdminReadAt); err != nil {
					return fmt.Errorf("unmarshal field admin_read_at: %w", err)
				}
			}
		case notification.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Notification.
// This includes values selected through modifiers, order, etc.
func (n *Notification) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryAdmin queries the "admin" edge of the Notification entity.
func (n *Notification) QueryAdmin() *AdminQuery {
	return NewNotificationClient(n.config).QueryAdmin(n)
}

// QueryMerchant queries the "merchant" edge of the Notification entity.
func (n *Notification) QueryMerchant() *MerchantQuery {
	return NewNotificationClient(n.config).QueryMerchant(n)
}

// QueryAgent queries the "agent" edge of the Notification entity.
func (n *Notification) QueryAgent() *AgentQuery {
	return NewNotificationClient(n.config).QueryAgent(n)
}

// QueryCustomer queries the "customer" edge of the Notification entity.
func (n *Notification) QueryCustomer() *CustomerQuery {
	return NewNotificationClient(n.config).QueryCustomer(n)
}

// Update returns a builder for updating this Notification.
// Note that you need to call Notification.Unwrap() before calling this method if this Notification
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notification) Update() *NotificationUpdateOne {
	return NewNotificationClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Notification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notification) Unwrap() *Notification {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notification is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notification) String() string {
	var builder strings.Builder
	builder.WriteString("Notification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("event=")
	builder.WriteString(n.Event)
	builder.WriteString(", ")
	builder.WriteString("activity=")
	builder.WriteString(n.Activity)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(n.Description)
	builder.WriteString(", ")
	builder.WriteString("subject_type=")
	builder.WriteString(n.SubjectType)
	builder.WriteString(", ")
	builder.WriteString("subject_id=")
	builder.WriteString(fmt.Sprintf("%v", n.SubjectID))
	builder.WriteString(", ")
	builder.WriteString("creator_type=")
	builder.WriteString(n.CreatorType)
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", n.CreatorID))
	builder.WriteString(", ")
	builder.WriteString("customer_read_at=")
	builder.WriteString(n.CustomerReadAt)
	builder.WriteString(", ")
	builder.WriteString("agent_read_at=")
	builder.WriteString(n.AgentReadAt)
	builder.WriteString(", ")
	builder.WriteString("merchant_read_at=")
	builder.WriteString(n.MerchantReadAt)
	builder.WriteString(", ")
	builder.WriteString("admin_read_at=")
	builder.WriteString(fmt.Sprintf("%v", n.AdminReadAt))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", n.Data))
	builder.WriteByte(')')
	return builder.String()
}

// Notifications is a parsable slice of Notification.
type Notifications []*Notification
