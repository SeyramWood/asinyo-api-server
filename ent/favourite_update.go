// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/favourite"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/product"
)

// FavouriteUpdate is the builder for updating Favourite entities.
type FavouriteUpdate struct {
	config
	hooks    []Hook
	mutation *FavouriteMutation
}

// Where appends a list predicates to the FavouriteUpdate builder.
func (fu *FavouriteUpdate) Where(ps ...predicate.Favourite) *FavouriteUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FavouriteUpdate) SetUpdatedAt(t time.Time) *FavouriteUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (fu *FavouriteUpdate) SetMerchantID(id int) *FavouriteUpdate {
	fu.mutation.SetMerchantID(id)
	return fu
}

// SetNillableMerchantID sets the "merchant" edge to the Merchant entity by ID if the given value is not nil.
func (fu *FavouriteUpdate) SetNillableMerchantID(id *int) *FavouriteUpdate {
	if id != nil {
		fu = fu.SetMerchantID(*id)
	}
	return fu
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (fu *FavouriteUpdate) SetMerchant(m *Merchant) *FavouriteUpdate {
	return fu.SetMerchantID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (fu *FavouriteUpdate) SetAgentID(id int) *FavouriteUpdate {
	fu.mutation.SetAgentID(id)
	return fu
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (fu *FavouriteUpdate) SetNillableAgentID(id *int) *FavouriteUpdate {
	if id != nil {
		fu = fu.SetAgentID(*id)
	}
	return fu
}

// SetAgent sets the "agent" edge to the Agent entity.
func (fu *FavouriteUpdate) SetAgent(a *Agent) *FavouriteUpdate {
	return fu.SetAgentID(a.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (fu *FavouriteUpdate) SetCustomerID(id int) *FavouriteUpdate {
	fu.mutation.SetCustomerID(id)
	return fu
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (fu *FavouriteUpdate) SetNillableCustomerID(id *int) *FavouriteUpdate {
	if id != nil {
		fu = fu.SetCustomerID(*id)
	}
	return fu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (fu *FavouriteUpdate) SetCustomer(c *Customer) *FavouriteUpdate {
	return fu.SetCustomerID(c.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (fu *FavouriteUpdate) SetProductID(id int) *FavouriteUpdate {
	fu.mutation.SetProductID(id)
	return fu
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (fu *FavouriteUpdate) SetNillableProductID(id *int) *FavouriteUpdate {
	if id != nil {
		fu = fu.SetProductID(*id)
	}
	return fu
}

// SetProduct sets the "product" edge to the Product entity.
func (fu *FavouriteUpdate) SetProduct(p *Product) *FavouriteUpdate {
	return fu.SetProductID(p.ID)
}

// Mutation returns the FavouriteMutation object of the builder.
func (fu *FavouriteUpdate) Mutation() *FavouriteMutation {
	return fu.mutation
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (fu *FavouriteUpdate) ClearMerchant() *FavouriteUpdate {
	fu.mutation.ClearMerchant()
	return fu
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (fu *FavouriteUpdate) ClearAgent() *FavouriteUpdate {
	fu.mutation.ClearAgent()
	return fu
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (fu *FavouriteUpdate) ClearCustomer() *FavouriteUpdate {
	fu.mutation.ClearCustomer()
	return fu
}

// ClearProduct clears the "product" edge to the Product entity.
func (fu *FavouriteUpdate) ClearProduct() *FavouriteUpdate {
	fu.mutation.ClearProduct()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FavouriteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fu.defaults()
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FavouriteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FavouriteUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FavouriteUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FavouriteUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FavouriteUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := favourite.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

func (fu *FavouriteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   favourite.Table,
			Columns: favourite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: favourite.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: favourite.FieldUpdatedAt,
		})
	}
	if fu.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.MerchantTable,
			Columns: []string{favourite.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.MerchantTable,
			Columns: []string{favourite.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.AgentTable,
			Columns: []string{favourite.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.AgentTable,
			Columns: []string{favourite.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.CustomerTable,
			Columns: []string{favourite.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.CustomerTable,
			Columns: []string{favourite.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.ProductTable,
			Columns: []string{favourite.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.ProductTable,
			Columns: []string{favourite.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favourite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FavouriteUpdateOne is the builder for updating a single Favourite entity.
type FavouriteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FavouriteMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FavouriteUpdateOne) SetUpdatedAt(t time.Time) *FavouriteUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (fuo *FavouriteUpdateOne) SetMerchantID(id int) *FavouriteUpdateOne {
	fuo.mutation.SetMerchantID(id)
	return fuo
}

// SetNillableMerchantID sets the "merchant" edge to the Merchant entity by ID if the given value is not nil.
func (fuo *FavouriteUpdateOne) SetNillableMerchantID(id *int) *FavouriteUpdateOne {
	if id != nil {
		fuo = fuo.SetMerchantID(*id)
	}
	return fuo
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (fuo *FavouriteUpdateOne) SetMerchant(m *Merchant) *FavouriteUpdateOne {
	return fuo.SetMerchantID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (fuo *FavouriteUpdateOne) SetAgentID(id int) *FavouriteUpdateOne {
	fuo.mutation.SetAgentID(id)
	return fuo
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (fuo *FavouriteUpdateOne) SetNillableAgentID(id *int) *FavouriteUpdateOne {
	if id != nil {
		fuo = fuo.SetAgentID(*id)
	}
	return fuo
}

// SetAgent sets the "agent" edge to the Agent entity.
func (fuo *FavouriteUpdateOne) SetAgent(a *Agent) *FavouriteUpdateOne {
	return fuo.SetAgentID(a.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (fuo *FavouriteUpdateOne) SetCustomerID(id int) *FavouriteUpdateOne {
	fuo.mutation.SetCustomerID(id)
	return fuo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (fuo *FavouriteUpdateOne) SetNillableCustomerID(id *int) *FavouriteUpdateOne {
	if id != nil {
		fuo = fuo.SetCustomerID(*id)
	}
	return fuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (fuo *FavouriteUpdateOne) SetCustomer(c *Customer) *FavouriteUpdateOne {
	return fuo.SetCustomerID(c.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (fuo *FavouriteUpdateOne) SetProductID(id int) *FavouriteUpdateOne {
	fuo.mutation.SetProductID(id)
	return fuo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (fuo *FavouriteUpdateOne) SetNillableProductID(id *int) *FavouriteUpdateOne {
	if id != nil {
		fuo = fuo.SetProductID(*id)
	}
	return fuo
}

// SetProduct sets the "product" edge to the Product entity.
func (fuo *FavouriteUpdateOne) SetProduct(p *Product) *FavouriteUpdateOne {
	return fuo.SetProductID(p.ID)
}

// Mutation returns the FavouriteMutation object of the builder.
func (fuo *FavouriteUpdateOne) Mutation() *FavouriteMutation {
	return fuo.mutation
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (fuo *FavouriteUpdateOne) ClearMerchant() *FavouriteUpdateOne {
	fuo.mutation.ClearMerchant()
	return fuo
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (fuo *FavouriteUpdateOne) ClearAgent() *FavouriteUpdateOne {
	fuo.mutation.ClearAgent()
	return fuo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (fuo *FavouriteUpdateOne) ClearCustomer() *FavouriteUpdateOne {
	fuo.mutation.ClearCustomer()
	return fuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (fuo *FavouriteUpdateOne) ClearProduct() *FavouriteUpdateOne {
	fuo.mutation.ClearProduct()
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FavouriteUpdateOne) Select(field string, fields ...string) *FavouriteUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Favourite entity.
func (fuo *FavouriteUpdateOne) Save(ctx context.Context) (*Favourite, error) {
	var (
		err  error
		node *Favourite
	)
	fuo.defaults()
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FavouriteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Favourite)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FavouriteMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FavouriteUpdateOne) SaveX(ctx context.Context) *Favourite {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FavouriteUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FavouriteUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FavouriteUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := favourite.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

func (fuo *FavouriteUpdateOne) sqlSave(ctx context.Context) (_node *Favourite, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   favourite.Table,
			Columns: favourite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: favourite.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Favourite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, favourite.FieldID)
		for _, f := range fields {
			if !favourite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != favourite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: favourite.FieldUpdatedAt,
		})
	}
	if fuo.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.MerchantTable,
			Columns: []string{favourite.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.MerchantTable,
			Columns: []string{favourite.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.AgentTable,
			Columns: []string{favourite.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.AgentTable,
			Columns: []string{favourite.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.CustomerTable,
			Columns: []string{favourite.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.CustomerTable,
			Columns: []string{favourite.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.ProductTable,
			Columns: []string{favourite.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.ProductTable,
			Columns: []string{favourite.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Favourite{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favourite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
