// Code generated by ent, DO NOT EDIT.

package suppliermerchant

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SeyramWood/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldUpdatedAt, v))
}

// GhanaCard applies equality check predicate on the "ghana_card" field. It's identical to GhanaCardEQ.
func GhanaCard(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldGhanaCard, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldLastName, v))
}

// OtherName applies equality check predicate on the "other_name" field. It's identical to OtherNameEQ.
func OtherName(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldOtherName, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldPhone, v))
}

// OtherPhone applies equality check predicate on the "other_phone" field. It's identical to OtherPhoneEQ.
func OtherPhone(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldOtherPhone, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLTE(FieldUpdatedAt, v))
}

// GhanaCardEQ applies the EQ predicate on the "ghana_card" field.
func GhanaCardEQ(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldGhanaCard, v))
}

// GhanaCardNEQ applies the NEQ predicate on the "ghana_card" field.
func GhanaCardNEQ(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNEQ(FieldGhanaCard, v))
}

// GhanaCardIn applies the In predicate on the "ghana_card" field.
func GhanaCardIn(vs ...string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldIn(FieldGhanaCard, vs...))
}

// GhanaCardNotIn applies the NotIn predicate on the "ghana_card" field.
func GhanaCardNotIn(vs ...string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNotIn(FieldGhanaCard, vs...))
}

// GhanaCardGT applies the GT predicate on the "ghana_card" field.
func GhanaCardGT(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGT(FieldGhanaCard, v))
}

// GhanaCardGTE applies the GTE predicate on the "ghana_card" field.
func GhanaCardGTE(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGTE(FieldGhanaCard, v))
}

// GhanaCardLT applies the LT predicate on the "ghana_card" field.
func GhanaCardLT(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLT(FieldGhanaCard, v))
}

// GhanaCardLTE applies the LTE predicate on the "ghana_card" field.
func GhanaCardLTE(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLTE(FieldGhanaCard, v))
}

// GhanaCardContains applies the Contains predicate on the "ghana_card" field.
func GhanaCardContains(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldContains(FieldGhanaCard, v))
}

// GhanaCardHasPrefix applies the HasPrefix predicate on the "ghana_card" field.
func GhanaCardHasPrefix(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldHasPrefix(FieldGhanaCard, v))
}

// GhanaCardHasSuffix applies the HasSuffix predicate on the "ghana_card" field.
func GhanaCardHasSuffix(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldHasSuffix(FieldGhanaCard, v))
}

// GhanaCardEqualFold applies the EqualFold predicate on the "ghana_card" field.
func GhanaCardEqualFold(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEqualFold(FieldGhanaCard, v))
}

// GhanaCardContainsFold applies the ContainsFold predicate on the "ghana_card" field.
func GhanaCardContainsFold(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldContainsFold(FieldGhanaCard, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldContainsFold(FieldLastName, v))
}

// OtherNameEQ applies the EQ predicate on the "other_name" field.
func OtherNameEQ(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldOtherName, v))
}

// OtherNameNEQ applies the NEQ predicate on the "other_name" field.
func OtherNameNEQ(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNEQ(FieldOtherName, v))
}

// OtherNameIn applies the In predicate on the "other_name" field.
func OtherNameIn(vs ...string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldIn(FieldOtherName, vs...))
}

// OtherNameNotIn applies the NotIn predicate on the "other_name" field.
func OtherNameNotIn(vs ...string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNotIn(FieldOtherName, vs...))
}

// OtherNameGT applies the GT predicate on the "other_name" field.
func OtherNameGT(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGT(FieldOtherName, v))
}

// OtherNameGTE applies the GTE predicate on the "other_name" field.
func OtherNameGTE(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGTE(FieldOtherName, v))
}

// OtherNameLT applies the LT predicate on the "other_name" field.
func OtherNameLT(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLT(FieldOtherName, v))
}

// OtherNameLTE applies the LTE predicate on the "other_name" field.
func OtherNameLTE(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLTE(FieldOtherName, v))
}

// OtherNameContains applies the Contains predicate on the "other_name" field.
func OtherNameContains(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldContains(FieldOtherName, v))
}

// OtherNameHasPrefix applies the HasPrefix predicate on the "other_name" field.
func OtherNameHasPrefix(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldHasPrefix(FieldOtherName, v))
}

// OtherNameHasSuffix applies the HasSuffix predicate on the "other_name" field.
func OtherNameHasSuffix(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldHasSuffix(FieldOtherName, v))
}

// OtherNameEqualFold applies the EqualFold predicate on the "other_name" field.
func OtherNameEqualFold(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEqualFold(FieldOtherName, v))
}

// OtherNameContainsFold applies the ContainsFold predicate on the "other_name" field.
func OtherNameContainsFold(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldContainsFold(FieldOtherName, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldContainsFold(FieldPhone, v))
}

// OtherPhoneEQ applies the EQ predicate on the "other_phone" field.
func OtherPhoneEQ(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEQ(FieldOtherPhone, v))
}

// OtherPhoneNEQ applies the NEQ predicate on the "other_phone" field.
func OtherPhoneNEQ(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNEQ(FieldOtherPhone, v))
}

// OtherPhoneIn applies the In predicate on the "other_phone" field.
func OtherPhoneIn(vs ...string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldIn(FieldOtherPhone, vs...))
}

// OtherPhoneNotIn applies the NotIn predicate on the "other_phone" field.
func OtherPhoneNotIn(vs ...string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNotIn(FieldOtherPhone, vs...))
}

// OtherPhoneGT applies the GT predicate on the "other_phone" field.
func OtherPhoneGT(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGT(FieldOtherPhone, v))
}

// OtherPhoneGTE applies the GTE predicate on the "other_phone" field.
func OtherPhoneGTE(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldGTE(FieldOtherPhone, v))
}

// OtherPhoneLT applies the LT predicate on the "other_phone" field.
func OtherPhoneLT(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLT(FieldOtherPhone, v))
}

// OtherPhoneLTE applies the LTE predicate on the "other_phone" field.
func OtherPhoneLTE(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldLTE(FieldOtherPhone, v))
}

// OtherPhoneContains applies the Contains predicate on the "other_phone" field.
func OtherPhoneContains(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldContains(FieldOtherPhone, v))
}

// OtherPhoneHasPrefix applies the HasPrefix predicate on the "other_phone" field.
func OtherPhoneHasPrefix(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldHasPrefix(FieldOtherPhone, v))
}

// OtherPhoneHasSuffix applies the HasSuffix predicate on the "other_phone" field.
func OtherPhoneHasSuffix(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldHasSuffix(FieldOtherPhone, v))
}

// OtherPhoneIsNil applies the IsNil predicate on the "other_phone" field.
func OtherPhoneIsNil() predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldIsNull(FieldOtherPhone))
}

// OtherPhoneNotNil applies the NotNil predicate on the "other_phone" field.
func OtherPhoneNotNil() predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldNotNull(FieldOtherPhone))
}

// OtherPhoneEqualFold applies the EqualFold predicate on the "other_phone" field.
func OtherPhoneEqualFold(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldEqualFold(FieldOtherPhone, v))
}

// OtherPhoneContainsFold applies the ContainsFold predicate on the "other_phone" field.
func OtherPhoneContainsFold(v string) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(sql.FieldContainsFold(FieldOtherPhone, v))
}

// HasMerchant applies the HasEdge predicate on the "merchant" edge.
func HasMerchant() predicate.SupplierMerchant {
	return predicate.SupplierMerchant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, MerchantTable, MerchantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMerchantWith applies the HasEdge predicate on the "merchant" edge with a given conditions (other predicates).
func HasMerchantWith(preds ...predicate.Merchant) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(func(s *sql.Selector) {
		step := newMerchantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SupplierMerchant) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SupplierMerchant) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SupplierMerchant) predicate.SupplierMerchant {
	return predicate.SupplierMerchant(func(s *sql.Selector) {
		p(s.Not())
	})
}
