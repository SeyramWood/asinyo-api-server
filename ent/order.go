// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/address"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/product"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status holds the value of the "status" field.
	Status order.Status `json:"status,omitempty"`
	// DeliveredAt holds the value of the "delivered_at" field.
	DeliveredAt *time.Time `json:"delivered_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges           OrderEdges `json:"edges"`
	address_orders  *int
	agent_orders    *int
	customer_orders *int
	merchant_orders *int
	product_orders  *int
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Merchant holds the value of the merchant edge.
	Merchant *Merchant `json:"merchant,omitempty"`
	// Agent holds the value of the agent edge.
	Agent *Agent `json:"agent,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Address holds the value of the address edge.
	Address *Address `json:"address,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// MerchantOrErr returns the Merchant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) MerchantOrErr() (*Merchant, error) {
	if e.loadedTypes[0] {
		if e.Merchant == nil {
			// The edge merchant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: merchant.Label}
		}
		return e.Merchant, nil
	}
	return nil, &NotLoadedError{edge: "merchant"}
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) AgentOrErr() (*Agent, error) {
	if e.loadedTypes[1] {
		if e.Agent == nil {
			// The edge agent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: agent.Label}
		}
		return e.Agent, nil
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[2] {
		if e.Customer == nil {
			// The edge customer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// AddressOrErr returns the Address value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) AddressOrErr() (*Address, error) {
	if e.loadedTypes[3] {
		if e.Address == nil {
			// The edge address was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: address.Label}
		}
		return e.Address, nil
	}
	return nil, &NotLoadedError{edge: "address"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[4] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			values[i] = new(sql.NullInt64)
		case order.FieldStatus:
			values[i] = new(sql.NullString)
		case order.FieldCreatedAt, order.FieldUpdatedAt, order.FieldDeliveredAt:
			values[i] = new(sql.NullTime)
		case order.ForeignKeys[0]: // address_orders
			values[i] = new(sql.NullInt64)
		case order.ForeignKeys[1]: // agent_orders
			values[i] = new(sql.NullInt64)
		case order.ForeignKeys[2]: // customer_orders
			values[i] = new(sql.NullInt64)
		case order.ForeignKeys[3]: // merchant_orders
			values[i] = new(sql.NullInt64)
		case order.ForeignKeys[4]: // product_orders
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Order", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = order.Status(value.String)
			}
		case order.FieldDeliveredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delivered_at", values[i])
			} else if value.Valid {
				o.DeliveredAt = new(time.Time)
				*o.DeliveredAt = value.Time
			}
		case order.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field address_orders", value)
			} else if value.Valid {
				o.address_orders = new(int)
				*o.address_orders = int(value.Int64)
			}
		case order.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field agent_orders", value)
			} else if value.Valid {
				o.agent_orders = new(int)
				*o.agent_orders = int(value.Int64)
			}
		case order.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_orders", value)
			} else if value.Valid {
				o.customer_orders = new(int)
				*o.customer_orders = int(value.Int64)
			}
		case order.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field merchant_orders", value)
			} else if value.Valid {
				o.merchant_orders = new(int)
				*o.merchant_orders = int(value.Int64)
			}
		case order.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_orders", value)
			} else if value.Valid {
				o.product_orders = new(int)
				*o.product_orders = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMerchant queries the "merchant" edge of the Order entity.
func (o *Order) QueryMerchant() *MerchantQuery {
	return (&OrderClient{config: o.config}).QueryMerchant(o)
}

// QueryAgent queries the "agent" edge of the Order entity.
func (o *Order) QueryAgent() *AgentQuery {
	return (&OrderClient{config: o.config}).QueryAgent(o)
}

// QueryCustomer queries the "customer" edge of the Order entity.
func (o *Order) QueryCustomer() *CustomerQuery {
	return (&OrderClient{config: o.config}).QueryCustomer(o)
}

// QueryAddress queries the "address" edge of the Order entity.
func (o *Order) QueryAddress() *AddressQuery {
	return (&OrderClient{config: o.config}).QueryAddress(o)
}

// QueryProduct queries the "product" edge of the Order entity.
func (o *Order) QueryProduct() *ProductQuery {
	return (&OrderClient{config: o.config}).QueryProduct(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return (&OrderClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	if v := o.DeliveredAt; v != nil {
		builder.WriteString(", delivered_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order

func (o Orders) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
