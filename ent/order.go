// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/address"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/logistic"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/pickupstation"
	"github.com/SeyramWood/ent/purchaserequest"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// OrderNumber holds the value of the "order_number" field.
	OrderNumber string `json:"order_number,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// DeliveryFee holds the value of the "delivery_fee" field.
	DeliveryFee float64 `json:"delivery_fee,omitempty"`
	// Reference holds the value of the "reference" field.
	Reference *string `json:"reference,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel *string `json:"channel,omitempty"`
	// PaidAt holds the value of the "paid_at" field.
	PaidAt *string `json:"paid_at,omitempty"`
	// DeliveryMethod holds the value of the "delivery_method" field.
	DeliveryMethod order.DeliveryMethod `json:"delivery_method,omitempty"`
	// PaymentMethod holds the value of the "payment_method" field.
	PaymentMethod order.PaymentMethod `json:"payment_method,omitempty"`
	// Status holds the value of the "status" field.
	Status order.Status `json:"status,omitempty"`
	// CustomerApproval holds the value of the "customer_approval" field.
	CustomerApproval order.CustomerApproval `json:"customer_approval,omitempty"`
	// StoreTasksCreated holds the value of the "store_tasks_created" field.
	StoreTasksCreated []int `json:"store_tasks_created,omitempty"`
	// DeliveredAt holds the value of the "delivered_at" field.
	DeliveredAt *time.Time `json:"delivered_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges                  OrderEdges `json:"edges"`
	address_orders         *int
	agent_orders           *int
	customer_orders        *int
	merchant_orders        *int
	pickup_station_orders  *int
	purchase_request_order *int
	selectValues           sql.SelectValues
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Details holds the value of the details edge.
	Details []*OrderDetail `json:"details,omitempty"`
	// Logistic holds the value of the logistic edge.
	Logistic *Logistic `json:"logistic,omitempty"`
	// Merchant holds the value of the merchant edge.
	Merchant *Merchant `json:"merchant,omitempty"`
	// Agent holds the value of the agent edge.
	Agent *Agent `json:"agent,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Address holds the value of the address edge.
	Address *Address `json:"address,omitempty"`
	// Pickup holds the value of the pickup edge.
	Pickup *PickupStation `json:"pickup,omitempty"`
	// Stores holds the value of the stores edge.
	Stores []*MerchantStore `json:"stores,omitempty"`
	// PurchaseRequest holds the value of the purchase_request edge.
	PurchaseRequest *PurchaseRequest `json:"purchase_request,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// DetailsOrErr returns the Details value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) DetailsOrErr() ([]*OrderDetail, error) {
	if e.loadedTypes[0] {
		return e.Details, nil
	}
	return nil, &NotLoadedError{edge: "details"}
}

// LogisticOrErr returns the Logistic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) LogisticOrErr() (*Logistic, error) {
	if e.loadedTypes[1] {
		if e.Logistic == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: logistic.Label}
		}
		return e.Logistic, nil
	}
	return nil, &NotLoadedError{edge: "logistic"}
}

// MerchantOrErr returns the Merchant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) MerchantOrErr() (*Merchant, error) {
	if e.loadedTypes[2] {
		if e.Merchant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: merchant.Label}
		}
		return e.Merchant, nil
	}
	return nil, &NotLoadedError{edge: "merchant"}
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) AgentOrErr() (*Agent, error) {
	if e.loadedTypes[3] {
		if e.Agent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: agent.Label}
		}
		return e.Agent, nil
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[4] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// AddressOrErr returns the Address value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) AddressOrErr() (*Address, error) {
	if e.loadedTypes[5] {
		if e.Address == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: address.Label}
		}
		return e.Address, nil
	}
	return nil, &NotLoadedError{edge: "address"}
}

// PickupOrErr returns the Pickup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) PickupOrErr() (*PickupStation, error) {
	if e.loadedTypes[6] {
		if e.Pickup == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: pickupstation.Label}
		}
		return e.Pickup, nil
	}
	return nil, &NotLoadedError{edge: "pickup"}
}

// StoresOrErr returns the Stores value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) StoresOrErr() ([]*MerchantStore, error) {
	if e.loadedTypes[7] {
		return e.Stores, nil
	}
	return nil, &NotLoadedError{edge: "stores"}
}

// PurchaseRequestOrErr returns the PurchaseRequest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) PurchaseRequestOrErr() (*PurchaseRequest, error) {
	if e.loadedTypes[8] {
		if e.PurchaseRequest == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: purchaserequest.Label}
		}
		return e.PurchaseRequest, nil
	}
	return nil, &NotLoadedError{edge: "purchase_request"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldStoreTasksCreated:
			values[i] = new([]byte)
		case order.FieldAmount, order.FieldDeliveryFee:
			values[i] = new(sql.NullFloat64)
		case order.FieldID:
			values[i] = new(sql.NullInt64)
		case order.FieldOrderNumber, order.FieldCurrency, order.FieldReference, order.FieldChannel, order.FieldPaidAt, order.FieldDeliveryMethod, order.FieldPaymentMethod, order.FieldStatus, order.FieldCustomerApproval:
			values[i] = new(sql.NullString)
		case order.FieldCreatedAt, order.FieldUpdatedAt, order.FieldDeliveredAt:
			values[i] = new(sql.NullTime)
		case order.ForeignKeys[0]: // address_orders
			values[i] = new(sql.NullInt64)
		case order.ForeignKeys[1]: // agent_orders
			values[i] = new(sql.NullInt64)
		case order.ForeignKeys[2]: // customer_orders
			values[i] = new(sql.NullInt64)
		case order.ForeignKeys[3]: // merchant_orders
			values[i] = new(sql.NullInt64)
		case order.ForeignKeys[4]: // pickup_station_orders
			values[i] = new(sql.NullInt64)
		case order.ForeignKeys[5]: // purchase_request_order
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case order.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_number", values[i])
			} else if value.Valid {
				o.OrderNumber = value.String
			}
		case order.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				o.Currency = value.String
			}
		case order.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				o.Amount = value.Float64
			}
		case order.FieldDeliveryFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_fee", values[i])
			} else if value.Valid {
				o.DeliveryFee = value.Float64
			}
		case order.FieldReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference", values[i])
			} else if value.Valid {
				o.Reference = new(string)
				*o.Reference = value.String
			}
		case order.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				o.Channel = new(string)
				*o.Channel = value.String
			}
		case order.FieldPaidAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field paid_at", values[i])
			} else if value.Valid {
				o.PaidAt = new(string)
				*o.PaidAt = value.String
			}
		case order.FieldDeliveryMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_method", values[i])
			} else if value.Valid {
				o.DeliveryMethod = order.DeliveryMethod(value.String)
			}
		case order.FieldPaymentMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method", values[i])
			} else if value.Valid {
				o.PaymentMethod = order.PaymentMethod(value.String)
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = order.Status(value.String)
			}
		case order.FieldCustomerApproval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_approval", values[i])
			} else if value.Valid {
				o.CustomerApproval = order.CustomerApproval(value.String)
			}
		case order.FieldStoreTasksCreated:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field store_tasks_created", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.StoreTasksCreated); err != nil {
					return fmt.Errorf("unmarshal field store_tasks_created: %w", err)
				}
			}
		case order.FieldDeliveredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delivered_at", values[i])
			} else if value.Valid {
				o.DeliveredAt = new(time.Time)
				*o.DeliveredAt = value.Time
			}
		case order.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field address_orders", value)
			} else if value.Valid {
				o.address_orders = new(int)
				*o.address_orders = int(value.Int64)
			}
		case order.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field agent_orders", value)
			} else if value.Valid {
				o.agent_orders = new(int)
				*o.agent_orders = int(value.Int64)
			}
		case order.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_orders", value)
			} else if value.Valid {
				o.customer_orders = new(int)
				*o.customer_orders = int(value.Int64)
			}
		case order.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field merchant_orders", value)
			} else if value.Valid {
				o.merchant_orders = new(int)
				*o.merchant_orders = int(value.Int64)
			}
		case order.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field pickup_station_orders", value)
			} else if value.Valid {
				o.pickup_station_orders = new(int)
				*o.pickup_station_orders = int(value.Int64)
			}
		case order.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field purchase_request_order", value)
			} else if value.Valid {
				o.purchase_request_order = new(int)
				*o.purchase_request_order = int(value.Int64)
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Order.
// This includes values selected through modifiers, order, etc.
func (o *Order) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryDetails queries the "details" edge of the Order entity.
func (o *Order) QueryDetails() *OrderDetailQuery {
	return NewOrderClient(o.config).QueryDetails(o)
}

// QueryLogistic queries the "logistic" edge of the Order entity.
func (o *Order) QueryLogistic() *LogisticQuery {
	return NewOrderClient(o.config).QueryLogistic(o)
}

// QueryMerchant queries the "merchant" edge of the Order entity.
func (o *Order) QueryMerchant() *MerchantQuery {
	return NewOrderClient(o.config).QueryMerchant(o)
}

// QueryAgent queries the "agent" edge of the Order entity.
func (o *Order) QueryAgent() *AgentQuery {
	return NewOrderClient(o.config).QueryAgent(o)
}

// QueryCustomer queries the "customer" edge of the Order entity.
func (o *Order) QueryCustomer() *CustomerQuery {
	return NewOrderClient(o.config).QueryCustomer(o)
}

// QueryAddress queries the "address" edge of the Order entity.
func (o *Order) QueryAddress() *AddressQuery {
	return NewOrderClient(o.config).QueryAddress(o)
}

// QueryPickup queries the "pickup" edge of the Order entity.
func (o *Order) QueryPickup() *PickupStationQuery {
	return NewOrderClient(o.config).QueryPickup(o)
}

// QueryStores queries the "stores" edge of the Order entity.
func (o *Order) QueryStores() *MerchantStoreQuery {
	return NewOrderClient(o.config).QueryStores(o)
}

// QueryPurchaseRequest queries the "purchase_request" edge of the Order entity.
func (o *Order) QueryPurchaseRequest() *PurchaseRequestQuery {
	return NewOrderClient(o.config).QueryPurchaseRequest(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order_number=")
	builder.WriteString(o.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(o.Currency)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", o.Amount))
	builder.WriteString(", ")
	builder.WriteString("delivery_fee=")
	builder.WriteString(fmt.Sprintf("%v", o.DeliveryFee))
	builder.WriteString(", ")
	if v := o.Reference; v != nil {
		builder.WriteString("reference=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := o.Channel; v != nil {
		builder.WriteString("channel=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := o.PaidAt; v != nil {
		builder.WriteString("paid_at=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("delivery_method=")
	builder.WriteString(fmt.Sprintf("%v", o.DeliveryMethod))
	builder.WriteString(", ")
	builder.WriteString("payment_method=")
	builder.WriteString(fmt.Sprintf("%v", o.PaymentMethod))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	builder.WriteString(", ")
	builder.WriteString("customer_approval=")
	builder.WriteString(fmt.Sprintf("%v", o.CustomerApproval))
	builder.WriteString(", ")
	builder.WriteString("store_tasks_created=")
	builder.WriteString(fmt.Sprintf("%v", o.StoreTasksCreated))
	builder.WriteString(", ")
	if v := o.DeliveredAt; v != nil {
		builder.WriteString("delivered_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
