// Code generated by ent, DO NOT EDIT.

package businesscustomer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SeyramWood/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// OtherPhone applies equality check predicate on the "other_phone" field. It's identical to OtherPhoneEQ.
func OtherPhone(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherPhone), v))
	})
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogo), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BusinessCustomer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BusinessCustomer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BusinessCustomer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BusinessCustomer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.BusinessCustomer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.BusinessCustomer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.BusinessCustomer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.BusinessCustomer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// OtherPhoneEQ applies the EQ predicate on the "other_phone" field.
func OtherPhoneEQ(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneNEQ applies the NEQ predicate on the "other_phone" field.
func OtherPhoneNEQ(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneIn applies the In predicate on the "other_phone" field.
func OtherPhoneIn(vs ...string) predicate.BusinessCustomer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOtherPhone), v...))
	})
}

// OtherPhoneNotIn applies the NotIn predicate on the "other_phone" field.
func OtherPhoneNotIn(vs ...string) predicate.BusinessCustomer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOtherPhone), v...))
	})
}

// OtherPhoneGT applies the GT predicate on the "other_phone" field.
func OtherPhoneGT(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneGTE applies the GTE predicate on the "other_phone" field.
func OtherPhoneGTE(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneLT applies the LT predicate on the "other_phone" field.
func OtherPhoneLT(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneLTE applies the LTE predicate on the "other_phone" field.
func OtherPhoneLTE(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneContains applies the Contains predicate on the "other_phone" field.
func OtherPhoneContains(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneHasPrefix applies the HasPrefix predicate on the "other_phone" field.
func OtherPhoneHasPrefix(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneHasSuffix applies the HasSuffix predicate on the "other_phone" field.
func OtherPhoneHasSuffix(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneIsNil applies the IsNil predicate on the "other_phone" field.
func OtherPhoneIsNil() predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOtherPhone)))
	})
}

// OtherPhoneNotNil applies the NotNil predicate on the "other_phone" field.
func OtherPhoneNotNil() predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOtherPhone)))
	})
}

// OtherPhoneEqualFold applies the EqualFold predicate on the "other_phone" field.
func OtherPhoneEqualFold(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneContainsFold applies the ContainsFold predicate on the "other_phone" field.
func OtherPhoneContainsFold(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOtherPhone), v))
	})
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogo), v))
	})
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogo), v))
	})
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...string) predicate.BusinessCustomer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLogo), v...))
	})
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...string) predicate.BusinessCustomer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLogo), v...))
	})
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogo), v))
	})
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogo), v))
	})
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogo), v))
	})
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogo), v))
	})
}

// LogoContains applies the Contains predicate on the "logo" field.
func LogoContains(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogo), v))
	})
}

// LogoHasPrefix applies the HasPrefix predicate on the "logo" field.
func LogoHasPrefix(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogo), v))
	})
}

// LogoHasSuffix applies the HasSuffix predicate on the "logo" field.
func LogoHasSuffix(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogo), v))
	})
}

// LogoIsNil applies the IsNil predicate on the "logo" field.
func LogoIsNil() predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLogo)))
	})
}

// LogoNotNil applies the NotNil predicate on the "logo" field.
func LogoNotNil() predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLogo)))
	})
}

// LogoEqualFold applies the EqualFold predicate on the "logo" field.
func LogoEqualFold(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogo), v))
	})
}

// LogoContainsFold applies the ContainsFold predicate on the "logo" field.
func LogoContainsFold(v string) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogo), v))
	})
}

// ContactIsNil applies the IsNil predicate on the "contact" field.
func ContactIsNil() predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContact)))
	})
}

// ContactNotNil applies the NotNil predicate on the "contact" field.
func ContactNotNil() predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContact)))
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BusinessCustomer) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BusinessCustomer) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BusinessCustomer) predicate.BusinessCustomer {
	return predicate.BusinessCustomer(func(s *sql.Selector) {
		p(s.Not())
	})
}
