// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/retailmerchant"
)

// RetailMerchant is the model entity for the RetailMerchant schema.
type RetailMerchant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password []byte `json:"-"`
	// GhanaCard holds the value of the "ghana_card" field.
	GhanaCard string `json:"ghana_card,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// OtherName holds the value of the "other_name" field.
	OtherName string `json:"other_name,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// OtherPhone holds the value of the "other_phone" field.
	OtherPhone *string `json:"other_phone,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// DigitalAddress holds the value of the "digital_address" field.
	DigitalAddress string `json:"digital_address,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RetailMerchant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case retailmerchant.FieldPassword:
			values[i] = new([]byte)
		case retailmerchant.FieldID:
			values[i] = new(sql.NullInt64)
		case retailmerchant.FieldUsername, retailmerchant.FieldGhanaCard, retailmerchant.FieldLastName, retailmerchant.FieldOtherName, retailmerchant.FieldPhone, retailmerchant.FieldOtherPhone, retailmerchant.FieldAddress, retailmerchant.FieldDigitalAddress:
			values[i] = new(sql.NullString)
		case retailmerchant.FieldCreatedAt, retailmerchant.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RetailMerchant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RetailMerchant fields.
func (rm *RetailMerchant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case retailmerchant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rm.ID = int(value.Int64)
		case retailmerchant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rm.CreatedAt = value.Time
			}
		case retailmerchant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rm.UpdatedAt = value.Time
			}
		case retailmerchant.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				rm.Username = value.String
			}
		case retailmerchant.FieldPassword:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value != nil {
				rm.Password = *value
			}
		case retailmerchant.FieldGhanaCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ghana_card", values[i])
			} else if value.Valid {
				rm.GhanaCard = value.String
			}
		case retailmerchant.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				rm.LastName = value.String
			}
		case retailmerchant.FieldOtherName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_name", values[i])
			} else if value.Valid {
				rm.OtherName = value.String
			}
		case retailmerchant.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				rm.Phone = value.String
			}
		case retailmerchant.FieldOtherPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_phone", values[i])
			} else if value.Valid {
				rm.OtherPhone = new(string)
				*rm.OtherPhone = value.String
			}
		case retailmerchant.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				rm.Address = value.String
			}
		case retailmerchant.FieldDigitalAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field digital_address", values[i])
			} else if value.Valid {
				rm.DigitalAddress = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RetailMerchant.
// Note that you need to call RetailMerchant.Unwrap() before calling this method if this RetailMerchant
// was returned from a transaction, and the transaction was committed or rolled back.
func (rm *RetailMerchant) Update() *RetailMerchantUpdateOne {
	return (&RetailMerchantClient{config: rm.config}).UpdateOne(rm)
}

// Unwrap unwraps the RetailMerchant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rm *RetailMerchant) Unwrap() *RetailMerchant {
	tx, ok := rm.config.driver.(*txDriver)
	if !ok {
		panic("ent: RetailMerchant is not a transactional entity")
	}
	rm.config.driver = tx.drv
	return rm
}

// String implements the fmt.Stringer.
func (rm *RetailMerchant) String() string {
	var builder strings.Builder
	builder.WriteString("RetailMerchant(")
	builder.WriteString(fmt.Sprintf("id=%v", rm.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(rm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(rm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", username=")
	builder.WriteString(rm.Username)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", ghana_card=")
	builder.WriteString(rm.GhanaCard)
	builder.WriteString(", last_name=")
	builder.WriteString(rm.LastName)
	builder.WriteString(", other_name=")
	builder.WriteString(rm.OtherName)
	builder.WriteString(", phone=")
	builder.WriteString(rm.Phone)
	if v := rm.OtherPhone; v != nil {
		builder.WriteString(", other_phone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", address=")
	builder.WriteString(rm.Address)
	builder.WriteString(", digital_address=")
	builder.WriteString(rm.DigitalAddress)
	builder.WriteByte(')')
	return builder.String()
}

// RetailMerchants is a parsable slice of RetailMerchant.
type RetailMerchants []*RetailMerchant

func (rm RetailMerchants) config(cfg config) {
	for _i := range rm {
		rm[_i].config = cfg
	}
}
