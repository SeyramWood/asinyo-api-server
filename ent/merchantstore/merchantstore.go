// Code generated by ent, DO NOT EDIT.

package merchantstore

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the merchantstore type in the database.
	Label = "merchant_store"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAbout holds the string denoting the about field in the database.
	FieldAbout = "about"
	// FieldSlogan holds the string denoting the slogan field in the database.
	FieldSlogan = "slogan"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLogo holds the string denoting the logo field in the database.
	FieldLogo = "logo"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldDefaultAccount holds the string denoting the default_account field in the database.
	FieldDefaultAccount = "default_account"
	// FieldBankAccount holds the string denoting the bank_account field in the database.
	FieldBankAccount = "bank_account"
	// FieldMomoAccount holds the string denoting the momo_account field in the database.
	FieldMomoAccount = "momo_account"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldCoordinate holds the string denoting the coordinate field in the database.
	FieldCoordinate = "coordinate"
	// FieldMerchantType holds the string denoting the merchant_type field in the database.
	FieldMerchantType = "merchant_type"
	// FieldPermitAgent holds the string denoting the permit_agent field in the database.
	FieldPermitAgent = "permit_agent"
	// EdgeMerchant holds the string denoting the merchant edge name in mutations.
	EdgeMerchant = "merchant"
	// EdgeAgent holds the string denoting the agent edge name in mutations.
	EdgeAgent = "agent"
	// EdgeRequests holds the string denoting the requests edge name in mutations.
	EdgeRequests = "requests"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgeOrderDetails holds the string denoting the order_details edge name in mutations.
	EdgeOrderDetails = "order_details"
	// Table holds the table name of the merchantstore in the database.
	Table = "merchant_stores"
	// MerchantTable is the table that holds the merchant relation/edge.
	MerchantTable = "merchant_stores"
	// MerchantInverseTable is the table name for the Merchant entity.
	// It exists in this package in order to avoid circular dependency with the "merchant" package.
	MerchantInverseTable = "merchants"
	// MerchantColumn is the table column denoting the merchant relation/edge.
	MerchantColumn = "merchant_store"
	// AgentTable is the table that holds the agent relation/edge.
	AgentTable = "merchant_stores"
	// AgentInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	AgentInverseTable = "agents"
	// AgentColumn is the table column denoting the agent relation/edge.
	AgentColumn = "agent_store"
	// RequestsTable is the table that holds the requests relation/edge.
	RequestsTable = "agent_requests"
	// RequestsInverseTable is the table name for the AgentRequest entity.
	// It exists in this package in order to avoid circular dependency with the "agentrequest" package.
	RequestsInverseTable = "agent_requests"
	// RequestsColumn is the table column denoting the requests relation/edge.
	RequestsColumn = "merchant_store_requests"
	// OrdersTable is the table that holds the orders relation/edge. The primary key declared below.
	OrdersTable = "merchant_store_orders"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "orders"
	// OrderDetailsTable is the table that holds the order_details relation/edge.
	OrderDetailsTable = "order_details"
	// OrderDetailsInverseTable is the table name for the OrderDetail entity.
	// It exists in this package in order to avoid circular dependency with the "orderdetail" package.
	OrderDetailsInverseTable = "order_details"
	// OrderDetailsColumn is the table column denoting the order_details relation/edge.
	OrderDetailsColumn = "merchant_store_order_details"
)

// Columns holds all SQL columns for merchantstore fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldAbout,
	FieldSlogan,
	FieldDescription,
	FieldLogo,
	FieldImages,
	FieldDefaultAccount,
	FieldBankAccount,
	FieldMomoAccount,
	FieldAddress,
	FieldCoordinate,
	FieldMerchantType,
	FieldPermitAgent,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "merchant_stores"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"agent_store",
	"merchant_store",
}

var (
	// OrdersPrimaryKey and OrdersColumn2 are the table columns denoting the
	// primary key for the orders relation (M2M).
	OrdersPrimaryKey = []string{"merchant_store_id", "order_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// AboutValidator is a validator for the "about" field. It is called by the builders before save.
	AboutValidator func(string) error
	// SloganValidator is a validator for the "slogan" field. It is called by the builders before save.
	SloganValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// LogoValidator is a validator for the "logo" field. It is called by the builders before save.
	LogoValidator func(string) error
	// MerchantTypeValidator is a validator for the "merchant_type" field. It is called by the builders before save.
	MerchantTypeValidator func(string) error
	// DefaultPermitAgent holds the default value on creation for the "permit_agent" field.
	DefaultPermitAgent bool
)

// DefaultAccount defines the type for the "default_account" enum field.
type DefaultAccount string

// DefaultAccount values.
const (
	DefaultAccountBank DefaultAccount = "bank"
	DefaultAccountMomo DefaultAccount = "momo"
)

func (da DefaultAccount) String() string {
	return string(da)
}

// DefaultAccountValidator is a validator for the "default_account" field enum values. It is called by the builders before save.
func DefaultAccountValidator(da DefaultAccount) error {
	switch da {
	case DefaultAccountBank, DefaultAccountMomo:
		return nil
	default:
		return fmt.Errorf("merchantstore: invalid enum value for default_account field: %q", da)
	}
}

// OrderOption defines the ordering options for the MerchantStore queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAbout orders the results by the about field.
func ByAbout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbout, opts...).ToFunc()
}

// BySlogan orders the results by the slogan field.
func BySlogan(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlogan, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLogo orders the results by the logo field.
func ByLogo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogo, opts...).ToFunc()
}

// ByDefaultAccount orders the results by the default_account field.
func ByDefaultAccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultAccount, opts...).ToFunc()
}

// ByMerchantType orders the results by the merchant_type field.
func ByMerchantType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMerchantType, opts...).ToFunc()
}

// ByPermitAgent orders the results by the permit_agent field.
func ByPermitAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermitAgent, opts...).ToFunc()
}

// ByMerchantField orders the results by merchant field.
func ByMerchantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMerchantStep(), sql.OrderByField(field, opts...))
	}
}

// ByAgentField orders the results by agent field.
func ByAgentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentStep(), sql.OrderByField(field, opts...))
	}
}

// ByRequestsCount orders the results by requests count.
func ByRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequestsStep(), opts...)
	}
}

// ByRequests orders the results by requests terms.
func ByRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrdersCount orders the results by orders count.
func ByOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrdersStep(), opts...)
	}
}

// ByOrders orders the results by orders terms.
func ByOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrderDetailsCount orders the results by order_details count.
func ByOrderDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderDetailsStep(), opts...)
	}
}

// ByOrderDetails orders the results by order_details terms.
func ByOrderDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMerchantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MerchantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, MerchantTable, MerchantColumn),
	)
}
func newAgentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AgentTable, AgentColumn),
	)
}
func newRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RequestsTable, RequestsColumn),
	)
}
func newOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, OrdersTable, OrdersPrimaryKey...),
	)
}
func newOrderDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderDetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderDetailsTable, OrderDetailsColumn),
	)
}
