// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/pickupstation"
)

// PickupStation is the model entity for the PickupStation schema.
type PickupStation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Region holds the value of the "region" field.
	Region string `json:"region,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PickupStationQuery when eager-loading is set.
	Edges PickupStationEdges `json:"edges"`
}

// PickupStationEdges holds the relations/edges for other nodes in the graph.
type PickupStationEdges struct {
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e PickupStationEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[0] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PickupStation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pickupstation.FieldID:
			values[i] = new(sql.NullInt64)
		case pickupstation.FieldRegion, pickupstation.FieldCity, pickupstation.FieldName, pickupstation.FieldAddress:
			values[i] = new(sql.NullString)
		case pickupstation.FieldCreatedAt, pickupstation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PickupStation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PickupStation fields.
func (ps *PickupStation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pickupstation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case pickupstation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ps.CreatedAt = value.Time
			}
		case pickupstation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ps.UpdatedAt = value.Time
			}
		case pickupstation.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				ps.Region = value.String
			}
		case pickupstation.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				ps.City = value.String
			}
		case pickupstation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ps.Name = value.String
			}
		case pickupstation.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				ps.Address = value.String
			}
		}
	}
	return nil
}

// QueryOrders queries the "orders" edge of the PickupStation entity.
func (ps *PickupStation) QueryOrders() *OrderQuery {
	return (&PickupStationClient{config: ps.config}).QueryOrders(ps)
}

// Update returns a builder for updating this PickupStation.
// Note that you need to call PickupStation.Unwrap() before calling this method if this PickupStation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PickupStation) Update() *PickupStationUpdateOne {
	return (&PickupStationClient{config: ps.config}).UpdateOne(ps)
}

// Unwrap unwraps the PickupStation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PickupStation) Unwrap() *PickupStation {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PickupStation is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PickupStation) String() string {
	var builder strings.Builder
	builder.WriteString("PickupStation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ps.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ps.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(ps.Region)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(ps.City)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ps.Name)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(ps.Address)
	builder.WriteByte(')')
	return builder.String()
}

// PickupStations is a parsable slice of PickupStation.
type PickupStations []*PickupStation

func (ps PickupStations) config(cfg config) {
	for _i := range ps {
		ps[_i].config = cfg
	}
}
