// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/retailmerchant"
)

// RetailMerchantCreate is the builder for creating a RetailMerchant entity.
type RetailMerchantCreate struct {
	config
	mutation *RetailMerchantMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rmc *RetailMerchantCreate) SetCreatedAt(t time.Time) *RetailMerchantCreate {
	rmc.mutation.SetCreatedAt(t)
	return rmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rmc *RetailMerchantCreate) SetNillableCreatedAt(t *time.Time) *RetailMerchantCreate {
	if t != nil {
		rmc.SetCreatedAt(*t)
	}
	return rmc
}

// SetUpdatedAt sets the "updated_at" field.
func (rmc *RetailMerchantCreate) SetUpdatedAt(t time.Time) *RetailMerchantCreate {
	rmc.mutation.SetUpdatedAt(t)
	return rmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rmc *RetailMerchantCreate) SetNillableUpdatedAt(t *time.Time) *RetailMerchantCreate {
	if t != nil {
		rmc.SetUpdatedAt(*t)
	}
	return rmc
}

// SetGhanaCard sets the "ghana_card" field.
func (rmc *RetailMerchantCreate) SetGhanaCard(s string) *RetailMerchantCreate {
	rmc.mutation.SetGhanaCard(s)
	return rmc
}

// SetLastName sets the "last_name" field.
func (rmc *RetailMerchantCreate) SetLastName(s string) *RetailMerchantCreate {
	rmc.mutation.SetLastName(s)
	return rmc
}

// SetOtherName sets the "other_name" field.
func (rmc *RetailMerchantCreate) SetOtherName(s string) *RetailMerchantCreate {
	rmc.mutation.SetOtherName(s)
	return rmc
}

// SetPhone sets the "phone" field.
func (rmc *RetailMerchantCreate) SetPhone(s string) *RetailMerchantCreate {
	rmc.mutation.SetPhone(s)
	return rmc
}

// SetOtherPhone sets the "other_phone" field.
func (rmc *RetailMerchantCreate) SetOtherPhone(s string) *RetailMerchantCreate {
	rmc.mutation.SetOtherPhone(s)
	return rmc
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (rmc *RetailMerchantCreate) SetNillableOtherPhone(s *string) *RetailMerchantCreate {
	if s != nil {
		rmc.SetOtherPhone(*s)
	}
	return rmc
}

// SetAddress sets the "address" field.
func (rmc *RetailMerchantCreate) SetAddress(s string) *RetailMerchantCreate {
	rmc.mutation.SetAddress(s)
	return rmc
}

// SetDigitalAddress sets the "digital_address" field.
func (rmc *RetailMerchantCreate) SetDigitalAddress(s string) *RetailMerchantCreate {
	rmc.mutation.SetDigitalAddress(s)
	return rmc
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (rmc *RetailMerchantCreate) SetMerchantID(id int) *RetailMerchantCreate {
	rmc.mutation.SetMerchantID(id)
	return rmc
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (rmc *RetailMerchantCreate) SetMerchant(m *Merchant) *RetailMerchantCreate {
	return rmc.SetMerchantID(m.ID)
}

// Mutation returns the RetailMerchantMutation object of the builder.
func (rmc *RetailMerchantCreate) Mutation() *RetailMerchantMutation {
	return rmc.mutation
}

// Save creates the RetailMerchant in the database.
func (rmc *RetailMerchantCreate) Save(ctx context.Context) (*RetailMerchant, error) {
	var (
		err  error
		node *RetailMerchant
	)
	rmc.defaults()
	if len(rmc.hooks) == 0 {
		if err = rmc.check(); err != nil {
			return nil, err
		}
		node, err = rmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RetailMerchantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rmc.check(); err != nil {
				return nil, err
			}
			rmc.mutation = mutation
			if node, err = rmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rmc.hooks) - 1; i >= 0; i-- {
			if rmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rmc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rmc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RetailMerchant)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RetailMerchantMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rmc *RetailMerchantCreate) SaveX(ctx context.Context) *RetailMerchant {
	v, err := rmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmc *RetailMerchantCreate) Exec(ctx context.Context) error {
	_, err := rmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmc *RetailMerchantCreate) ExecX(ctx context.Context) {
	if err := rmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmc *RetailMerchantCreate) defaults() {
	if _, ok := rmc.mutation.CreatedAt(); !ok {
		v := retailmerchant.DefaultCreatedAt()
		rmc.mutation.SetCreatedAt(v)
	}
	if _, ok := rmc.mutation.UpdatedAt(); !ok {
		v := retailmerchant.DefaultUpdatedAt()
		rmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmc *RetailMerchantCreate) check() error {
	if _, ok := rmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RetailMerchant.created_at"`)}
	}
	if _, ok := rmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RetailMerchant.updated_at"`)}
	}
	if _, ok := rmc.mutation.GhanaCard(); !ok {
		return &ValidationError{Name: "ghana_card", err: errors.New(`ent: missing required field "RetailMerchant.ghana_card"`)}
	}
	if v, ok := rmc.mutation.GhanaCard(); ok {
		if err := retailmerchant.GhanaCardValidator(v); err != nil {
			return &ValidationError{Name: "ghana_card", err: fmt.Errorf(`ent: validator failed for field "RetailMerchant.ghana_card": %w`, err)}
		}
	}
	if _, ok := rmc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "RetailMerchant.last_name"`)}
	}
	if v, ok := rmc.mutation.LastName(); ok {
		if err := retailmerchant.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "RetailMerchant.last_name": %w`, err)}
		}
	}
	if _, ok := rmc.mutation.OtherName(); !ok {
		return &ValidationError{Name: "other_name", err: errors.New(`ent: missing required field "RetailMerchant.other_name"`)}
	}
	if v, ok := rmc.mutation.OtherName(); ok {
		if err := retailmerchant.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "RetailMerchant.other_name": %w`, err)}
		}
	}
	if _, ok := rmc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "RetailMerchant.phone"`)}
	}
	if v, ok := rmc.mutation.Phone(); ok {
		if err := retailmerchant.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "RetailMerchant.phone": %w`, err)}
		}
	}
	if _, ok := rmc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "RetailMerchant.address"`)}
	}
	if v, ok := rmc.mutation.Address(); ok {
		if err := retailmerchant.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "RetailMerchant.address": %w`, err)}
		}
	}
	if _, ok := rmc.mutation.DigitalAddress(); !ok {
		return &ValidationError{Name: "digital_address", err: errors.New(`ent: missing required field "RetailMerchant.digital_address"`)}
	}
	if v, ok := rmc.mutation.DigitalAddress(); ok {
		if err := retailmerchant.DigitalAddressValidator(v); err != nil {
			return &ValidationError{Name: "digital_address", err: fmt.Errorf(`ent: validator failed for field "RetailMerchant.digital_address": %w`, err)}
		}
	}
	if _, ok := rmc.mutation.MerchantID(); !ok {
		return &ValidationError{Name: "merchant", err: errors.New(`ent: missing required edge "RetailMerchant.merchant"`)}
	}
	return nil
}

func (rmc *RetailMerchantCreate) sqlSave(ctx context.Context) (*RetailMerchant, error) {
	_node, _spec := rmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rmc *RetailMerchantCreate) createSpec() (*RetailMerchant, *sqlgraph.CreateSpec) {
	var (
		_node = &RetailMerchant{config: rmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: retailmerchant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: retailmerchant.FieldID,
			},
		}
	)
	if value, ok := rmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: retailmerchant.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: retailmerchant.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rmc.mutation.GhanaCard(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailmerchant.FieldGhanaCard,
		})
		_node.GhanaCard = value
	}
	if value, ok := rmc.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailmerchant.FieldLastName,
		})
		_node.LastName = value
	}
	if value, ok := rmc.mutation.OtherName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailmerchant.FieldOtherName,
		})
		_node.OtherName = value
	}
	if value, ok := rmc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailmerchant.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := rmc.mutation.OtherPhone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailmerchant.FieldOtherPhone,
		})
		_node.OtherPhone = &value
	}
	if value, ok := rmc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailmerchant.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := rmc.mutation.DigitalAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: retailmerchant.FieldDigitalAddress,
		})
		_node.DigitalAddress = value
	}
	if nodes := rmc.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retailmerchant.MerchantTable,
			Columns: []string{retailmerchant.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.merchant_retailer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RetailMerchantCreateBulk is the builder for creating many RetailMerchant entities in bulk.
type RetailMerchantCreateBulk struct {
	config
	builders []*RetailMerchantCreate
}

// Save creates the RetailMerchant entities in the database.
func (rmcb *RetailMerchantCreateBulk) Save(ctx context.Context) ([]*RetailMerchant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rmcb.builders))
	nodes := make([]*RetailMerchant, len(rmcb.builders))
	mutators := make([]Mutator, len(rmcb.builders))
	for i := range rmcb.builders {
		func(i int, root context.Context) {
			builder := rmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RetailMerchantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmcb *RetailMerchantCreateBulk) SaveX(ctx context.Context) []*RetailMerchant {
	v, err := rmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmcb *RetailMerchantCreateBulk) Exec(ctx context.Context) error {
	_, err := rmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcb *RetailMerchantCreateBulk) ExecX(ctx context.Context) {
	if err := rmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
