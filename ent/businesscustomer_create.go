// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/app/domain/models"
	"github.com/SeyramWood/ent/businesscustomer"
	"github.com/SeyramWood/ent/customer"
)

// BusinessCustomerCreate is the builder for creating a BusinessCustomer entity.
type BusinessCustomerCreate struct {
	config
	mutation *BusinessCustomerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bcc *BusinessCustomerCreate) SetCreatedAt(t time.Time) *BusinessCustomerCreate {
	bcc.mutation.SetCreatedAt(t)
	return bcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bcc *BusinessCustomerCreate) SetNillableCreatedAt(t *time.Time) *BusinessCustomerCreate {
	if t != nil {
		bcc.SetCreatedAt(*t)
	}
	return bcc
}

// SetUpdatedAt sets the "updated_at" field.
func (bcc *BusinessCustomerCreate) SetUpdatedAt(t time.Time) *BusinessCustomerCreate {
	bcc.mutation.SetUpdatedAt(t)
	return bcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bcc *BusinessCustomerCreate) SetNillableUpdatedAt(t *time.Time) *BusinessCustomerCreate {
	if t != nil {
		bcc.SetUpdatedAt(*t)
	}
	return bcc
}

// SetName sets the "name" field.
func (bcc *BusinessCustomerCreate) SetName(s string) *BusinessCustomerCreate {
	bcc.mutation.SetName(s)
	return bcc
}

// SetPhone sets the "phone" field.
func (bcc *BusinessCustomerCreate) SetPhone(s string) *BusinessCustomerCreate {
	bcc.mutation.SetPhone(s)
	return bcc
}

// SetOtherPhone sets the "other_phone" field.
func (bcc *BusinessCustomerCreate) SetOtherPhone(s string) *BusinessCustomerCreate {
	bcc.mutation.SetOtherPhone(s)
	return bcc
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (bcc *BusinessCustomerCreate) SetNillableOtherPhone(s *string) *BusinessCustomerCreate {
	if s != nil {
		bcc.SetOtherPhone(*s)
	}
	return bcc
}

// SetLogo sets the "logo" field.
func (bcc *BusinessCustomerCreate) SetLogo(s string) *BusinessCustomerCreate {
	bcc.mutation.SetLogo(s)
	return bcc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (bcc *BusinessCustomerCreate) SetNillableLogo(s *string) *BusinessCustomerCreate {
	if s != nil {
		bcc.SetLogo(*s)
	}
	return bcc
}

// SetContact sets the "contact" field.
func (bcc *BusinessCustomerCreate) SetContact(mcc *models.BusinessCustomerContact) *BusinessCustomerCreate {
	bcc.mutation.SetContact(mcc)
	return bcc
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (bcc *BusinessCustomerCreate) SetCustomerID(id int) *BusinessCustomerCreate {
	bcc.mutation.SetCustomerID(id)
	return bcc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bcc *BusinessCustomerCreate) SetCustomer(c *Customer) *BusinessCustomerCreate {
	return bcc.SetCustomerID(c.ID)
}

// Mutation returns the BusinessCustomerMutation object of the builder.
func (bcc *BusinessCustomerCreate) Mutation() *BusinessCustomerMutation {
	return bcc.mutation
}

// Save creates the BusinessCustomer in the database.
func (bcc *BusinessCustomerCreate) Save(ctx context.Context) (*BusinessCustomer, error) {
	bcc.defaults()
	return withHooks(ctx, bcc.sqlSave, bcc.mutation, bcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BusinessCustomerCreate) SaveX(ctx context.Context) *BusinessCustomer {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BusinessCustomerCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BusinessCustomerCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcc *BusinessCustomerCreate) defaults() {
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		v := businesscustomer.DefaultCreatedAt()
		bcc.mutation.SetCreatedAt(v)
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		v := businesscustomer.DefaultUpdatedAt()
		bcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BusinessCustomerCreate) check() error {
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BusinessCustomer.created_at"`)}
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BusinessCustomer.updated_at"`)}
	}
	if _, ok := bcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BusinessCustomer.name"`)}
	}
	if v, ok := bcc.mutation.Name(); ok {
		if err := businesscustomer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BusinessCustomer.name": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "BusinessCustomer.phone"`)}
	}
	if v, ok := bcc.mutation.Phone(); ok {
		if err := businesscustomer.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "BusinessCustomer.phone": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "BusinessCustomer.customer"`)}
	}
	return nil
}

func (bcc *BusinessCustomerCreate) sqlSave(ctx context.Context) (*BusinessCustomer, error) {
	if err := bcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bcc.mutation.id = &_node.ID
	bcc.mutation.done = true
	return _node, nil
}

func (bcc *BusinessCustomerCreate) createSpec() (*BusinessCustomer, *sqlgraph.CreateSpec) {
	var (
		_node = &BusinessCustomer{config: bcc.config}
		_spec = sqlgraph.NewCreateSpec(businesscustomer.Table, sqlgraph.NewFieldSpec(businesscustomer.FieldID, field.TypeInt))
	)
	if value, ok := bcc.mutation.CreatedAt(); ok {
		_spec.SetField(businesscustomer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bcc.mutation.UpdatedAt(); ok {
		_spec.SetField(businesscustomer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bcc.mutation.Name(); ok {
		_spec.SetField(businesscustomer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bcc.mutation.Phone(); ok {
		_spec.SetField(businesscustomer.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := bcc.mutation.OtherPhone(); ok {
		_spec.SetField(businesscustomer.FieldOtherPhone, field.TypeString, value)
		_node.OtherPhone = value
	}
	if value, ok := bcc.mutation.Logo(); ok {
		_spec.SetField(businesscustomer.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := bcc.mutation.Contact(); ok {
		_spec.SetField(businesscustomer.FieldContact, field.TypeJSON, value)
		_node.Contact = value
	}
	if nodes := bcc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   businesscustomer.CustomerTable,
			Columns: []string{businesscustomer.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_business = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BusinessCustomerCreateBulk is the builder for creating many BusinessCustomer entities in bulk.
type BusinessCustomerCreateBulk struct {
	config
	builders []*BusinessCustomerCreate
}

// Save creates the BusinessCustomer entities in the database.
func (bccb *BusinessCustomerCreateBulk) Save(ctx context.Context) ([]*BusinessCustomer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BusinessCustomer, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessCustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BusinessCustomerCreateBulk) SaveX(ctx context.Context) []*BusinessCustomer {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BusinessCustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BusinessCustomerCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}
