// Code generated by ent, DO NOT EDIT.

package agent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SeyramWood/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v []byte) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// GhanaCard applies equality check predicate on the "ghana_card" field. It's identical to GhanaCardEQ.
func GhanaCard(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGhanaCard), v))
	})
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// OtherName applies equality check predicate on the "other_name" field. It's identical to OtherNameEQ.
func OtherName(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherName), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// OtherPhone applies equality check predicate on the "other_phone" field. It's identical to OtherPhoneEQ.
func OtherPhone(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherPhone), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// DigitalAddress applies equality check predicate on the "digital_address" field. It's identical to DigitalAddressEQ.
func DigitalAddress(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDigitalAddress), v))
	})
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// District applies equality check predicate on the "district" field. It's identical to DistrictEQ.
func District(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrict), v))
	})
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// Verified applies equality check predicate on the "verified" field. It's identical to VerifiedEQ.
func Verified(v bool) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVerified), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v []byte) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v []byte) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...[]byte) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...[]byte) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v []byte) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v []byte) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v []byte) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v []byte) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// GhanaCardEQ applies the EQ predicate on the "ghana_card" field.
func GhanaCardEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGhanaCard), v))
	})
}

// GhanaCardNEQ applies the NEQ predicate on the "ghana_card" field.
func GhanaCardNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGhanaCard), v))
	})
}

// GhanaCardIn applies the In predicate on the "ghana_card" field.
func GhanaCardIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGhanaCard), v...))
	})
}

// GhanaCardNotIn applies the NotIn predicate on the "ghana_card" field.
func GhanaCardNotIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGhanaCard), v...))
	})
}

// GhanaCardGT applies the GT predicate on the "ghana_card" field.
func GhanaCardGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGhanaCard), v))
	})
}

// GhanaCardGTE applies the GTE predicate on the "ghana_card" field.
func GhanaCardGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGhanaCard), v))
	})
}

// GhanaCardLT applies the LT predicate on the "ghana_card" field.
func GhanaCardLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGhanaCard), v))
	})
}

// GhanaCardLTE applies the LTE predicate on the "ghana_card" field.
func GhanaCardLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGhanaCard), v))
	})
}

// GhanaCardContains applies the Contains predicate on the "ghana_card" field.
func GhanaCardContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGhanaCard), v))
	})
}

// GhanaCardHasPrefix applies the HasPrefix predicate on the "ghana_card" field.
func GhanaCardHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGhanaCard), v))
	})
}

// GhanaCardHasSuffix applies the HasSuffix predicate on the "ghana_card" field.
func GhanaCardHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGhanaCard), v))
	})
}

// GhanaCardEqualFold applies the EqualFold predicate on the "ghana_card" field.
func GhanaCardEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGhanaCard), v))
	})
}

// GhanaCardContainsFold applies the ContainsFold predicate on the "ghana_card" field.
func GhanaCardContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGhanaCard), v))
	})
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastName), v))
	})
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastName), v...))
	})
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastName), v...))
	})
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastName), v))
	})
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastName), v))
	})
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastName), v))
	})
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastName), v))
	})
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastName), v))
	})
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastName), v))
	})
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastName), v))
	})
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastName), v))
	})
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastName), v))
	})
}

// OtherNameEQ applies the EQ predicate on the "other_name" field.
func OtherNameEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherName), v))
	})
}

// OtherNameNEQ applies the NEQ predicate on the "other_name" field.
func OtherNameNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOtherName), v))
	})
}

// OtherNameIn applies the In predicate on the "other_name" field.
func OtherNameIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOtherName), v...))
	})
}

// OtherNameNotIn applies the NotIn predicate on the "other_name" field.
func OtherNameNotIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOtherName), v...))
	})
}

// OtherNameGT applies the GT predicate on the "other_name" field.
func OtherNameGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOtherName), v))
	})
}

// OtherNameGTE applies the GTE predicate on the "other_name" field.
func OtherNameGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOtherName), v))
	})
}

// OtherNameLT applies the LT predicate on the "other_name" field.
func OtherNameLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOtherName), v))
	})
}

// OtherNameLTE applies the LTE predicate on the "other_name" field.
func OtherNameLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOtherName), v))
	})
}

// OtherNameContains applies the Contains predicate on the "other_name" field.
func OtherNameContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOtherName), v))
	})
}

// OtherNameHasPrefix applies the HasPrefix predicate on the "other_name" field.
func OtherNameHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOtherName), v))
	})
}

// OtherNameHasSuffix applies the HasSuffix predicate on the "other_name" field.
func OtherNameHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOtherName), v))
	})
}

// OtherNameEqualFold applies the EqualFold predicate on the "other_name" field.
func OtherNameEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOtherName), v))
	})
}

// OtherNameContainsFold applies the ContainsFold predicate on the "other_name" field.
func OtherNameContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOtherName), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// OtherPhoneEQ applies the EQ predicate on the "other_phone" field.
func OtherPhoneEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneNEQ applies the NEQ predicate on the "other_phone" field.
func OtherPhoneNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneIn applies the In predicate on the "other_phone" field.
func OtherPhoneIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOtherPhone), v...))
	})
}

// OtherPhoneNotIn applies the NotIn predicate on the "other_phone" field.
func OtherPhoneNotIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOtherPhone), v...))
	})
}

// OtherPhoneGT applies the GT predicate on the "other_phone" field.
func OtherPhoneGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneGTE applies the GTE predicate on the "other_phone" field.
func OtherPhoneGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneLT applies the LT predicate on the "other_phone" field.
func OtherPhoneLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneLTE applies the LTE predicate on the "other_phone" field.
func OtherPhoneLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneContains applies the Contains predicate on the "other_phone" field.
func OtherPhoneContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneHasPrefix applies the HasPrefix predicate on the "other_phone" field.
func OtherPhoneHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneHasSuffix applies the HasSuffix predicate on the "other_phone" field.
func OtherPhoneHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneIsNil applies the IsNil predicate on the "other_phone" field.
func OtherPhoneIsNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOtherPhone)))
	})
}

// OtherPhoneNotNil applies the NotNil predicate on the "other_phone" field.
func OtherPhoneNotNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOtherPhone)))
	})
}

// OtherPhoneEqualFold applies the EqualFold predicate on the "other_phone" field.
func OtherPhoneEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOtherPhone), v))
	})
}

// OtherPhoneContainsFold applies the ContainsFold predicate on the "other_phone" field.
func OtherPhoneContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOtherPhone), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// DigitalAddressEQ applies the EQ predicate on the "digital_address" field.
func DigitalAddressEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDigitalAddress), v))
	})
}

// DigitalAddressNEQ applies the NEQ predicate on the "digital_address" field.
func DigitalAddressNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDigitalAddress), v))
	})
}

// DigitalAddressIn applies the In predicate on the "digital_address" field.
func DigitalAddressIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDigitalAddress), v...))
	})
}

// DigitalAddressNotIn applies the NotIn predicate on the "digital_address" field.
func DigitalAddressNotIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDigitalAddress), v...))
	})
}

// DigitalAddressGT applies the GT predicate on the "digital_address" field.
func DigitalAddressGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDigitalAddress), v))
	})
}

// DigitalAddressGTE applies the GTE predicate on the "digital_address" field.
func DigitalAddressGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDigitalAddress), v))
	})
}

// DigitalAddressLT applies the LT predicate on the "digital_address" field.
func DigitalAddressLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDigitalAddress), v))
	})
}

// DigitalAddressLTE applies the LTE predicate on the "digital_address" field.
func DigitalAddressLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDigitalAddress), v))
	})
}

// DigitalAddressContains applies the Contains predicate on the "digital_address" field.
func DigitalAddressContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDigitalAddress), v))
	})
}

// DigitalAddressHasPrefix applies the HasPrefix predicate on the "digital_address" field.
func DigitalAddressHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDigitalAddress), v))
	})
}

// DigitalAddressHasSuffix applies the HasSuffix predicate on the "digital_address" field.
func DigitalAddressHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDigitalAddress), v))
	})
}

// DigitalAddressEqualFold applies the EqualFold predicate on the "digital_address" field.
func DigitalAddressEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDigitalAddress), v))
	})
}

// DigitalAddressContainsFold applies the ContainsFold predicate on the "digital_address" field.
func DigitalAddressContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDigitalAddress), v))
	})
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegion), v))
	})
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRegion), v...))
	})
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRegion), v...))
	})
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegion), v))
	})
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegion), v))
	})
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegion), v))
	})
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegion), v))
	})
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegion), v))
	})
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegion), v))
	})
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegion), v))
	})
}

<<<<<<< HEAD
=======
// RegionIsNil applies the IsNil predicate on the "region" field.
func RegionIsNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRegion)))
	})
}

// RegionNotNil applies the NotNil predicate on the "region" field.
func RegionNotNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRegion)))
	})
}

>>>>>>> dev
// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegion), v))
	})
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegion), v))
	})
}

// DistrictEQ applies the EQ predicate on the "district" field.
func DistrictEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrict), v))
	})
}

// DistrictNEQ applies the NEQ predicate on the "district" field.
func DistrictNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrict), v))
	})
}

// DistrictIn applies the In predicate on the "district" field.
func DistrictIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDistrict), v...))
	})
}

// DistrictNotIn applies the NotIn predicate on the "district" field.
func DistrictNotIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDistrict), v...))
	})
}

// DistrictGT applies the GT predicate on the "district" field.
func DistrictGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrict), v))
	})
}

// DistrictGTE applies the GTE predicate on the "district" field.
func DistrictGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrict), v))
	})
}

// DistrictLT applies the LT predicate on the "district" field.
func DistrictLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrict), v))
	})
}

// DistrictLTE applies the LTE predicate on the "district" field.
func DistrictLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrict), v))
	})
}

// DistrictContains applies the Contains predicate on the "district" field.
func DistrictContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistrict), v))
	})
}

// DistrictHasPrefix applies the HasPrefix predicate on the "district" field.
func DistrictHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistrict), v))
	})
}

// DistrictHasSuffix applies the HasSuffix predicate on the "district" field.
func DistrictHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistrict), v))
	})
}

<<<<<<< HEAD
=======
// DistrictIsNil applies the IsNil predicate on the "district" field.
func DistrictIsNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDistrict)))
	})
}

// DistrictNotNil applies the NotNil predicate on the "district" field.
func DistrictNotNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDistrict)))
	})
}

>>>>>>> dev
// DistrictEqualFold applies the EqualFold predicate on the "district" field.
func DistrictEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistrict), v))
	})
}

// DistrictContainsFold applies the ContainsFold predicate on the "district" field.
func DistrictContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistrict), v))
	})
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCity), v))
	})
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCity), v...))
	})
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCity), v...))
	})
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCity), v))
	})
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCity), v))
	})
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCity), v))
	})
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCity), v))
	})
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCity), v))
	})
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCity), v))
	})
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCity), v))
	})
}

<<<<<<< HEAD
=======
// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCity)))
	})
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCity)))
	})
}

>>>>>>> dev
// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCity), v))
	})
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCity), v))
	})
}

// DefaultAccountEQ applies the EQ predicate on the "default_account" field.
func DefaultAccountEQ(v DefaultAccount) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultAccount), v))
	})
}

// DefaultAccountNEQ applies the NEQ predicate on the "default_account" field.
func DefaultAccountNEQ(v DefaultAccount) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultAccount), v))
	})
}

// DefaultAccountIn applies the In predicate on the "default_account" field.
func DefaultAccountIn(vs ...DefaultAccount) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDefaultAccount), v...))
	})
}

// DefaultAccountNotIn applies the NotIn predicate on the "default_account" field.
func DefaultAccountNotIn(vs ...DefaultAccount) predicate.Agent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDefaultAccount), v...))
	})
}

// DefaultAccountIsNil applies the IsNil predicate on the "default_account" field.
func DefaultAccountIsNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultAccount)))
	})
}

// DefaultAccountNotNil applies the NotNil predicate on the "default_account" field.
func DefaultAccountNotNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultAccount)))
	})
}

// BankAccountIsNil applies the IsNil predicate on the "bank_account" field.
func BankAccountIsNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBankAccount)))
	})
}

// BankAccountNotNil applies the NotNil predicate on the "bank_account" field.
func BankAccountNotNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBankAccount)))
	})
}

// MomoAccountIsNil applies the IsNil predicate on the "momo_account" field.
func MomoAccountIsNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMomoAccount)))
	})
}

// MomoAccountNotNil applies the NotNil predicate on the "momo_account" field.
func MomoAccountNotNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMomoAccount)))
	})
}

// VerifiedEQ applies the EQ predicate on the "verified" field.
func VerifiedEQ(v bool) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVerified), v))
	})
}

// VerifiedNEQ applies the NEQ predicate on the "verified" field.
func VerifiedNEQ(v bool) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVerified), v))
	})
}

// ComplianceIsNil applies the IsNil predicate on the "compliance" field.
func ComplianceIsNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCompliance)))
	})
}

// ComplianceNotNil applies the NotNil predicate on the "compliance" field.
func ComplianceNotNil() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCompliance)))
	})
}

// HasAddresses applies the HasEdge predicate on the "addresses" edge.
func HasAddresses() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AddressesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AddressesTable, AddressesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressesWith applies the HasEdge predicate on the "addresses" edge with a given conditions (other predicates).
func HasAddressesWith(preds ...predicate.Address) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AddressesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AddressesTable, AddressesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFavourites applies the HasEdge predicate on the "favourites" edge.
func HasFavourites() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FavouritesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FavouritesTable, FavouritesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFavouritesWith applies the HasEdge predicate on the "favourites" edge with a given conditions (other predicates).
func HasFavouritesWith(preds ...predicate.Favourite) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FavouritesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FavouritesTable, FavouritesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.MerchantStore) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequests applies the HasEdge predicate on the "requests" edge.
func HasRequests() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RequestsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RequestsTable, RequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestsWith applies the HasEdge predicate on the "requests" edge with a given conditions (other predicates).
func HasRequestsWith(preds ...predicate.AgentRequest) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RequestsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RequestsTable, RequestsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Agent) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		p(s.Not())
	})
}
