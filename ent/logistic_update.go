// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/app/domain/models"
	"github.com/SeyramWood/ent/logistic"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/predicate"
)

// LogisticUpdate is the builder for updating Logistic entities.
type LogisticUpdate struct {
	config
	hooks    []Hook
	mutation *LogisticMutation
}

// Where appends a list predicates to the LogisticUpdate builder.
func (lu *LogisticUpdate) Where(ps ...predicate.Logistic) *LogisticUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LogisticUpdate) SetUpdatedAt(t time.Time) *LogisticUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetTrackingLink sets the "tracking_link" field.
func (lu *LogisticUpdate) SetTrackingLink(s string) *LogisticUpdate {
	lu.mutation.SetTrackingLink(s)
	return lu
}

// SetNillableTrackingLink sets the "tracking_link" field if the given value is not nil.
func (lu *LogisticUpdate) SetNillableTrackingLink(s *string) *LogisticUpdate {
	if s != nil {
		lu.SetTrackingLink(*s)
	}
	return lu
}

// ClearTrackingLink clears the value of the "tracking_link" field.
func (lu *LogisticUpdate) ClearTrackingLink() *LogisticUpdate {
	lu.mutation.ClearTrackingLink()
	return lu
}

// SetTasks sets the "tasks" field.
func (lu *LogisticUpdate) SetTasks(mmtr *models.TookanMultiTaskResponse) *LogisticUpdate {
	lu.mutation.SetTasks(mmtr)
	return lu
}

// ClearTasks clears the value of the "tasks" field.
func (lu *LogisticUpdate) ClearTasks() *LogisticUpdate {
	lu.mutation.ClearTasks()
	return lu
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (lu *LogisticUpdate) AddOrderIDs(ids ...int) *LogisticUpdate {
	lu.mutation.AddOrderIDs(ids...)
	return lu
}

// AddOrder adds the "order" edges to the Order entity.
func (lu *LogisticUpdate) AddOrder(o ...*Order) *LogisticUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return lu.AddOrderIDs(ids...)
}

// Mutation returns the LogisticMutation object of the builder.
func (lu *LogisticUpdate) Mutation() *LogisticMutation {
	return lu.mutation
}

// ClearOrder clears all "order" edges to the Order entity.
func (lu *LogisticUpdate) ClearOrder() *LogisticUpdate {
	lu.mutation.ClearOrder()
	return lu
}

// RemoveOrderIDs removes the "order" edge to Order entities by IDs.
func (lu *LogisticUpdate) RemoveOrderIDs(ids ...int) *LogisticUpdate {
	lu.mutation.RemoveOrderIDs(ids...)
	return lu
}

// RemoveOrder removes "order" edges to Order entities.
func (lu *LogisticUpdate) RemoveOrder(o ...*Order) *LogisticUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return lu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LogisticUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	lu.defaults()
	if len(lu.hooks) == 0 {
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LogisticMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			if lu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LogisticUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LogisticUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LogisticUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LogisticUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := logistic.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

func (lu *LogisticUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   logistic.Table,
			Columns: logistic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: logistic.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: logistic.FieldUpdatedAt,
		})
	}
	if value, ok := lu.mutation.TrackingLink(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: logistic.FieldTrackingLink,
		})
	}
	if lu.mutation.TrackingLinkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: logistic.FieldTrackingLink,
		})
	}
	if value, ok := lu.mutation.Tasks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: logistic.FieldTasks,
		})
	}
	if lu.mutation.TasksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: logistic.FieldTasks,
		})
	}
	if lu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   logistic.OrderTable,
			Columns: logistic.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedOrderIDs(); len(nodes) > 0 && !lu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   logistic.OrderTable,
			Columns: logistic.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   logistic.OrderTable,
			Columns: logistic.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logistic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// LogisticUpdateOne is the builder for updating a single Logistic entity.
type LogisticUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LogisticMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LogisticUpdateOne) SetUpdatedAt(t time.Time) *LogisticUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetTrackingLink sets the "tracking_link" field.
func (luo *LogisticUpdateOne) SetTrackingLink(s string) *LogisticUpdateOne {
	luo.mutation.SetTrackingLink(s)
	return luo
}

// SetNillableTrackingLink sets the "tracking_link" field if the given value is not nil.
func (luo *LogisticUpdateOne) SetNillableTrackingLink(s *string) *LogisticUpdateOne {
	if s != nil {
		luo.SetTrackingLink(*s)
	}
	return luo
}

// ClearTrackingLink clears the value of the "tracking_link" field.
func (luo *LogisticUpdateOne) ClearTrackingLink() *LogisticUpdateOne {
	luo.mutation.ClearTrackingLink()
	return luo
}

// SetTasks sets the "tasks" field.
func (luo *LogisticUpdateOne) SetTasks(mmtr *models.TookanMultiTaskResponse) *LogisticUpdateOne {
	luo.mutation.SetTasks(mmtr)
	return luo
}

// ClearTasks clears the value of the "tasks" field.
func (luo *LogisticUpdateOne) ClearTasks() *LogisticUpdateOne {
	luo.mutation.ClearTasks()
	return luo
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (luo *LogisticUpdateOne) AddOrderIDs(ids ...int) *LogisticUpdateOne {
	luo.mutation.AddOrderIDs(ids...)
	return luo
}

// AddOrder adds the "order" edges to the Order entity.
func (luo *LogisticUpdateOne) AddOrder(o ...*Order) *LogisticUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return luo.AddOrderIDs(ids...)
}

// Mutation returns the LogisticMutation object of the builder.
func (luo *LogisticUpdateOne) Mutation() *LogisticMutation {
	return luo.mutation
}

// ClearOrder clears all "order" edges to the Order entity.
func (luo *LogisticUpdateOne) ClearOrder() *LogisticUpdateOne {
	luo.mutation.ClearOrder()
	return luo
}

// RemoveOrderIDs removes the "order" edge to Order entities by IDs.
func (luo *LogisticUpdateOne) RemoveOrderIDs(ids ...int) *LogisticUpdateOne {
	luo.mutation.RemoveOrderIDs(ids...)
	return luo
}

// RemoveOrder removes "order" edges to Order entities.
func (luo *LogisticUpdateOne) RemoveOrder(o ...*Order) *LogisticUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return luo.RemoveOrderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LogisticUpdateOne) Select(field string, fields ...string) *LogisticUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Logistic entity.
func (luo *LogisticUpdateOne) Save(ctx context.Context) (*Logistic, error) {
	var (
		err  error
		node *Logistic
	)
	luo.defaults()
	if len(luo.hooks) == 0 {
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LogisticMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			if luo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, luo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Logistic)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LogisticMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LogisticUpdateOne) SaveX(ctx context.Context) *Logistic {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LogisticUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LogisticUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LogisticUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := logistic.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

func (luo *LogisticUpdateOne) sqlSave(ctx context.Context) (_node *Logistic, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   logistic.Table,
			Columns: logistic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: logistic.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Logistic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logistic.FieldID)
		for _, f := range fields {
			if !logistic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logistic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: logistic.FieldUpdatedAt,
		})
	}
	if value, ok := luo.mutation.TrackingLink(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: logistic.FieldTrackingLink,
		})
	}
	if luo.mutation.TrackingLinkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: logistic.FieldTrackingLink,
		})
	}
	if value, ok := luo.mutation.Tasks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: logistic.FieldTasks,
		})
	}
	if luo.mutation.TasksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: logistic.FieldTasks,
		})
	}
	if luo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   logistic.OrderTable,
			Columns: logistic.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedOrderIDs(); len(nodes) > 0 && !luo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   logistic.OrderTable,
			Columns: logistic.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   logistic.OrderTable,
			Columns: logistic.OrderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Logistic{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logistic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
