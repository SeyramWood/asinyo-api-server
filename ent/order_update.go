// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/address"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/logistic"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/merchantstore"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/orderdetail"
	"github.com/SeyramWood/ent/pickupstation"
	"github.com/SeyramWood/ent/predicate"
	"github.com/SeyramWood/ent/purchaserequest"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetOrderNumber sets the "order_number" field.
func (ou *OrderUpdate) SetOrderNumber(s string) *OrderUpdate {
	ou.mutation.SetOrderNumber(s)
	return ou
}

// SetCurrency sets the "currency" field.
func (ou *OrderUpdate) SetCurrency(s string) *OrderUpdate {
	ou.mutation.SetCurrency(s)
	return ou
}

// SetAmount sets the "amount" field.
func (ou *OrderUpdate) SetAmount(f float64) *OrderUpdate {
	ou.mutation.ResetAmount()
	ou.mutation.SetAmount(f)
	return ou
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableAmount(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetAmount(*f)
	}
	return ou
}

// AddAmount adds f to the "amount" field.
func (ou *OrderUpdate) AddAmount(f float64) *OrderUpdate {
	ou.mutation.AddAmount(f)
	return ou
}

// SetDeliveryFee sets the "delivery_fee" field.
func (ou *OrderUpdate) SetDeliveryFee(f float64) *OrderUpdate {
	ou.mutation.ResetDeliveryFee()
	ou.mutation.SetDeliveryFee(f)
	return ou
}

// SetNillableDeliveryFee sets the "delivery_fee" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveryFee(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetDeliveryFee(*f)
	}
	return ou
}

// AddDeliveryFee adds f to the "delivery_fee" field.
func (ou *OrderUpdate) AddDeliveryFee(f float64) *OrderUpdate {
	ou.mutation.AddDeliveryFee(f)
	return ou
}

// SetReference sets the "reference" field.
func (ou *OrderUpdate) SetReference(s string) *OrderUpdate {
	ou.mutation.SetReference(s)
	return ou
}

// SetNillableReference sets the "reference" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableReference(s *string) *OrderUpdate {
	if s != nil {
		ou.SetReference(*s)
	}
	return ou
}

// ClearReference clears the value of the "reference" field.
func (ou *OrderUpdate) ClearReference() *OrderUpdate {
	ou.mutation.ClearReference()
	return ou
}

// SetChannel sets the "channel" field.
func (ou *OrderUpdate) SetChannel(s string) *OrderUpdate {
	ou.mutation.SetChannel(s)
	return ou
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableChannel(s *string) *OrderUpdate {
	if s != nil {
		ou.SetChannel(*s)
	}
	return ou
}

// ClearChannel clears the value of the "channel" field.
func (ou *OrderUpdate) ClearChannel() *OrderUpdate {
	ou.mutation.ClearChannel()
	return ou
}

// SetPaidAt sets the "paid_at" field.
func (ou *OrderUpdate) SetPaidAt(s string) *OrderUpdate {
	ou.mutation.SetPaidAt(s)
	return ou
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaidAt(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPaidAt(*s)
	}
	return ou
}

// ClearPaidAt clears the value of the "paid_at" field.
func (ou *OrderUpdate) ClearPaidAt() *OrderUpdate {
	ou.mutation.ClearPaidAt()
	return ou
}

// SetDeliveryMethod sets the "delivery_method" field.
func (ou *OrderUpdate) SetDeliveryMethod(om order.DeliveryMethod) *OrderUpdate {
	ou.mutation.SetDeliveryMethod(om)
	return ou
}

// SetPaymentMethod sets the "payment_method" field.
func (ou *OrderUpdate) SetPaymentMethod(om order.PaymentMethod) *OrderUpdate {
	ou.mutation.SetPaymentMethod(om)
	return ou
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentMethod(om *order.PaymentMethod) *OrderUpdate {
	if om != nil {
		ou.SetPaymentMethod(*om)
	}
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(o order.Status) *OrderUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(o *order.Status) *OrderUpdate {
	if o != nil {
		ou.SetStatus(*o)
	}
	return ou
}

// SetCustomerApproval sets the "customer_approval" field.
func (ou *OrderUpdate) SetCustomerApproval(oa order.CustomerApproval) *OrderUpdate {
	ou.mutation.SetCustomerApproval(oa)
	return ou
}

// SetNillableCustomerApproval sets the "customer_approval" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCustomerApproval(oa *order.CustomerApproval) *OrderUpdate {
	if oa != nil {
		ou.SetCustomerApproval(*oa)
	}
	return ou
}

// ClearCustomerApproval clears the value of the "customer_approval" field.
func (ou *OrderUpdate) ClearCustomerApproval() *OrderUpdate {
	ou.mutation.ClearCustomerApproval()
	return ou
}

// SetStoreTasksCreated sets the "store_tasks_created" field.
func (ou *OrderUpdate) SetStoreTasksCreated(i []int) *OrderUpdate {
	ou.mutation.SetStoreTasksCreated(i)
	return ou
}

// AppendStoreTasksCreated appends i to the "store_tasks_created" field.
func (ou *OrderUpdate) AppendStoreTasksCreated(i []int) *OrderUpdate {
	ou.mutation.AppendStoreTasksCreated(i)
	return ou
}

// ClearStoreTasksCreated clears the value of the "store_tasks_created" field.
func (ou *OrderUpdate) ClearStoreTasksCreated() *OrderUpdate {
	ou.mutation.ClearStoreTasksCreated()
	return ou
}

// SetDeliveredAt sets the "delivered_at" field.
func (ou *OrderUpdate) SetDeliveredAt(t time.Time) *OrderUpdate {
	ou.mutation.SetDeliveredAt(t)
	return ou
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveredAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDeliveredAt(*t)
	}
	return ou
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (ou *OrderUpdate) ClearDeliveredAt() *OrderUpdate {
	ou.mutation.ClearDeliveredAt()
	return ou
}

// AddDetailIDs adds the "details" edge to the OrderDetail entity by IDs.
func (ou *OrderUpdate) AddDetailIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddDetailIDs(ids...)
	return ou
}

// AddDetails adds the "details" edges to the OrderDetail entity.
func (ou *OrderUpdate) AddDetails(o ...*OrderDetail) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddDetailIDs(ids...)
}

// SetLogisticID sets the "logistic" edge to the Logistic entity by ID.
func (ou *OrderUpdate) SetLogisticID(id int) *OrderUpdate {
	ou.mutation.SetLogisticID(id)
	return ou
}

// SetNillableLogisticID sets the "logistic" edge to the Logistic entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableLogisticID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetLogisticID(*id)
	}
	return ou
}

// SetLogistic sets the "logistic" edge to the Logistic entity.
func (ou *OrderUpdate) SetLogistic(l *Logistic) *OrderUpdate {
	return ou.SetLogisticID(l.ID)
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (ou *OrderUpdate) SetMerchantID(id int) *OrderUpdate {
	ou.mutation.SetMerchantID(id)
	return ou
}

// SetNillableMerchantID sets the "merchant" edge to the Merchant entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableMerchantID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetMerchantID(*id)
	}
	return ou
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (ou *OrderUpdate) SetMerchant(m *Merchant) *OrderUpdate {
	return ou.SetMerchantID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (ou *OrderUpdate) SetAgentID(id int) *OrderUpdate {
	ou.mutation.SetAgentID(id)
	return ou
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableAgentID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetAgentID(*id)
	}
	return ou
}

// SetAgent sets the "agent" edge to the Agent entity.
func (ou *OrderUpdate) SetAgent(a *Agent) *OrderUpdate {
	return ou.SetAgentID(a.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (ou *OrderUpdate) SetCustomerID(id int) *OrderUpdate {
	ou.mutation.SetCustomerID(id)
	return ou
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableCustomerID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetCustomerID(*id)
	}
	return ou
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ou *OrderUpdate) SetCustomer(c *Customer) *OrderUpdate {
	return ou.SetCustomerID(c.ID)
}

// SetAddressID sets the "address" edge to the Address entity by ID.
func (ou *OrderUpdate) SetAddressID(id int) *OrderUpdate {
	ou.mutation.SetAddressID(id)
	return ou
}

// SetNillableAddressID sets the "address" edge to the Address entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableAddressID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetAddressID(*id)
	}
	return ou
}

// SetAddress sets the "address" edge to the Address entity.
func (ou *OrderUpdate) SetAddress(a *Address) *OrderUpdate {
	return ou.SetAddressID(a.ID)
}

// SetPickupID sets the "pickup" edge to the PickupStation entity by ID.
func (ou *OrderUpdate) SetPickupID(id int) *OrderUpdate {
	ou.mutation.SetPickupID(id)
	return ou
}

// SetNillablePickupID sets the "pickup" edge to the PickupStation entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillablePickupID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetPickupID(*id)
	}
	return ou
}

// SetPickup sets the "pickup" edge to the PickupStation entity.
func (ou *OrderUpdate) SetPickup(p *PickupStation) *OrderUpdate {
	return ou.SetPickupID(p.ID)
}

// AddStoreIDs adds the "stores" edge to the MerchantStore entity by IDs.
func (ou *OrderUpdate) AddStoreIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddStoreIDs(ids...)
	return ou
}

// AddStores adds the "stores" edges to the MerchantStore entity.
func (ou *OrderUpdate) AddStores(m ...*MerchantStore) *OrderUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ou.AddStoreIDs(ids...)
}

// SetPurchaseRequestID sets the "purchase_request" edge to the PurchaseRequest entity by ID.
func (ou *OrderUpdate) SetPurchaseRequestID(id int) *OrderUpdate {
	ou.mutation.SetPurchaseRequestID(id)
	return ou
}

// SetNillablePurchaseRequestID sets the "purchase_request" edge to the PurchaseRequest entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillablePurchaseRequestID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetPurchaseRequestID(*id)
	}
	return ou
}

// SetPurchaseRequest sets the "purchase_request" edge to the PurchaseRequest entity.
func (ou *OrderUpdate) SetPurchaseRequest(p *PurchaseRequest) *OrderUpdate {
	return ou.SetPurchaseRequestID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearDetails clears all "details" edges to the OrderDetail entity.
func (ou *OrderUpdate) ClearDetails() *OrderUpdate {
	ou.mutation.ClearDetails()
	return ou
}

// RemoveDetailIDs removes the "details" edge to OrderDetail entities by IDs.
func (ou *OrderUpdate) RemoveDetailIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveDetailIDs(ids...)
	return ou
}

// RemoveDetails removes "details" edges to OrderDetail entities.
func (ou *OrderUpdate) RemoveDetails(o ...*OrderDetail) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveDetailIDs(ids...)
}

// ClearLogistic clears the "logistic" edge to the Logistic entity.
func (ou *OrderUpdate) ClearLogistic() *OrderUpdate {
	ou.mutation.ClearLogistic()
	return ou
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (ou *OrderUpdate) ClearMerchant() *OrderUpdate {
	ou.mutation.ClearMerchant()
	return ou
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (ou *OrderUpdate) ClearAgent() *OrderUpdate {
	ou.mutation.ClearAgent()
	return ou
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (ou *OrderUpdate) ClearCustomer() *OrderUpdate {
	ou.mutation.ClearCustomer()
	return ou
}

// ClearAddress clears the "address" edge to the Address entity.
func (ou *OrderUpdate) ClearAddress() *OrderUpdate {
	ou.mutation.ClearAddress()
	return ou
}

// ClearPickup clears the "pickup" edge to the PickupStation entity.
func (ou *OrderUpdate) ClearPickup() *OrderUpdate {
	ou.mutation.ClearPickup()
	return ou
}

// ClearStores clears all "stores" edges to the MerchantStore entity.
func (ou *OrderUpdate) ClearStores() *OrderUpdate {
	ou.mutation.ClearStores()
	return ou
}

// RemoveStoreIDs removes the "stores" edge to MerchantStore entities by IDs.
func (ou *OrderUpdate) RemoveStoreIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveStoreIDs(ids...)
	return ou
}

// RemoveStores removes "stores" edges to MerchantStore entities.
func (ou *OrderUpdate) RemoveStores(m ...*MerchantStore) *OrderUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ou.RemoveStoreIDs(ids...)
}

// ClearPurchaseRequest clears the "purchase_request" edge to the PurchaseRequest entity.
func (ou *OrderUpdate) ClearPurchaseRequest() *OrderUpdate {
	ou.mutation.ClearPurchaseRequest()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.OrderNumber(); ok {
		if err := order.OrderNumberValidator(v); err != nil {
			return &ValidationError{Name: "order_number", err: fmt.Errorf(`ent: validator failed for field "Order.order_number": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Currency(); ok {
		if err := order.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Order.currency": %w`, err)}
		}
	}
	if v, ok := ou.mutation.DeliveryMethod(); ok {
		if err := order.DeliveryMethodValidator(v); err != nil {
			return &ValidationError{Name: "delivery_method", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_method": %w`, err)}
		}
	}
	if v, ok := ou.mutation.PaymentMethod(); ok {
		if err := order.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`ent: validator failed for field "Order.payment_method": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ou.mutation.CustomerApproval(); ok {
		if err := order.CustomerApprovalValidator(v); err != nil {
			return &ValidationError{Name: "customer_approval", err: fmt.Errorf(`ent: validator failed for field "Order.customer_approval": %w`, err)}
		}
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.OrderNumber(); ok {
		_spec.SetField(order.FieldOrderNumber, field.TypeString, value)
	}
	if value, ok := ou.mutation.Currency(); ok {
		_spec.SetField(order.FieldCurrency, field.TypeString, value)
	}
	if value, ok := ou.mutation.Amount(); ok {
		_spec.SetField(order.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedAmount(); ok {
		_spec.AddField(order.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.DeliveryFee(); ok {
		_spec.SetField(order.FieldDeliveryFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedDeliveryFee(); ok {
		_spec.AddField(order.FieldDeliveryFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.Reference(); ok {
		_spec.SetField(order.FieldReference, field.TypeString, value)
	}
	if ou.mutation.ReferenceCleared() {
		_spec.ClearField(order.FieldReference, field.TypeString)
	}
	if value, ok := ou.mutation.Channel(); ok {
		_spec.SetField(order.FieldChannel, field.TypeString, value)
	}
	if ou.mutation.ChannelCleared() {
		_spec.ClearField(order.FieldChannel, field.TypeString)
	}
	if value, ok := ou.mutation.PaidAt(); ok {
		_spec.SetField(order.FieldPaidAt, field.TypeString, value)
	}
	if ou.mutation.PaidAtCleared() {
		_spec.ClearField(order.FieldPaidAt, field.TypeString)
	}
	if value, ok := ou.mutation.DeliveryMethod(); ok {
		_spec.SetField(order.FieldDeliveryMethod, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.PaymentMethod(); ok {
		_spec.SetField(order.FieldPaymentMethod, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.CustomerApproval(); ok {
		_spec.SetField(order.FieldCustomerApproval, field.TypeEnum, value)
	}
	if ou.mutation.CustomerApprovalCleared() {
		_spec.ClearField(order.FieldCustomerApproval, field.TypeEnum)
	}
	if value, ok := ou.mutation.StoreTasksCreated(); ok {
		_spec.SetField(order.FieldStoreTasksCreated, field.TypeJSON, value)
	}
	if value, ok := ou.mutation.AppendedStoreTasksCreated(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, order.FieldStoreTasksCreated, value)
		})
	}
	if ou.mutation.StoreTasksCreatedCleared() {
		_spec.ClearField(order.FieldStoreTasksCreated, field.TypeJSON)
	}
	if value, ok := ou.mutation.DeliveredAt(); ok {
		_spec.SetField(order.FieldDeliveredAt, field.TypeTime, value)
	}
	if ou.mutation.DeliveredAtCleared() {
		_spec.ClearField(order.FieldDeliveredAt, field.TypeTime)
	}
	if ou.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.DetailsTable,
			Columns: []string{order.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !ou.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.DetailsTable,
			Columns: []string{order.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.DetailsTable,
			Columns: []string{order.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.LogisticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.LogisticTable,
			Columns: []string{order.LogisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logistic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.LogisticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.LogisticTable,
			Columns: []string{order.LogisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logistic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.MerchantTable,
			Columns: []string{order.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.MerchantTable,
			Columns: []string{order.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AgentTable,
			Columns: []string{order.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AgentTable,
			Columns: []string{order.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PickupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PickupTable,
			Columns: []string{order.PickupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pickupstation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PickupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PickupTable,
			Columns: []string{order.PickupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pickupstation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.StoresTable,
			Columns: order.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchantstore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedStoresIDs(); len(nodes) > 0 && !ou.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.StoresTable,
			Columns: order.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchantstore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.StoresTable,
			Columns: order.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchantstore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PurchaseRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PurchaseRequestTable,
			Columns: []string{order.PurchaseRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PurchaseRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PurchaseRequestTable,
			Columns: []string{order.PurchaseRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetOrderNumber sets the "order_number" field.
func (ouo *OrderUpdateOne) SetOrderNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderNumber(s)
	return ouo
}

// SetCurrency sets the "currency" field.
func (ouo *OrderUpdateOne) SetCurrency(s string) *OrderUpdateOne {
	ouo.mutation.SetCurrency(s)
	return ouo
}

// SetAmount sets the "amount" field.
func (ouo *OrderUpdateOne) SetAmount(f float64) *OrderUpdateOne {
	ouo.mutation.ResetAmount()
	ouo.mutation.SetAmount(f)
	return ouo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAmount(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetAmount(*f)
	}
	return ouo
}

// AddAmount adds f to the "amount" field.
func (ouo *OrderUpdateOne) AddAmount(f float64) *OrderUpdateOne {
	ouo.mutation.AddAmount(f)
	return ouo
}

// SetDeliveryFee sets the "delivery_fee" field.
func (ouo *OrderUpdateOne) SetDeliveryFee(f float64) *OrderUpdateOne {
	ouo.mutation.ResetDeliveryFee()
	ouo.mutation.SetDeliveryFee(f)
	return ouo
}

// SetNillableDeliveryFee sets the "delivery_fee" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveryFee(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetDeliveryFee(*f)
	}
	return ouo
}

// AddDeliveryFee adds f to the "delivery_fee" field.
func (ouo *OrderUpdateOne) AddDeliveryFee(f float64) *OrderUpdateOne {
	ouo.mutation.AddDeliveryFee(f)
	return ouo
}

// SetReference sets the "reference" field.
func (ouo *OrderUpdateOne) SetReference(s string) *OrderUpdateOne {
	ouo.mutation.SetReference(s)
	return ouo
}

// SetNillableReference sets the "reference" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableReference(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetReference(*s)
	}
	return ouo
}

// ClearReference clears the value of the "reference" field.
func (ouo *OrderUpdateOne) ClearReference() *OrderUpdateOne {
	ouo.mutation.ClearReference()
	return ouo
}

// SetChannel sets the "channel" field.
func (ouo *OrderUpdateOne) SetChannel(s string) *OrderUpdateOne {
	ouo.mutation.SetChannel(s)
	return ouo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableChannel(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetChannel(*s)
	}
	return ouo
}

// ClearChannel clears the value of the "channel" field.
func (ouo *OrderUpdateOne) ClearChannel() *OrderUpdateOne {
	ouo.mutation.ClearChannel()
	return ouo
}

// SetPaidAt sets the "paid_at" field.
func (ouo *OrderUpdateOne) SetPaidAt(s string) *OrderUpdateOne {
	ouo.mutation.SetPaidAt(s)
	return ouo
}

// SetNillablePaidAt sets the "paid_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaidAt(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPaidAt(*s)
	}
	return ouo
}

// ClearPaidAt clears the value of the "paid_at" field.
func (ouo *OrderUpdateOne) ClearPaidAt() *OrderUpdateOne {
	ouo.mutation.ClearPaidAt()
	return ouo
}

// SetDeliveryMethod sets the "delivery_method" field.
func (ouo *OrderUpdateOne) SetDeliveryMethod(om order.DeliveryMethod) *OrderUpdateOne {
	ouo.mutation.SetDeliveryMethod(om)
	return ouo
}

// SetPaymentMethod sets the "payment_method" field.
func (ouo *OrderUpdateOne) SetPaymentMethod(om order.PaymentMethod) *OrderUpdateOne {
	ouo.mutation.SetPaymentMethod(om)
	return ouo
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentMethod(om *order.PaymentMethod) *OrderUpdateOne {
	if om != nil {
		ouo.SetPaymentMethod(*om)
	}
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(o order.Status) *OrderUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(o *order.Status) *OrderUpdateOne {
	if o != nil {
		ouo.SetStatus(*o)
	}
	return ouo
}

// SetCustomerApproval sets the "customer_approval" field.
func (ouo *OrderUpdateOne) SetCustomerApproval(oa order.CustomerApproval) *OrderUpdateOne {
	ouo.mutation.SetCustomerApproval(oa)
	return ouo
}

// SetNillableCustomerApproval sets the "customer_approval" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCustomerApproval(oa *order.CustomerApproval) *OrderUpdateOne {
	if oa != nil {
		ouo.SetCustomerApproval(*oa)
	}
	return ouo
}

// ClearCustomerApproval clears the value of the "customer_approval" field.
func (ouo *OrderUpdateOne) ClearCustomerApproval() *OrderUpdateOne {
	ouo.mutation.ClearCustomerApproval()
	return ouo
}

// SetStoreTasksCreated sets the "store_tasks_created" field.
func (ouo *OrderUpdateOne) SetStoreTasksCreated(i []int) *OrderUpdateOne {
	ouo.mutation.SetStoreTasksCreated(i)
	return ouo
}

// AppendStoreTasksCreated appends i to the "store_tasks_created" field.
func (ouo *OrderUpdateOne) AppendStoreTasksCreated(i []int) *OrderUpdateOne {
	ouo.mutation.AppendStoreTasksCreated(i)
	return ouo
}

// ClearStoreTasksCreated clears the value of the "store_tasks_created" field.
func (ouo *OrderUpdateOne) ClearStoreTasksCreated() *OrderUpdateOne {
	ouo.mutation.ClearStoreTasksCreated()
	return ouo
}

// SetDeliveredAt sets the "delivered_at" field.
func (ouo *OrderUpdateOne) SetDeliveredAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDeliveredAt(t)
	return ouo
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveredAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDeliveredAt(*t)
	}
	return ouo
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (ouo *OrderUpdateOne) ClearDeliveredAt() *OrderUpdateOne {
	ouo.mutation.ClearDeliveredAt()
	return ouo
}

// AddDetailIDs adds the "details" edge to the OrderDetail entity by IDs.
func (ouo *OrderUpdateOne) AddDetailIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddDetailIDs(ids...)
	return ouo
}

// AddDetails adds the "details" edges to the OrderDetail entity.
func (ouo *OrderUpdateOne) AddDetails(o ...*OrderDetail) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddDetailIDs(ids...)
}

// SetLogisticID sets the "logistic" edge to the Logistic entity by ID.
func (ouo *OrderUpdateOne) SetLogisticID(id int) *OrderUpdateOne {
	ouo.mutation.SetLogisticID(id)
	return ouo
}

// SetNillableLogisticID sets the "logistic" edge to the Logistic entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableLogisticID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetLogisticID(*id)
	}
	return ouo
}

// SetLogistic sets the "logistic" edge to the Logistic entity.
func (ouo *OrderUpdateOne) SetLogistic(l *Logistic) *OrderUpdateOne {
	return ouo.SetLogisticID(l.ID)
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (ouo *OrderUpdateOne) SetMerchantID(id int) *OrderUpdateOne {
	ouo.mutation.SetMerchantID(id)
	return ouo
}

// SetNillableMerchantID sets the "merchant" edge to the Merchant entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMerchantID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetMerchantID(*id)
	}
	return ouo
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (ouo *OrderUpdateOne) SetMerchant(m *Merchant) *OrderUpdateOne {
	return ouo.SetMerchantID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (ouo *OrderUpdateOne) SetAgentID(id int) *OrderUpdateOne {
	ouo.mutation.SetAgentID(id)
	return ouo
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAgentID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetAgentID(*id)
	}
	return ouo
}

// SetAgent sets the "agent" edge to the Agent entity.
func (ouo *OrderUpdateOne) SetAgent(a *Agent) *OrderUpdateOne {
	return ouo.SetAgentID(a.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (ouo *OrderUpdateOne) SetCustomerID(id int) *OrderUpdateOne {
	ouo.mutation.SetCustomerID(id)
	return ouo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCustomerID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetCustomerID(*id)
	}
	return ouo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ouo *OrderUpdateOne) SetCustomer(c *Customer) *OrderUpdateOne {
	return ouo.SetCustomerID(c.ID)
}

// SetAddressID sets the "address" edge to the Address entity by ID.
func (ouo *OrderUpdateOne) SetAddressID(id int) *OrderUpdateOne {
	ouo.mutation.SetAddressID(id)
	return ouo
}

// SetNillableAddressID sets the "address" edge to the Address entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAddressID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetAddressID(*id)
	}
	return ouo
}

// SetAddress sets the "address" edge to the Address entity.
func (ouo *OrderUpdateOne) SetAddress(a *Address) *OrderUpdateOne {
	return ouo.SetAddressID(a.ID)
}

// SetPickupID sets the "pickup" edge to the PickupStation entity by ID.
func (ouo *OrderUpdateOne) SetPickupID(id int) *OrderUpdateOne {
	ouo.mutation.SetPickupID(id)
	return ouo
}

// SetNillablePickupID sets the "pickup" edge to the PickupStation entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePickupID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetPickupID(*id)
	}
	return ouo
}

// SetPickup sets the "pickup" edge to the PickupStation entity.
func (ouo *OrderUpdateOne) SetPickup(p *PickupStation) *OrderUpdateOne {
	return ouo.SetPickupID(p.ID)
}

// AddStoreIDs adds the "stores" edge to the MerchantStore entity by IDs.
func (ouo *OrderUpdateOne) AddStoreIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddStoreIDs(ids...)
	return ouo
}

// AddStores adds the "stores" edges to the MerchantStore entity.
func (ouo *OrderUpdateOne) AddStores(m ...*MerchantStore) *OrderUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ouo.AddStoreIDs(ids...)
}

// SetPurchaseRequestID sets the "purchase_request" edge to the PurchaseRequest entity by ID.
func (ouo *OrderUpdateOne) SetPurchaseRequestID(id int) *OrderUpdateOne {
	ouo.mutation.SetPurchaseRequestID(id)
	return ouo
}

// SetNillablePurchaseRequestID sets the "purchase_request" edge to the PurchaseRequest entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePurchaseRequestID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetPurchaseRequestID(*id)
	}
	return ouo
}

// SetPurchaseRequest sets the "purchase_request" edge to the PurchaseRequest entity.
func (ouo *OrderUpdateOne) SetPurchaseRequest(p *PurchaseRequest) *OrderUpdateOne {
	return ouo.SetPurchaseRequestID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearDetails clears all "details" edges to the OrderDetail entity.
func (ouo *OrderUpdateOne) ClearDetails() *OrderUpdateOne {
	ouo.mutation.ClearDetails()
	return ouo
}

// RemoveDetailIDs removes the "details" edge to OrderDetail entities by IDs.
func (ouo *OrderUpdateOne) RemoveDetailIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveDetailIDs(ids...)
	return ouo
}

// RemoveDetails removes "details" edges to OrderDetail entities.
func (ouo *OrderUpdateOne) RemoveDetails(o ...*OrderDetail) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveDetailIDs(ids...)
}

// ClearLogistic clears the "logistic" edge to the Logistic entity.
func (ouo *OrderUpdateOne) ClearLogistic() *OrderUpdateOne {
	ouo.mutation.ClearLogistic()
	return ouo
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (ouo *OrderUpdateOne) ClearMerchant() *OrderUpdateOne {
	ouo.mutation.ClearMerchant()
	return ouo
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (ouo *OrderUpdateOne) ClearAgent() *OrderUpdateOne {
	ouo.mutation.ClearAgent()
	return ouo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (ouo *OrderUpdateOne) ClearCustomer() *OrderUpdateOne {
	ouo.mutation.ClearCustomer()
	return ouo
}

// ClearAddress clears the "address" edge to the Address entity.
func (ouo *OrderUpdateOne) ClearAddress() *OrderUpdateOne {
	ouo.mutation.ClearAddress()
	return ouo
}

// ClearPickup clears the "pickup" edge to the PickupStation entity.
func (ouo *OrderUpdateOne) ClearPickup() *OrderUpdateOne {
	ouo.mutation.ClearPickup()
	return ouo
}

// ClearStores clears all "stores" edges to the MerchantStore entity.
func (ouo *OrderUpdateOne) ClearStores() *OrderUpdateOne {
	ouo.mutation.ClearStores()
	return ouo
}

// RemoveStoreIDs removes the "stores" edge to MerchantStore entities by IDs.
func (ouo *OrderUpdateOne) RemoveStoreIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveStoreIDs(ids...)
	return ouo
}

// RemoveStores removes "stores" edges to MerchantStore entities.
func (ouo *OrderUpdateOne) RemoveStores(m ...*MerchantStore) *OrderUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ouo.RemoveStoreIDs(ids...)
}

// ClearPurchaseRequest clears the "purchase_request" edge to the PurchaseRequest entity.
func (ouo *OrderUpdateOne) ClearPurchaseRequest() *OrderUpdateOne {
	ouo.mutation.ClearPurchaseRequest()
	return ouo
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.OrderNumber(); ok {
		if err := order.OrderNumberValidator(v); err != nil {
			return &ValidationError{Name: "order_number", err: fmt.Errorf(`ent: validator failed for field "Order.order_number": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Currency(); ok {
		if err := order.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Order.currency": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.DeliveryMethod(); ok {
		if err := order.DeliveryMethodValidator(v); err != nil {
			return &ValidationError{Name: "delivery_method", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_method": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.PaymentMethod(); ok {
		if err := order.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`ent: validator failed for field "Order.payment_method": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.CustomerApproval(); ok {
		if err := order.CustomerApprovalValidator(v); err != nil {
			return &ValidationError{Name: "customer_approval", err: fmt.Errorf(`ent: validator failed for field "Order.customer_approval": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.OrderNumber(); ok {
		_spec.SetField(order.FieldOrderNumber, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Currency(); ok {
		_spec.SetField(order.FieldCurrency, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Amount(); ok {
		_spec.SetField(order.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedAmount(); ok {
		_spec.AddField(order.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.DeliveryFee(); ok {
		_spec.SetField(order.FieldDeliveryFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedDeliveryFee(); ok {
		_spec.AddField(order.FieldDeliveryFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.Reference(); ok {
		_spec.SetField(order.FieldReference, field.TypeString, value)
	}
	if ouo.mutation.ReferenceCleared() {
		_spec.ClearField(order.FieldReference, field.TypeString)
	}
	if value, ok := ouo.mutation.Channel(); ok {
		_spec.SetField(order.FieldChannel, field.TypeString, value)
	}
	if ouo.mutation.ChannelCleared() {
		_spec.ClearField(order.FieldChannel, field.TypeString)
	}
	if value, ok := ouo.mutation.PaidAt(); ok {
		_spec.SetField(order.FieldPaidAt, field.TypeString, value)
	}
	if ouo.mutation.PaidAtCleared() {
		_spec.ClearField(order.FieldPaidAt, field.TypeString)
	}
	if value, ok := ouo.mutation.DeliveryMethod(); ok {
		_spec.SetField(order.FieldDeliveryMethod, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.PaymentMethod(); ok {
		_spec.SetField(order.FieldPaymentMethod, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.CustomerApproval(); ok {
		_spec.SetField(order.FieldCustomerApproval, field.TypeEnum, value)
	}
	if ouo.mutation.CustomerApprovalCleared() {
		_spec.ClearField(order.FieldCustomerApproval, field.TypeEnum)
	}
	if value, ok := ouo.mutation.StoreTasksCreated(); ok {
		_spec.SetField(order.FieldStoreTasksCreated, field.TypeJSON, value)
	}
	if value, ok := ouo.mutation.AppendedStoreTasksCreated(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, order.FieldStoreTasksCreated, value)
		})
	}
	if ouo.mutation.StoreTasksCreatedCleared() {
		_spec.ClearField(order.FieldStoreTasksCreated, field.TypeJSON)
	}
	if value, ok := ouo.mutation.DeliveredAt(); ok {
		_spec.SetField(order.FieldDeliveredAt, field.TypeTime, value)
	}
	if ouo.mutation.DeliveredAtCleared() {
		_spec.ClearField(order.FieldDeliveredAt, field.TypeTime)
	}
	if ouo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.DetailsTable,
			Columns: []string{order.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !ouo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.DetailsTable,
			Columns: []string{order.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.DetailsTable,
			Columns: []string{order.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.LogisticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.LogisticTable,
			Columns: []string{order.LogisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logistic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.LogisticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.LogisticTable,
			Columns: []string{order.LogisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logistic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.MerchantTable,
			Columns: []string{order.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.MerchantTable,
			Columns: []string{order.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AgentTable,
			Columns: []string{order.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AgentTable,
			Columns: []string{order.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PickupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PickupTable,
			Columns: []string{order.PickupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pickupstation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PickupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PickupTable,
			Columns: []string{order.PickupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pickupstation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.StoresTable,
			Columns: order.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchantstore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedStoresIDs(); len(nodes) > 0 && !ouo.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.StoresTable,
			Columns: order.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchantstore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.StoresTable,
			Columns: order.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchantstore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PurchaseRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PurchaseRequestTable,
			Columns: []string{order.PurchaseRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PurchaseRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PurchaseRequestTable,
			Columns: []string{order.PurchaseRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaserequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
