// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/address"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/orderdetail"
	"github.com/SeyramWood/ent/pickupstation"
	"github.com/SeyramWood/ent/predicate"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetOrderNumber sets the "order_number" field.
func (ou *OrderUpdate) SetOrderNumber(s string) *OrderUpdate {
	ou.mutation.SetOrderNumber(s)
	return ou
}

// SetCurrency sets the "currency" field.
func (ou *OrderUpdate) SetCurrency(s string) *OrderUpdate {
	ou.mutation.SetCurrency(s)
	return ou
}

// SetAmount sets the "amount" field.
func (ou *OrderUpdate) SetAmount(f float64) *OrderUpdate {
	ou.mutation.ResetAmount()
	ou.mutation.SetAmount(f)
	return ou
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableAmount(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetAmount(*f)
	}
	return ou
}

// AddAmount adds f to the "amount" field.
func (ou *OrderUpdate) AddAmount(f float64) *OrderUpdate {
	ou.mutation.AddAmount(f)
	return ou
}

// SetDeliveryFee sets the "delivery_fee" field.
func (ou *OrderUpdate) SetDeliveryFee(f float64) *OrderUpdate {
	ou.mutation.ResetDeliveryFee()
	ou.mutation.SetDeliveryFee(f)
	return ou
}

// SetNillableDeliveryFee sets the "delivery_fee" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveryFee(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetDeliveryFee(*f)
	}
	return ou
}

// AddDeliveryFee adds f to the "delivery_fee" field.
func (ou *OrderUpdate) AddDeliveryFee(f float64) *OrderUpdate {
	ou.mutation.AddDeliveryFee(f)
	return ou
}

// SetReference sets the "reference" field.
func (ou *OrderUpdate) SetReference(s string) *OrderUpdate {
	ou.mutation.SetReference(s)
	return ou
}

// SetChannel sets the "channel" field.
func (ou *OrderUpdate) SetChannel(s string) *OrderUpdate {
	ou.mutation.SetChannel(s)
	return ou
}

// SetPaidAt sets the "paid_at" field.
func (ou *OrderUpdate) SetPaidAt(s string) *OrderUpdate {
	ou.mutation.SetPaidAt(s)
	return ou
}

// SetDeliveryMethod sets the "delivery_method" field.
func (ou *OrderUpdate) SetDeliveryMethod(om order.DeliveryMethod) *OrderUpdate {
	ou.mutation.SetDeliveryMethod(om)
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(o order.Status) *OrderUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(o *order.Status) *OrderUpdate {
	if o != nil {
		ou.SetStatus(*o)
	}
	return ou
}

// SetDeliveredAt sets the "delivered_at" field.
func (ou *OrderUpdate) SetDeliveredAt(t time.Time) *OrderUpdate {
	ou.mutation.SetDeliveredAt(t)
	return ou
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveredAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDeliveredAt(*t)
	}
	return ou
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (ou *OrderUpdate) ClearDeliveredAt() *OrderUpdate {
	ou.mutation.ClearDeliveredAt()
	return ou
}

// AddDetailIDs adds the "details" edge to the OrderDetail entity by IDs.
func (ou *OrderUpdate) AddDetailIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddDetailIDs(ids...)
	return ou
}

// AddDetails adds the "details" edges to the OrderDetail entity.
func (ou *OrderUpdate) AddDetails(o ...*OrderDetail) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddDetailIDs(ids...)
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (ou *OrderUpdate) SetMerchantID(id int) *OrderUpdate {
	ou.mutation.SetMerchantID(id)
	return ou
}

// SetNillableMerchantID sets the "merchant" edge to the Merchant entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableMerchantID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetMerchantID(*id)
	}
	return ou
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (ou *OrderUpdate) SetMerchant(m *Merchant) *OrderUpdate {
	return ou.SetMerchantID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (ou *OrderUpdate) SetAgentID(id int) *OrderUpdate {
	ou.mutation.SetAgentID(id)
	return ou
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableAgentID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetAgentID(*id)
	}
	return ou
}

// SetAgent sets the "agent" edge to the Agent entity.
func (ou *OrderUpdate) SetAgent(a *Agent) *OrderUpdate {
	return ou.SetAgentID(a.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (ou *OrderUpdate) SetCustomerID(id int) *OrderUpdate {
	ou.mutation.SetCustomerID(id)
	return ou
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableCustomerID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetCustomerID(*id)
	}
	return ou
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ou *OrderUpdate) SetCustomer(c *Customer) *OrderUpdate {
	return ou.SetCustomerID(c.ID)
}

// SetAddressID sets the "address" edge to the Address entity by ID.
func (ou *OrderUpdate) SetAddressID(id int) *OrderUpdate {
	ou.mutation.SetAddressID(id)
	return ou
}

// SetNillableAddressID sets the "address" edge to the Address entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableAddressID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetAddressID(*id)
	}
	return ou
}

// SetAddress sets the "address" edge to the Address entity.
func (ou *OrderUpdate) SetAddress(a *Address) *OrderUpdate {
	return ou.SetAddressID(a.ID)
}

// SetPickupID sets the "pickup" edge to the PickupStation entity by ID.
func (ou *OrderUpdate) SetPickupID(id int) *OrderUpdate {
	ou.mutation.SetPickupID(id)
	return ou
}

// SetNillablePickupID sets the "pickup" edge to the PickupStation entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillablePickupID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetPickupID(*id)
	}
	return ou
}

// SetPickup sets the "pickup" edge to the PickupStation entity.
func (ou *OrderUpdate) SetPickup(p *PickupStation) *OrderUpdate {
	return ou.SetPickupID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearDetails clears all "details" edges to the OrderDetail entity.
func (ou *OrderUpdate) ClearDetails() *OrderUpdate {
	ou.mutation.ClearDetails()
	return ou
}

// RemoveDetailIDs removes the "details" edge to OrderDetail entities by IDs.
func (ou *OrderUpdate) RemoveDetailIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveDetailIDs(ids...)
	return ou
}

// RemoveDetails removes "details" edges to OrderDetail entities.
func (ou *OrderUpdate) RemoveDetails(o ...*OrderDetail) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveDetailIDs(ids...)
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (ou *OrderUpdate) ClearMerchant() *OrderUpdate {
	ou.mutation.ClearMerchant()
	return ou
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (ou *OrderUpdate) ClearAgent() *OrderUpdate {
	ou.mutation.ClearAgent()
	return ou
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (ou *OrderUpdate) ClearCustomer() *OrderUpdate {
	ou.mutation.ClearCustomer()
	return ou
}

// ClearAddress clears the "address" edge to the Address entity.
func (ou *OrderUpdate) ClearAddress() *OrderUpdate {
	ou.mutation.ClearAddress()
	return ou
}

// ClearPickup clears the "pickup" edge to the PickupStation entity.
func (ou *OrderUpdate) ClearPickup() *OrderUpdate {
	ou.mutation.ClearPickup()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ou.defaults()
	if len(ou.hooks) == 0 {
		if err = ou.check(); err != nil {
			return 0, err
		}
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ou.check(); err != nil {
				return 0, err
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			if ou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.OrderNumber(); ok {
		if err := order.OrderNumberValidator(v); err != nil {
			return &ValidationError{Name: "order_number", err: fmt.Errorf(`ent: validator failed for field "Order.order_number": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Currency(); ok {
		if err := order.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Order.currency": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Reference(); ok {
		if err := order.ReferenceValidator(v); err != nil {
			return &ValidationError{Name: "reference", err: fmt.Errorf(`ent: validator failed for field "Order.reference": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Channel(); ok {
		if err := order.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "Order.channel": %w`, err)}
		}
	}
	if v, ok := ou.mutation.PaidAt(); ok {
		if err := order.PaidAtValidator(v); err != nil {
			return &ValidationError{Name: "paid_at", err: fmt.Errorf(`ent: validator failed for field "Order.paid_at": %w`, err)}
		}
	}
	if v, ok := ou.mutation.DeliveryMethod(); ok {
		if err := order.DeliveryMethodValidator(v); err != nil {
			return &ValidationError{Name: "delivery_method", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_method": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
	}
	if value, ok := ou.mutation.OrderNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldOrderNumber,
		})
	}
	if value, ok := ou.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldCurrency,
		})
	}
	if value, ok := ou.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: order.FieldAmount,
		})
	}
	if value, ok := ou.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: order.FieldAmount,
		})
	}
	if value, ok := ou.mutation.DeliveryFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: order.FieldDeliveryFee,
		})
	}
	if value, ok := ou.mutation.AddedDeliveryFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: order.FieldDeliveryFee,
		})
	}
	if value, ok := ou.mutation.Reference(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldReference,
		})
	}
	if value, ok := ou.mutation.Channel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldChannel,
		})
	}
	if value, ok := ou.mutation.PaidAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldPaidAt,
		})
	}
	if value, ok := ou.mutation.DeliveryMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: order.FieldDeliveryMethod,
		})
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: order.FieldStatus,
		})
	}
	if value, ok := ou.mutation.DeliveredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldDeliveredAt,
		})
	}
	if ou.mutation.DeliveredAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldDeliveredAt,
		})
	}
	if ou.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.DetailsTable,
			Columns: []string{order.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !ou.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.DetailsTable,
			Columns: []string{order.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.DetailsTable,
			Columns: []string{order.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.MerchantTable,
			Columns: []string{order.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.MerchantTable,
			Columns: []string{order.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AgentTable,
			Columns: []string{order.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AgentTable,
			Columns: []string{order.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PickupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PickupTable,
			Columns: []string{order.PickupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pickupstation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PickupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PickupTable,
			Columns: []string{order.PickupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pickupstation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetOrderNumber sets the "order_number" field.
func (ouo *OrderUpdateOne) SetOrderNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderNumber(s)
	return ouo
}

// SetCurrency sets the "currency" field.
func (ouo *OrderUpdateOne) SetCurrency(s string) *OrderUpdateOne {
	ouo.mutation.SetCurrency(s)
	return ouo
}

// SetAmount sets the "amount" field.
func (ouo *OrderUpdateOne) SetAmount(f float64) *OrderUpdateOne {
	ouo.mutation.ResetAmount()
	ouo.mutation.SetAmount(f)
	return ouo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAmount(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetAmount(*f)
	}
	return ouo
}

// AddAmount adds f to the "amount" field.
func (ouo *OrderUpdateOne) AddAmount(f float64) *OrderUpdateOne {
	ouo.mutation.AddAmount(f)
	return ouo
}

// SetDeliveryFee sets the "delivery_fee" field.
func (ouo *OrderUpdateOne) SetDeliveryFee(f float64) *OrderUpdateOne {
	ouo.mutation.ResetDeliveryFee()
	ouo.mutation.SetDeliveryFee(f)
	return ouo
}

// SetNillableDeliveryFee sets the "delivery_fee" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveryFee(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetDeliveryFee(*f)
	}
	return ouo
}

// AddDeliveryFee adds f to the "delivery_fee" field.
func (ouo *OrderUpdateOne) AddDeliveryFee(f float64) *OrderUpdateOne {
	ouo.mutation.AddDeliveryFee(f)
	return ouo
}

// SetReference sets the "reference" field.
func (ouo *OrderUpdateOne) SetReference(s string) *OrderUpdateOne {
	ouo.mutation.SetReference(s)
	return ouo
}

// SetChannel sets the "channel" field.
func (ouo *OrderUpdateOne) SetChannel(s string) *OrderUpdateOne {
	ouo.mutation.SetChannel(s)
	return ouo
}

// SetPaidAt sets the "paid_at" field.
func (ouo *OrderUpdateOne) SetPaidAt(s string) *OrderUpdateOne {
	ouo.mutation.SetPaidAt(s)
	return ouo
}

// SetDeliveryMethod sets the "delivery_method" field.
func (ouo *OrderUpdateOne) SetDeliveryMethod(om order.DeliveryMethod) *OrderUpdateOne {
	ouo.mutation.SetDeliveryMethod(om)
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(o order.Status) *OrderUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(o *order.Status) *OrderUpdateOne {
	if o != nil {
		ouo.SetStatus(*o)
	}
	return ouo
}

// SetDeliveredAt sets the "delivered_at" field.
func (ouo *OrderUpdateOne) SetDeliveredAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDeliveredAt(t)
	return ouo
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveredAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDeliveredAt(*t)
	}
	return ouo
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (ouo *OrderUpdateOne) ClearDeliveredAt() *OrderUpdateOne {
	ouo.mutation.ClearDeliveredAt()
	return ouo
}

// AddDetailIDs adds the "details" edge to the OrderDetail entity by IDs.
func (ouo *OrderUpdateOne) AddDetailIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddDetailIDs(ids...)
	return ouo
}

// AddDetails adds the "details" edges to the OrderDetail entity.
func (ouo *OrderUpdateOne) AddDetails(o ...*OrderDetail) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddDetailIDs(ids...)
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (ouo *OrderUpdateOne) SetMerchantID(id int) *OrderUpdateOne {
	ouo.mutation.SetMerchantID(id)
	return ouo
}

// SetNillableMerchantID sets the "merchant" edge to the Merchant entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMerchantID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetMerchantID(*id)
	}
	return ouo
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (ouo *OrderUpdateOne) SetMerchant(m *Merchant) *OrderUpdateOne {
	return ouo.SetMerchantID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (ouo *OrderUpdateOne) SetAgentID(id int) *OrderUpdateOne {
	ouo.mutation.SetAgentID(id)
	return ouo
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAgentID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetAgentID(*id)
	}
	return ouo
}

// SetAgent sets the "agent" edge to the Agent entity.
func (ouo *OrderUpdateOne) SetAgent(a *Agent) *OrderUpdateOne {
	return ouo.SetAgentID(a.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (ouo *OrderUpdateOne) SetCustomerID(id int) *OrderUpdateOne {
	ouo.mutation.SetCustomerID(id)
	return ouo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCustomerID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetCustomerID(*id)
	}
	return ouo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ouo *OrderUpdateOne) SetCustomer(c *Customer) *OrderUpdateOne {
	return ouo.SetCustomerID(c.ID)
}

// SetAddressID sets the "address" edge to the Address entity by ID.
func (ouo *OrderUpdateOne) SetAddressID(id int) *OrderUpdateOne {
	ouo.mutation.SetAddressID(id)
	return ouo
}

// SetNillableAddressID sets the "address" edge to the Address entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAddressID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetAddressID(*id)
	}
	return ouo
}

// SetAddress sets the "address" edge to the Address entity.
func (ouo *OrderUpdateOne) SetAddress(a *Address) *OrderUpdateOne {
	return ouo.SetAddressID(a.ID)
}

// SetPickupID sets the "pickup" edge to the PickupStation entity by ID.
func (ouo *OrderUpdateOne) SetPickupID(id int) *OrderUpdateOne {
	ouo.mutation.SetPickupID(id)
	return ouo
}

// SetNillablePickupID sets the "pickup" edge to the PickupStation entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePickupID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetPickupID(*id)
	}
	return ouo
}

// SetPickup sets the "pickup" edge to the PickupStation entity.
func (ouo *OrderUpdateOne) SetPickup(p *PickupStation) *OrderUpdateOne {
	return ouo.SetPickupID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearDetails clears all "details" edges to the OrderDetail entity.
func (ouo *OrderUpdateOne) ClearDetails() *OrderUpdateOne {
	ouo.mutation.ClearDetails()
	return ouo
}

// RemoveDetailIDs removes the "details" edge to OrderDetail entities by IDs.
func (ouo *OrderUpdateOne) RemoveDetailIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveDetailIDs(ids...)
	return ouo
}

// RemoveDetails removes "details" edges to OrderDetail entities.
func (ouo *OrderUpdateOne) RemoveDetails(o ...*OrderDetail) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveDetailIDs(ids...)
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (ouo *OrderUpdateOne) ClearMerchant() *OrderUpdateOne {
	ouo.mutation.ClearMerchant()
	return ouo
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (ouo *OrderUpdateOne) ClearAgent() *OrderUpdateOne {
	ouo.mutation.ClearAgent()
	return ouo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (ouo *OrderUpdateOne) ClearCustomer() *OrderUpdateOne {
	ouo.mutation.ClearCustomer()
	return ouo
}

// ClearAddress clears the "address" edge to the Address entity.
func (ouo *OrderUpdateOne) ClearAddress() *OrderUpdateOne {
	ouo.mutation.ClearAddress()
	return ouo
}

// ClearPickup clears the "pickup" edge to the PickupStation entity.
func (ouo *OrderUpdateOne) ClearPickup() *OrderUpdateOne {
	ouo.mutation.ClearPickup()
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	ouo.defaults()
	if len(ouo.hooks) == 0 {
		if err = ouo.check(); err != nil {
			return nil, err
		}
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ouo.check(); err != nil {
				return nil, err
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			if ouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.OrderNumber(); ok {
		if err := order.OrderNumberValidator(v); err != nil {
			return &ValidationError{Name: "order_number", err: fmt.Errorf(`ent: validator failed for field "Order.order_number": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Currency(); ok {
		if err := order.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Order.currency": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Reference(); ok {
		if err := order.ReferenceValidator(v); err != nil {
			return &ValidationError{Name: "reference", err: fmt.Errorf(`ent: validator failed for field "Order.reference": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Channel(); ok {
		if err := order.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "Order.channel": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.PaidAt(); ok {
		if err := order.PaidAtValidator(v); err != nil {
			return &ValidationError{Name: "paid_at", err: fmt.Errorf(`ent: validator failed for field "Order.paid_at": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.DeliveryMethod(); ok {
		if err := order.DeliveryMethodValidator(v); err != nil {
			return &ValidationError{Name: "delivery_method", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_method": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
	}
	if value, ok := ouo.mutation.OrderNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldOrderNumber,
		})
	}
	if value, ok := ouo.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldCurrency,
		})
	}
	if value, ok := ouo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: order.FieldAmount,
		})
	}
	if value, ok := ouo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: order.FieldAmount,
		})
	}
	if value, ok := ouo.mutation.DeliveryFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: order.FieldDeliveryFee,
		})
	}
	if value, ok := ouo.mutation.AddedDeliveryFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: order.FieldDeliveryFee,
		})
	}
	if value, ok := ouo.mutation.Reference(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldReference,
		})
	}
	if value, ok := ouo.mutation.Channel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldChannel,
		})
	}
	if value, ok := ouo.mutation.PaidAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldPaidAt,
		})
	}
	if value, ok := ouo.mutation.DeliveryMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: order.FieldDeliveryMethod,
		})
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: order.FieldStatus,
		})
	}
	if value, ok := ouo.mutation.DeliveredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldDeliveredAt,
		})
	}
	if ouo.mutation.DeliveredAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldDeliveredAt,
		})
	}
	if ouo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.DetailsTable,
			Columns: []string{order.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !ouo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.DetailsTable,
			Columns: []string{order.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.DetailsTable,
			Columns: []string{order.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.MerchantTable,
			Columns: []string{order.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.MerchantTable,
			Columns: []string{order.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AgentTable,
			Columns: []string{order.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AgentTable,
			Columns: []string{order.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PickupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PickupTable,
			Columns: []string{order.PickupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pickupstation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PickupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PickupTable,
			Columns: []string{order.PickupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pickupstation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
