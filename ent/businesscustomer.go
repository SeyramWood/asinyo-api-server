// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/app/domain/models"
	"github.com/SeyramWood/ent/businesscustomer"
	"github.com/SeyramWood/ent/customer"
)

// BusinessCustomer is the model entity for the BusinessCustomer schema.
type BusinessCustomer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// OtherPhone holds the value of the "other_phone" field.
	OtherPhone string `json:"other_phone,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// Contact holds the value of the "contact" field.
	Contact *models.BusinessCustomerContact `json:"contact,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BusinessCustomerQuery when eager-loading is set.
	Edges             BusinessCustomerEdges `json:"edges"`
	customer_business *int
}

// BusinessCustomerEdges holds the relations/edges for other nodes in the graph.
type BusinessCustomerEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BusinessCustomerEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BusinessCustomer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case businesscustomer.FieldContact:
			values[i] = new([]byte)
		case businesscustomer.FieldID:
			values[i] = new(sql.NullInt64)
		case businesscustomer.FieldName, businesscustomer.FieldPhone, businesscustomer.FieldOtherPhone, businesscustomer.FieldLogo:
			values[i] = new(sql.NullString)
		case businesscustomer.FieldCreatedAt, businesscustomer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case businesscustomer.ForeignKeys[0]: // customer_business
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BusinessCustomer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BusinessCustomer fields.
func (bc *BusinessCustomer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case businesscustomer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bc.ID = int(value.Int64)
		case businesscustomer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bc.CreatedAt = value.Time
			}
		case businesscustomer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bc.UpdatedAt = value.Time
			}
		case businesscustomer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bc.Name = value.String
			}
		case businesscustomer.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				bc.Phone = value.String
			}
		case businesscustomer.FieldOtherPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_phone", values[i])
			} else if value.Valid {
				bc.OtherPhone = value.String
			}
		case businesscustomer.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				bc.Logo = value.String
			}
		case businesscustomer.FieldContact:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field contact", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bc.Contact); err != nil {
					return fmt.Errorf("unmarshal field contact: %w", err)
				}
			}
		case businesscustomer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_business", value)
			} else if value.Valid {
				bc.customer_business = new(int)
				*bc.customer_business = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCustomer queries the "customer" edge of the BusinessCustomer entity.
func (bc *BusinessCustomer) QueryCustomer() *CustomerQuery {
	return (&BusinessCustomerClient{config: bc.config}).QueryCustomer(bc)
}

// Update returns a builder for updating this BusinessCustomer.
// Note that you need to call BusinessCustomer.Unwrap() before calling this method if this BusinessCustomer
// was returned from a transaction, and the transaction was committed or rolled back.
func (bc *BusinessCustomer) Update() *BusinessCustomerUpdateOne {
	return (&BusinessCustomerClient{config: bc.config}).UpdateOne(bc)
}

// Unwrap unwraps the BusinessCustomer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bc *BusinessCustomer) Unwrap() *BusinessCustomer {
	_tx, ok := bc.config.driver.(*txDriver)
	if !ok {
		panic("ent: BusinessCustomer is not a transactional entity")
	}
	bc.config.driver = _tx.drv
	return bc
}

// String implements the fmt.Stringer.
func (bc *BusinessCustomer) String() string {
	var builder strings.Builder
	builder.WriteString("BusinessCustomer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(bc.Name)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(bc.Phone)
	builder.WriteString(", ")
	builder.WriteString("other_phone=")
	builder.WriteString(bc.OtherPhone)
	builder.WriteString(", ")
	builder.WriteString("logo=")
	builder.WriteString(bc.Logo)
	builder.WriteString(", ")
	builder.WriteString("contact=")
	builder.WriteString(fmt.Sprintf("%v", bc.Contact))
	builder.WriteByte(')')
	return builder.String()
}

// BusinessCustomers is a parsable slice of BusinessCustomer.
type BusinessCustomers []*BusinessCustomer

func (bc BusinessCustomers) config(cfg config) {
	for _i := range bc {
		bc[_i].config = cfg
	}
}
