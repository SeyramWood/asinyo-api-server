// Code generated by ent, DO NOT EDIT.

package pricemodel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SeyramWood/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldName, v))
}

// Initials applies equality check predicate on the "initials" field. It's identical to InitialsEQ.
func Initials(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldInitials, v))
}

// Formula applies equality check predicate on the "formula" field. It's identical to FormulaEQ.
func Formula(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldFormula, v))
}

// AsinyoFormula applies equality check predicate on the "asinyo_formula" field. It's identical to AsinyoFormulaEQ.
func AsinyoFormula(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldAsinyoFormula, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldContainsFold(FieldName, v))
}

// InitialsEQ applies the EQ predicate on the "initials" field.
func InitialsEQ(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldInitials, v))
}

// InitialsNEQ applies the NEQ predicate on the "initials" field.
func InitialsNEQ(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNEQ(FieldInitials, v))
}

// InitialsIn applies the In predicate on the "initials" field.
func InitialsIn(vs ...string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldIn(FieldInitials, vs...))
}

// InitialsNotIn applies the NotIn predicate on the "initials" field.
func InitialsNotIn(vs ...string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNotIn(FieldInitials, vs...))
}

// InitialsGT applies the GT predicate on the "initials" field.
func InitialsGT(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGT(FieldInitials, v))
}

// InitialsGTE applies the GTE predicate on the "initials" field.
func InitialsGTE(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGTE(FieldInitials, v))
}

// InitialsLT applies the LT predicate on the "initials" field.
func InitialsLT(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLT(FieldInitials, v))
}

// InitialsLTE applies the LTE predicate on the "initials" field.
func InitialsLTE(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLTE(FieldInitials, v))
}

// InitialsContains applies the Contains predicate on the "initials" field.
func InitialsContains(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldContains(FieldInitials, v))
}

// InitialsHasPrefix applies the HasPrefix predicate on the "initials" field.
func InitialsHasPrefix(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldHasPrefix(FieldInitials, v))
}

// InitialsHasSuffix applies the HasSuffix predicate on the "initials" field.
func InitialsHasSuffix(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldHasSuffix(FieldInitials, v))
}

// InitialsEqualFold applies the EqualFold predicate on the "initials" field.
func InitialsEqualFold(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEqualFold(FieldInitials, v))
}

// InitialsContainsFold applies the ContainsFold predicate on the "initials" field.
func InitialsContainsFold(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldContainsFold(FieldInitials, v))
}

// FormulaEQ applies the EQ predicate on the "formula" field.
func FormulaEQ(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldFormula, v))
}

// FormulaNEQ applies the NEQ predicate on the "formula" field.
func FormulaNEQ(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNEQ(FieldFormula, v))
}

// FormulaIn applies the In predicate on the "formula" field.
func FormulaIn(vs ...string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldIn(FieldFormula, vs...))
}

// FormulaNotIn applies the NotIn predicate on the "formula" field.
func FormulaNotIn(vs ...string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNotIn(FieldFormula, vs...))
}

// FormulaGT applies the GT predicate on the "formula" field.
func FormulaGT(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGT(FieldFormula, v))
}

// FormulaGTE applies the GTE predicate on the "formula" field.
func FormulaGTE(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGTE(FieldFormula, v))
}

// FormulaLT applies the LT predicate on the "formula" field.
func FormulaLT(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLT(FieldFormula, v))
}

// FormulaLTE applies the LTE predicate on the "formula" field.
func FormulaLTE(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLTE(FieldFormula, v))
}

// FormulaContains applies the Contains predicate on the "formula" field.
func FormulaContains(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldContains(FieldFormula, v))
}

// FormulaHasPrefix applies the HasPrefix predicate on the "formula" field.
func FormulaHasPrefix(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldHasPrefix(FieldFormula, v))
}

// FormulaHasSuffix applies the HasSuffix predicate on the "formula" field.
func FormulaHasSuffix(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldHasSuffix(FieldFormula, v))
}

// FormulaEqualFold applies the EqualFold predicate on the "formula" field.
func FormulaEqualFold(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEqualFold(FieldFormula, v))
}

// FormulaContainsFold applies the ContainsFold predicate on the "formula" field.
func FormulaContainsFold(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldContainsFold(FieldFormula, v))
}

// AsinyoFormulaEQ applies the EQ predicate on the "asinyo_formula" field.
func AsinyoFormulaEQ(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEQ(FieldAsinyoFormula, v))
}

// AsinyoFormulaNEQ applies the NEQ predicate on the "asinyo_formula" field.
func AsinyoFormulaNEQ(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNEQ(FieldAsinyoFormula, v))
}

// AsinyoFormulaIn applies the In predicate on the "asinyo_formula" field.
func AsinyoFormulaIn(vs ...string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldIn(FieldAsinyoFormula, vs...))
}

// AsinyoFormulaNotIn applies the NotIn predicate on the "asinyo_formula" field.
func AsinyoFormulaNotIn(vs ...string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNotIn(FieldAsinyoFormula, vs...))
}

// AsinyoFormulaGT applies the GT predicate on the "asinyo_formula" field.
func AsinyoFormulaGT(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGT(FieldAsinyoFormula, v))
}

// AsinyoFormulaGTE applies the GTE predicate on the "asinyo_formula" field.
func AsinyoFormulaGTE(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldGTE(FieldAsinyoFormula, v))
}

// AsinyoFormulaLT applies the LT predicate on the "asinyo_formula" field.
func AsinyoFormulaLT(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLT(FieldAsinyoFormula, v))
}

// AsinyoFormulaLTE applies the LTE predicate on the "asinyo_formula" field.
func AsinyoFormulaLTE(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldLTE(FieldAsinyoFormula, v))
}

// AsinyoFormulaContains applies the Contains predicate on the "asinyo_formula" field.
func AsinyoFormulaContains(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldContains(FieldAsinyoFormula, v))
}

// AsinyoFormulaHasPrefix applies the HasPrefix predicate on the "asinyo_formula" field.
func AsinyoFormulaHasPrefix(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldHasPrefix(FieldAsinyoFormula, v))
}

// AsinyoFormulaHasSuffix applies the HasSuffix predicate on the "asinyo_formula" field.
func AsinyoFormulaHasSuffix(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldHasSuffix(FieldAsinyoFormula, v))
}

// AsinyoFormulaIsNil applies the IsNil predicate on the "asinyo_formula" field.
func AsinyoFormulaIsNil() predicate.PriceModel {
	return predicate.PriceModel(sql.FieldIsNull(FieldAsinyoFormula))
}

// AsinyoFormulaNotNil applies the NotNil predicate on the "asinyo_formula" field.
func AsinyoFormulaNotNil() predicate.PriceModel {
	return predicate.PriceModel(sql.FieldNotNull(FieldAsinyoFormula))
}

// AsinyoFormulaEqualFold applies the EqualFold predicate on the "asinyo_formula" field.
func AsinyoFormulaEqualFold(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldEqualFold(FieldAsinyoFormula, v))
}

// AsinyoFormulaContainsFold applies the ContainsFold predicate on the "asinyo_formula" field.
func AsinyoFormulaContainsFold(v string) predicate.PriceModel {
	return predicate.PriceModel(sql.FieldContainsFold(FieldAsinyoFormula, v))
}

// HasModel applies the HasEdge predicate on the "model" edge.
func HasModel() predicate.PriceModel {
	return predicate.PriceModel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ModelTable, ModelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelWith applies the HasEdge predicate on the "model" edge with a given conditions (other predicates).
func HasModelWith(preds ...predicate.Product) predicate.PriceModel {
	return predicate.PriceModel(func(s *sql.Selector) {
		step := newModelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PriceModel) predicate.PriceModel {
	return predicate.PriceModel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PriceModel) predicate.PriceModel {
	return predicate.PriceModel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PriceModel) predicate.PriceModel {
	return predicate.PriceModel(func(s *sql.Selector) {
		p(s.Not())
	})
}
