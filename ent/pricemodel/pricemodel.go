// Code generated by ent, DO NOT EDIT.

package pricemodel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pricemodel type in the database.
	Label = "price_model"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldInitials holds the string denoting the initials field in the database.
	FieldInitials = "initials"
	// FieldFormula holds the string denoting the formula field in the database.
	FieldFormula = "formula"
	// FieldAsinyoFormula holds the string denoting the asinyo_formula field in the database.
	FieldAsinyoFormula = "asinyo_formula"
	// EdgeModel holds the string denoting the model edge name in mutations.
	EdgeModel = "model"
	// Table holds the table name of the pricemodel in the database.
	Table = "price_models"
	// ModelTable is the table that holds the model relation/edge.
	ModelTable = "products"
	// ModelInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ModelInverseTable = "products"
	// ModelColumn is the table column denoting the model relation/edge.
	ModelColumn = "price_model_model"
)

// Columns holds all SQL columns for pricemodel fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldInitials,
	FieldFormula,
	FieldAsinyoFormula,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// InitialsValidator is a validator for the "initials" field. It is called by the builders before save.
	InitialsValidator func(string) error
	// FormulaValidator is a validator for the "formula" field. It is called by the builders before save.
	FormulaValidator func(string) error
	// DefaultAsinyoFormula holds the default value on creation for the "asinyo_formula" field.
	DefaultAsinyoFormula string
)

// OrderOption defines the ordering options for the PriceModel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByInitials orders the results by the initials field.
func ByInitials(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitials, opts...).ToFunc()
}

// ByFormula orders the results by the formula field.
func ByFormula(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormula, opts...).ToFunc()
}

// ByAsinyoFormula orders the results by the asinyo_formula field.
func ByAsinyoFormula(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAsinyoFormula, opts...).ToFunc()
}

// ByModelCount orders the results by model count.
func ByModelCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModelStep(), opts...)
	}
}

// ByModel orders the results by model terms.
func ByModel(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModelStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newModelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ModelTable, ModelColumn),
	)
}
