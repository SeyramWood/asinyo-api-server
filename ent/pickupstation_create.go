// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/pickupstation"
)

// PickupStationCreate is the builder for creating a PickupStation entity.
type PickupStationCreate struct {
	config
	mutation *PickupStationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (psc *PickupStationCreate) SetCreatedAt(t time.Time) *PickupStationCreate {
	psc.mutation.SetCreatedAt(t)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *PickupStationCreate) SetNillableCreatedAt(t *time.Time) *PickupStationCreate {
	if t != nil {
		psc.SetCreatedAt(*t)
	}
	return psc
}

// SetUpdatedAt sets the "updated_at" field.
func (psc *PickupStationCreate) SetUpdatedAt(t time.Time) *PickupStationCreate {
	psc.mutation.SetUpdatedAt(t)
	return psc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psc *PickupStationCreate) SetNillableUpdatedAt(t *time.Time) *PickupStationCreate {
	if t != nil {
		psc.SetUpdatedAt(*t)
	}
	return psc
}

// SetRegion sets the "region" field.
func (psc *PickupStationCreate) SetRegion(s string) *PickupStationCreate {
	psc.mutation.SetRegion(s)
	return psc
}

// SetCity sets the "city" field.
func (psc *PickupStationCreate) SetCity(s string) *PickupStationCreate {
	psc.mutation.SetCity(s)
	return psc
}

// SetName sets the "name" field.
func (psc *PickupStationCreate) SetName(s string) *PickupStationCreate {
	psc.mutation.SetName(s)
	return psc
}

// SetAddress sets the "address" field.
func (psc *PickupStationCreate) SetAddress(s string) *PickupStationCreate {
	psc.mutation.SetAddress(s)
	return psc
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (psc *PickupStationCreate) AddOrderIDs(ids ...int) *PickupStationCreate {
	psc.mutation.AddOrderIDs(ids...)
	return psc
}

// AddOrders adds the "orders" edges to the Order entity.
func (psc *PickupStationCreate) AddOrders(o ...*Order) *PickupStationCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return psc.AddOrderIDs(ids...)
}

// Mutation returns the PickupStationMutation object of the builder.
func (psc *PickupStationCreate) Mutation() *PickupStationMutation {
	return psc.mutation
}

// Save creates the PickupStation in the database.
func (psc *PickupStationCreate) Save(ctx context.Context) (*PickupStation, error) {
	psc.defaults()
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PickupStationCreate) SaveX(ctx context.Context) *PickupStation {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PickupStationCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PickupStationCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *PickupStationCreate) defaults() {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		v := pickupstation.DefaultCreatedAt()
		psc.mutation.SetCreatedAt(v)
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		v := pickupstation.DefaultUpdatedAt()
		psc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PickupStationCreate) check() error {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PickupStation.created_at"`)}
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PickupStation.updated_at"`)}
	}
	if _, ok := psc.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`ent: missing required field "PickupStation.region"`)}
	}
	if v, ok := psc.mutation.Region(); ok {
		if err := pickupstation.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "PickupStation.region": %w`, err)}
		}
	}
	if _, ok := psc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "PickupStation.city"`)}
	}
	if v, ok := psc.mutation.City(); ok {
		if err := pickupstation.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "PickupStation.city": %w`, err)}
		}
	}
	if _, ok := psc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PickupStation.name"`)}
	}
	if v, ok := psc.mutation.Name(); ok {
		if err := pickupstation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PickupStation.name": %w`, err)}
		}
	}
	if _, ok := psc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "PickupStation.address"`)}
	}
	if v, ok := psc.mutation.Address(); ok {
		if err := pickupstation.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "PickupStation.address": %w`, err)}
		}
	}
	return nil
}

func (psc *PickupStationCreate) sqlSave(ctx context.Context) (*PickupStation, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PickupStationCreate) createSpec() (*PickupStation, *sqlgraph.CreateSpec) {
	var (
		_node = &PickupStation{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(pickupstation.Table, sqlgraph.NewFieldSpec(pickupstation.FieldID, field.TypeInt))
	)
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.SetField(pickupstation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := psc.mutation.UpdatedAt(); ok {
		_spec.SetField(pickupstation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := psc.mutation.Region(); ok {
		_spec.SetField(pickupstation.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := psc.mutation.City(); ok {
		_spec.SetField(pickupstation.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := psc.mutation.Name(); ok {
		_spec.SetField(pickupstation.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := psc.mutation.Address(); ok {
		_spec.SetField(pickupstation.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if nodes := psc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pickupstation.OrdersTable,
			Columns: []string{pickupstation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PickupStationCreateBulk is the builder for creating many PickupStation entities in bulk.
type PickupStationCreateBulk struct {
	config
	builders []*PickupStationCreate
}

// Save creates the PickupStation entities in the database.
func (pscb *PickupStationCreateBulk) Save(ctx context.Context) ([]*PickupStation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PickupStation, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PickupStationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PickupStationCreateBulk) SaveX(ctx context.Context) []*PickupStation {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PickupStationCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PickupStationCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
