// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/app/domain/models"
	"github.com/SeyramWood/ent/address"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/agentrequest"
	"github.com/SeyramWood/ent/favourite"
	"github.com/SeyramWood/ent/merchantstore"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/predicate"
)

// AgentUpdate is the builder for updating Agent entities.
type AgentUpdate struct {
	config
	hooks    []Hook
	mutation *AgentMutation
}

// Where appends a list predicates to the AgentUpdate builder.
func (au *AgentUpdate) Where(ps ...predicate.Agent) *AgentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AgentUpdate) SetUpdatedAt(t time.Time) *AgentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUsername sets the "username" field.
func (au *AgentUpdate) SetUsername(s string) *AgentUpdate {
	au.mutation.SetUsername(s)
	return au
}

// SetPassword sets the "password" field.
func (au *AgentUpdate) SetPassword(b []byte) *AgentUpdate {
	au.mutation.SetPassword(b)
	return au
}

// SetGhanaCard sets the "ghana_card" field.
func (au *AgentUpdate) SetGhanaCard(s string) *AgentUpdate {
	au.mutation.SetGhanaCard(s)
	return au
}

// SetLastName sets the "last_name" field.
func (au *AgentUpdate) SetLastName(s string) *AgentUpdate {
	au.mutation.SetLastName(s)
	return au
}

// SetOtherName sets the "other_name" field.
func (au *AgentUpdate) SetOtherName(s string) *AgentUpdate {
	au.mutation.SetOtherName(s)
	return au
}

// SetPhone sets the "phone" field.
func (au *AgentUpdate) SetPhone(s string) *AgentUpdate {
	au.mutation.SetPhone(s)
	return au
}

// SetOtherPhone sets the "other_phone" field.
func (au *AgentUpdate) SetOtherPhone(s string) *AgentUpdate {
	au.mutation.SetOtherPhone(s)
	return au
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (au *AgentUpdate) SetNillableOtherPhone(s *string) *AgentUpdate {
	if s != nil {
		au.SetOtherPhone(*s)
	}
	return au
}

// ClearOtherPhone clears the value of the "other_phone" field.
func (au *AgentUpdate) ClearOtherPhone() *AgentUpdate {
	au.mutation.ClearOtherPhone()
	return au
}

// SetAddress sets the "address" field.
func (au *AgentUpdate) SetAddress(s string) *AgentUpdate {
	au.mutation.SetAddress(s)
	return au
}

// SetDigitalAddress sets the "digital_address" field.
func (au *AgentUpdate) SetDigitalAddress(s string) *AgentUpdate {
	au.mutation.SetDigitalAddress(s)
	return au
}

// SetRegion sets the "region" field.
func (au *AgentUpdate) SetRegion(s string) *AgentUpdate {
	au.mutation.SetRegion(s)
	return au
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (au *AgentUpdate) SetNillableRegion(s *string) *AgentUpdate {
	if s != nil {
		au.SetRegion(*s)
	}
	return au
}

// ClearRegion clears the value of the "region" field.
func (au *AgentUpdate) ClearRegion() *AgentUpdate {
	au.mutation.ClearRegion()
	return au
}

// SetDistrict sets the "district" field.
func (au *AgentUpdate) SetDistrict(s string) *AgentUpdate {
	au.mutation.SetDistrict(s)
	return au
}

// SetNillableDistrict sets the "district" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDistrict(s *string) *AgentUpdate {
	if s != nil {
		au.SetDistrict(*s)
	}
	return au
}

// ClearDistrict clears the value of the "district" field.
func (au *AgentUpdate) ClearDistrict() *AgentUpdate {
	au.mutation.ClearDistrict()
	return au
}

// SetCity sets the "city" field.
func (au *AgentUpdate) SetCity(s string) *AgentUpdate {
	au.mutation.SetCity(s)
	return au
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (au *AgentUpdate) SetNillableCity(s *string) *AgentUpdate {
	if s != nil {
		au.SetCity(*s)
	}
	return au
}

// ClearCity clears the value of the "city" field.
func (au *AgentUpdate) ClearCity() *AgentUpdate {
	au.mutation.ClearCity()
	return au
}

// SetDefaultAccount sets the "default_account" field.
func (au *AgentUpdate) SetDefaultAccount(aa agent.DefaultAccount) *AgentUpdate {
	au.mutation.SetDefaultAccount(aa)
	return au
}

// SetNillableDefaultAccount sets the "default_account" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDefaultAccount(aa *agent.DefaultAccount) *AgentUpdate {
	if aa != nil {
		au.SetDefaultAccount(*aa)
	}
	return au
}

// ClearDefaultAccount clears the value of the "default_account" field.
func (au *AgentUpdate) ClearDefaultAccount() *AgentUpdate {
	au.mutation.ClearDefaultAccount()
	return au
}

// SetBankAccount sets the "bank_account" field.
func (au *AgentUpdate) SetBankAccount(mba *models.MerchantBankAccount) *AgentUpdate {
	au.mutation.SetBankAccount(mba)
	return au
}

// ClearBankAccount clears the value of the "bank_account" field.
func (au *AgentUpdate) ClearBankAccount() *AgentUpdate {
	au.mutation.ClearBankAccount()
	return au
}

// SetMomoAccount sets the "momo_account" field.
func (au *AgentUpdate) SetMomoAccount(mma *models.MerchantMomoAccount) *AgentUpdate {
	au.mutation.SetMomoAccount(mma)
	return au
}

// ClearMomoAccount clears the value of the "momo_account" field.
func (au *AgentUpdate) ClearMomoAccount() *AgentUpdate {
	au.mutation.ClearMomoAccount()
	return au
}

// SetVerified sets the "verified" field.
func (au *AgentUpdate) SetVerified(b bool) *AgentUpdate {
	au.mutation.SetVerified(b)
	return au
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (au *AgentUpdate) SetNillableVerified(b *bool) *AgentUpdate {
	if b != nil {
		au.SetVerified(*b)
	}
	return au
}

// SetCompliance sets the "compliance" field.
func (au *AgentUpdate) SetCompliance(mcm *models.AgentComplianceModel) *AgentUpdate {
	au.mutation.SetCompliance(mcm)
	return au
}

// ClearCompliance clears the value of the "compliance" field.
func (au *AgentUpdate) ClearCompliance() *AgentUpdate {
	au.mutation.ClearCompliance()
	return au
}

// AddAddressIDs adds the "addresses" edge to the Address entity by IDs.
func (au *AgentUpdate) AddAddressIDs(ids ...int) *AgentUpdate {
	au.mutation.AddAddressIDs(ids...)
	return au
}

// AddAddresses adds the "addresses" edges to the Address entity.
func (au *AgentUpdate) AddAddresses(a ...*Address) *AgentUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAddressIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (au *AgentUpdate) AddOrderIDs(ids ...int) *AgentUpdate {
	au.mutation.AddOrderIDs(ids...)
	return au
}

// AddOrders adds the "orders" edges to the Order entity.
func (au *AgentUpdate) AddOrders(o ...*Order) *AgentUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOrderIDs(ids...)
}

// AddFavouriteIDs adds the "favourites" edge to the Favourite entity by IDs.
func (au *AgentUpdate) AddFavouriteIDs(ids ...int) *AgentUpdate {
	au.mutation.AddFavouriteIDs(ids...)
	return au
}

// AddFavourites adds the "favourites" edges to the Favourite entity.
func (au *AgentUpdate) AddFavourites(f ...*Favourite) *AgentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return au.AddFavouriteIDs(ids...)
}

// AddStoreIDs adds the "store" edge to the MerchantStore entity by IDs.
func (au *AgentUpdate) AddStoreIDs(ids ...int) *AgentUpdate {
	au.mutation.AddStoreIDs(ids...)
	return au
}

// AddStore adds the "store" edges to the MerchantStore entity.
func (au *AgentUpdate) AddStore(m ...*MerchantStore) *AgentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddStoreIDs(ids...)
}

// AddRequestIDs adds the "requests" edge to the AgentRequest entity by IDs.
func (au *AgentUpdate) AddRequestIDs(ids ...int) *AgentUpdate {
	au.mutation.AddRequestIDs(ids...)
	return au
}

// AddRequests adds the "requests" edges to the AgentRequest entity.
func (au *AgentUpdate) AddRequests(a ...*AgentRequest) *AgentUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddRequestIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (au *AgentUpdate) Mutation() *AgentMutation {
	return au.mutation
}

// ClearAddresses clears all "addresses" edges to the Address entity.
func (au *AgentUpdate) ClearAddresses() *AgentUpdate {
	au.mutation.ClearAddresses()
	return au
}

// RemoveAddressIDs removes the "addresses" edge to Address entities by IDs.
func (au *AgentUpdate) RemoveAddressIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveAddressIDs(ids...)
	return au
}

// RemoveAddresses removes "addresses" edges to Address entities.
func (au *AgentUpdate) RemoveAddresses(a ...*Address) *AgentUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAddressIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (au *AgentUpdate) ClearOrders() *AgentUpdate {
	au.mutation.ClearOrders()
	return au
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (au *AgentUpdate) RemoveOrderIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveOrderIDs(ids...)
	return au
}

// RemoveOrders removes "orders" edges to Order entities.
func (au *AgentUpdate) RemoveOrders(o ...*Order) *AgentUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOrderIDs(ids...)
}

// ClearFavourites clears all "favourites" edges to the Favourite entity.
func (au *AgentUpdate) ClearFavourites() *AgentUpdate {
	au.mutation.ClearFavourites()
	return au
}

// RemoveFavouriteIDs removes the "favourites" edge to Favourite entities by IDs.
func (au *AgentUpdate) RemoveFavouriteIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveFavouriteIDs(ids...)
	return au
}

// RemoveFavourites removes "favourites" edges to Favourite entities.
func (au *AgentUpdate) RemoveFavourites(f ...*Favourite) *AgentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return au.RemoveFavouriteIDs(ids...)
}

// ClearStore clears all "store" edges to the MerchantStore entity.
func (au *AgentUpdate) ClearStore() *AgentUpdate {
	au.mutation.ClearStore()
	return au
}

// RemoveStoreIDs removes the "store" edge to MerchantStore entities by IDs.
func (au *AgentUpdate) RemoveStoreIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveStoreIDs(ids...)
	return au
}

// RemoveStore removes "store" edges to MerchantStore entities.
func (au *AgentUpdate) RemoveStore(m ...*MerchantStore) *AgentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveStoreIDs(ids...)
}

// ClearRequests clears all "requests" edges to the AgentRequest entity.
func (au *AgentUpdate) ClearRequests() *AgentUpdate {
	au.mutation.ClearRequests()
	return au
}

// RemoveRequestIDs removes the "requests" edge to AgentRequest entities by IDs.
func (au *AgentUpdate) RemoveRequestIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveRequestIDs(ids...)
	return au
}

// RemoveRequests removes "requests" edges to AgentRequest entities.
func (au *AgentUpdate) RemoveRequests(a ...*AgentRequest) *AgentUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveRequestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AgentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AgentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AgentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AgentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AgentUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := agent.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AgentUpdate) check() error {
	if v, ok := au.mutation.Username(); ok {
		if err := agent.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Agent.username": %w`, err)}
		}
	}
	if v, ok := au.mutation.Password(); ok {
		if err := agent.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Agent.password": %w`, err)}
		}
	}
	if v, ok := au.mutation.GhanaCard(); ok {
		if err := agent.GhanaCardValidator(v); err != nil {
			return &ValidationError{Name: "ghana_card", err: fmt.Errorf(`ent: validator failed for field "Agent.ghana_card": %w`, err)}
		}
	}
	if v, ok := au.mutation.LastName(); ok {
		if err := agent.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Agent.last_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.OtherName(); ok {
		if err := agent.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "Agent.other_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.Phone(); ok {
		if err := agent.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Agent.phone": %w`, err)}
		}
	}
	if v, ok := au.mutation.Address(); ok {
		if err := agent.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Agent.address": %w`, err)}
		}
	}
	if v, ok := au.mutation.DigitalAddress(); ok {
		if err := agent.DigitalAddressValidator(v); err != nil {
			return &ValidationError{Name: "digital_address", err: fmt.Errorf(`ent: validator failed for field "Agent.digital_address": %w`, err)}
		}
	}
	if v, ok := au.mutation.DefaultAccount(); ok {
		if err := agent.DefaultAccountValidator(v); err != nil {
			return &ValidationError{Name: "default_account", err: fmt.Errorf(`ent: validator failed for field "Agent.default_account": %w`, err)}
		}
	}
	return nil
}

func (au *AgentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   agent.Table,
			Columns: agent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: agent.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agent.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldUsername,
		})
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: agent.FieldPassword,
		})
	}
	if value, ok := au.mutation.GhanaCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldGhanaCard,
		})
	}
	if value, ok := au.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldLastName,
		})
	}
	if value, ok := au.mutation.OtherName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldOtherName,
		})
	}
	if value, ok := au.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldPhone,
		})
	}
	if value, ok := au.mutation.OtherPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldOtherPhone,
		})
	}
	if au.mutation.OtherPhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agent.FieldOtherPhone,
		})
	}
	if value, ok := au.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldAddress,
		})
	}
	if value, ok := au.mutation.DigitalAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldDigitalAddress,
		})
	}
	if value, ok := au.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldRegion,
		})
	}
	if au.mutation.RegionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agent.FieldRegion,
		})
	}
	if value, ok := au.mutation.District(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldDistrict,
		})
	}
	if au.mutation.DistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agent.FieldDistrict,
		})
	}
	if value, ok := au.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldCity,
		})
	}
	if au.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agent.FieldCity,
		})
	}
	if value, ok := au.mutation.DefaultAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: agent.FieldDefaultAccount,
		})
	}
	if au.mutation.DefaultAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: agent.FieldDefaultAccount,
		})
	}
	if value, ok := au.mutation.BankAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: agent.FieldBankAccount,
		})
	}
	if au.mutation.BankAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: agent.FieldBankAccount,
		})
	}
	if value, ok := au.mutation.MomoAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: agent.FieldMomoAccount,
		})
	}
	if au.mutation.MomoAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: agent.FieldMomoAccount,
		})
	}
	if value, ok := au.mutation.Verified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: agent.FieldVerified,
		})
	}
	if value, ok := au.mutation.Compliance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: agent.FieldCompliance,
		})
	}
	if au.mutation.ComplianceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: agent.FieldCompliance,
		})
	}
	if au.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.AddressesTable,
			Columns: []string{agent.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAddressesIDs(); len(nodes) > 0 && !au.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.AddressesTable,
			Columns: []string{agent.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.AddressesTable,
			Columns: []string{agent.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.OrdersTable,
			Columns: []string{agent.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !au.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.OrdersTable,
			Columns: []string{agent.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.OrdersTable,
			Columns: []string{agent.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.FavouritesTable,
			Columns: []string{agent.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: favourite.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedFavouritesIDs(); len(nodes) > 0 && !au.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.FavouritesTable,
			Columns: []string{agent.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: favourite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.FavouritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.FavouritesTable,
			Columns: []string{agent.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: favourite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.StoreTable,
			Columns: []string{agent.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchantstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedStoreIDs(); len(nodes) > 0 && !au.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.StoreTable,
			Columns: []string{agent.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchantstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.StoreTable,
			Columns: []string{agent.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchantstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.RequestsTable,
			Columns: []string{agent.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agentrequest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRequestsIDs(); len(nodes) > 0 && !au.mutation.RequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.RequestsTable,
			Columns: []string{agent.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agentrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.RequestsTable,
			Columns: []string{agent.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agentrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AgentUpdateOne is the builder for updating a single Agent entity.
type AgentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AgentUpdateOne) SetUpdatedAt(t time.Time) *AgentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUsername sets the "username" field.
func (auo *AgentUpdateOne) SetUsername(s string) *AgentUpdateOne {
	auo.mutation.SetUsername(s)
	return auo
}

// SetPassword sets the "password" field.
func (auo *AgentUpdateOne) SetPassword(b []byte) *AgentUpdateOne {
	auo.mutation.SetPassword(b)
	return auo
}

// SetGhanaCard sets the "ghana_card" field.
func (auo *AgentUpdateOne) SetGhanaCard(s string) *AgentUpdateOne {
	auo.mutation.SetGhanaCard(s)
	return auo
}

// SetLastName sets the "last_name" field.
func (auo *AgentUpdateOne) SetLastName(s string) *AgentUpdateOne {
	auo.mutation.SetLastName(s)
	return auo
}

// SetOtherName sets the "other_name" field.
func (auo *AgentUpdateOne) SetOtherName(s string) *AgentUpdateOne {
	auo.mutation.SetOtherName(s)
	return auo
}

// SetPhone sets the "phone" field.
func (auo *AgentUpdateOne) SetPhone(s string) *AgentUpdateOne {
	auo.mutation.SetPhone(s)
	return auo
}

// SetOtherPhone sets the "other_phone" field.
func (auo *AgentUpdateOne) SetOtherPhone(s string) *AgentUpdateOne {
	auo.mutation.SetOtherPhone(s)
	return auo
}

// SetNillableOtherPhone sets the "other_phone" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableOtherPhone(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetOtherPhone(*s)
	}
	return auo
}

// ClearOtherPhone clears the value of the "other_phone" field.
func (auo *AgentUpdateOne) ClearOtherPhone() *AgentUpdateOne {
	auo.mutation.ClearOtherPhone()
	return auo
}

// SetAddress sets the "address" field.
func (auo *AgentUpdateOne) SetAddress(s string) *AgentUpdateOne {
	auo.mutation.SetAddress(s)
	return auo
}

// SetDigitalAddress sets the "digital_address" field.
func (auo *AgentUpdateOne) SetDigitalAddress(s string) *AgentUpdateOne {
	auo.mutation.SetDigitalAddress(s)
	return auo
}

// SetRegion sets the "region" field.
func (auo *AgentUpdateOne) SetRegion(s string) *AgentUpdateOne {
	auo.mutation.SetRegion(s)
	return auo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableRegion(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetRegion(*s)
	}
	return auo
}

// ClearRegion clears the value of the "region" field.
func (auo *AgentUpdateOne) ClearRegion() *AgentUpdateOne {
	auo.mutation.ClearRegion()
	return auo
}

// SetDistrict sets the "district" field.
func (auo *AgentUpdateOne) SetDistrict(s string) *AgentUpdateOne {
	auo.mutation.SetDistrict(s)
	return auo
}

// SetNillableDistrict sets the "district" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDistrict(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetDistrict(*s)
	}
	return auo
}

// ClearDistrict clears the value of the "district" field.
func (auo *AgentUpdateOne) ClearDistrict() *AgentUpdateOne {
	auo.mutation.ClearDistrict()
	return auo
}

// SetCity sets the "city" field.
func (auo *AgentUpdateOne) SetCity(s string) *AgentUpdateOne {
	auo.mutation.SetCity(s)
	return auo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableCity(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetCity(*s)
	}
	return auo
}

// ClearCity clears the value of the "city" field.
func (auo *AgentUpdateOne) ClearCity() *AgentUpdateOne {
	auo.mutation.ClearCity()
	return auo
}

// SetDefaultAccount sets the "default_account" field.
func (auo *AgentUpdateOne) SetDefaultAccount(aa agent.DefaultAccount) *AgentUpdateOne {
	auo.mutation.SetDefaultAccount(aa)
	return auo
}

// SetNillableDefaultAccount sets the "default_account" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDefaultAccount(aa *agent.DefaultAccount) *AgentUpdateOne {
	if aa != nil {
		auo.SetDefaultAccount(*aa)
	}
	return auo
}

// ClearDefaultAccount clears the value of the "default_account" field.
func (auo *AgentUpdateOne) ClearDefaultAccount() *AgentUpdateOne {
	auo.mutation.ClearDefaultAccount()
	return auo
}

// SetBankAccount sets the "bank_account" field.
func (auo *AgentUpdateOne) SetBankAccount(mba *models.MerchantBankAccount) *AgentUpdateOne {
	auo.mutation.SetBankAccount(mba)
	return auo
}

// ClearBankAccount clears the value of the "bank_account" field.
func (auo *AgentUpdateOne) ClearBankAccount() *AgentUpdateOne {
	auo.mutation.ClearBankAccount()
	return auo
}

// SetMomoAccount sets the "momo_account" field.
func (auo *AgentUpdateOne) SetMomoAccount(mma *models.MerchantMomoAccount) *AgentUpdateOne {
	auo.mutation.SetMomoAccount(mma)
	return auo
}

// ClearMomoAccount clears the value of the "momo_account" field.
func (auo *AgentUpdateOne) ClearMomoAccount() *AgentUpdateOne {
	auo.mutation.ClearMomoAccount()
	return auo
}

// SetVerified sets the "verified" field.
func (auo *AgentUpdateOne) SetVerified(b bool) *AgentUpdateOne {
	auo.mutation.SetVerified(b)
	return auo
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableVerified(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetVerified(*b)
	}
	return auo
}

// SetCompliance sets the "compliance" field.
func (auo *AgentUpdateOne) SetCompliance(mcm *models.AgentComplianceModel) *AgentUpdateOne {
	auo.mutation.SetCompliance(mcm)
	return auo
}

// ClearCompliance clears the value of the "compliance" field.
func (auo *AgentUpdateOne) ClearCompliance() *AgentUpdateOne {
	auo.mutation.ClearCompliance()
	return auo
}

// AddAddressIDs adds the "addresses" edge to the Address entity by IDs.
func (auo *AgentUpdateOne) AddAddressIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddAddressIDs(ids...)
	return auo
}

// AddAddresses adds the "addresses" edges to the Address entity.
func (auo *AgentUpdateOne) AddAddresses(a ...*Address) *AgentUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAddressIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (auo *AgentUpdateOne) AddOrderIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddOrderIDs(ids...)
	return auo
}

// AddOrders adds the "orders" edges to the Order entity.
func (auo *AgentUpdateOne) AddOrders(o ...*Order) *AgentUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOrderIDs(ids...)
}

// AddFavouriteIDs adds the "favourites" edge to the Favourite entity by IDs.
func (auo *AgentUpdateOne) AddFavouriteIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddFavouriteIDs(ids...)
	return auo
}

// AddFavourites adds the "favourites" edges to the Favourite entity.
func (auo *AgentUpdateOne) AddFavourites(f ...*Favourite) *AgentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return auo.AddFavouriteIDs(ids...)
}

// AddStoreIDs adds the "store" edge to the MerchantStore entity by IDs.
func (auo *AgentUpdateOne) AddStoreIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddStoreIDs(ids...)
	return auo
}

// AddStore adds the "store" edges to the MerchantStore entity.
func (auo *AgentUpdateOne) AddStore(m ...*MerchantStore) *AgentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddStoreIDs(ids...)
}

// AddRequestIDs adds the "requests" edge to the AgentRequest entity by IDs.
func (auo *AgentUpdateOne) AddRequestIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddRequestIDs(ids...)
	return auo
}

// AddRequests adds the "requests" edges to the AgentRequest entity.
func (auo *AgentUpdateOne) AddRequests(a ...*AgentRequest) *AgentUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddRequestIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (auo *AgentUpdateOne) Mutation() *AgentMutation {
	return auo.mutation
}

// ClearAddresses clears all "addresses" edges to the Address entity.
func (auo *AgentUpdateOne) ClearAddresses() *AgentUpdateOne {
	auo.mutation.ClearAddresses()
	return auo
}

// RemoveAddressIDs removes the "addresses" edge to Address entities by IDs.
func (auo *AgentUpdateOne) RemoveAddressIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveAddressIDs(ids...)
	return auo
}

// RemoveAddresses removes "addresses" edges to Address entities.
func (auo *AgentUpdateOne) RemoveAddresses(a ...*Address) *AgentUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAddressIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (auo *AgentUpdateOne) ClearOrders() *AgentUpdateOne {
	auo.mutation.ClearOrders()
	return auo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (auo *AgentUpdateOne) RemoveOrderIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveOrderIDs(ids...)
	return auo
}

// RemoveOrders removes "orders" edges to Order entities.
func (auo *AgentUpdateOne) RemoveOrders(o ...*Order) *AgentUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOrderIDs(ids...)
}

// ClearFavourites clears all "favourites" edges to the Favourite entity.
func (auo *AgentUpdateOne) ClearFavourites() *AgentUpdateOne {
	auo.mutation.ClearFavourites()
	return auo
}

// RemoveFavouriteIDs removes the "favourites" edge to Favourite entities by IDs.
func (auo *AgentUpdateOne) RemoveFavouriteIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveFavouriteIDs(ids...)
	return auo
}

// RemoveFavourites removes "favourites" edges to Favourite entities.
func (auo *AgentUpdateOne) RemoveFavourites(f ...*Favourite) *AgentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return auo.RemoveFavouriteIDs(ids...)
}

// ClearStore clears all "store" edges to the MerchantStore entity.
func (auo *AgentUpdateOne) ClearStore() *AgentUpdateOne {
	auo.mutation.ClearStore()
	return auo
}

// RemoveStoreIDs removes the "store" edge to MerchantStore entities by IDs.
func (auo *AgentUpdateOne) RemoveStoreIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveStoreIDs(ids...)
	return auo
}

// RemoveStore removes "store" edges to MerchantStore entities.
func (auo *AgentUpdateOne) RemoveStore(m ...*MerchantStore) *AgentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveStoreIDs(ids...)
}

// ClearRequests clears all "requests" edges to the AgentRequest entity.
func (auo *AgentUpdateOne) ClearRequests() *AgentUpdateOne {
	auo.mutation.ClearRequests()
	return auo
}

// RemoveRequestIDs removes the "requests" edge to AgentRequest entities by IDs.
func (auo *AgentUpdateOne) RemoveRequestIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveRequestIDs(ids...)
	return auo
}

// RemoveRequests removes "requests" edges to AgentRequest entities.
func (auo *AgentUpdateOne) RemoveRequests(a ...*AgentRequest) *AgentUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveRequestIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AgentUpdateOne) Select(field string, fields ...string) *AgentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Agent entity.
func (auo *AgentUpdateOne) Save(ctx context.Context) (*Agent, error) {
	var (
		err  error
		node *Agent
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Agent)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AgentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AgentUpdateOne) SaveX(ctx context.Context) *Agent {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AgentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AgentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AgentUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := agent.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AgentUpdateOne) check() error {
	if v, ok := auo.mutation.Username(); ok {
		if err := agent.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Agent.username": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Password(); ok {
		if err := agent.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Agent.password": %w`, err)}
		}
	}
	if v, ok := auo.mutation.GhanaCard(); ok {
		if err := agent.GhanaCardValidator(v); err != nil {
			return &ValidationError{Name: "ghana_card", err: fmt.Errorf(`ent: validator failed for field "Agent.ghana_card": %w`, err)}
		}
	}
	if v, ok := auo.mutation.LastName(); ok {
		if err := agent.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Agent.last_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.OtherName(); ok {
		if err := agent.OtherNameValidator(v); err != nil {
			return &ValidationError{Name: "other_name", err: fmt.Errorf(`ent: validator failed for field "Agent.other_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Phone(); ok {
		if err := agent.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Agent.phone": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Address(); ok {
		if err := agent.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Agent.address": %w`, err)}
		}
	}
	if v, ok := auo.mutation.DigitalAddress(); ok {
		if err := agent.DigitalAddressValidator(v); err != nil {
			return &ValidationError{Name: "digital_address", err: fmt.Errorf(`ent: validator failed for field "Agent.digital_address": %w`, err)}
		}
	}
	if v, ok := auo.mutation.DefaultAccount(); ok {
		if err := agent.DefaultAccountValidator(v); err != nil {
			return &ValidationError{Name: "default_account", err: fmt.Errorf(`ent: validator failed for field "Agent.default_account": %w`, err)}
		}
	}
	return nil
}

func (auo *AgentUpdateOne) sqlSave(ctx context.Context) (_node *Agent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   agent.Table,
			Columns: agent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: agent.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Agent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agent.FieldID)
		for _, f := range fields {
			if !agent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agent.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldUsername,
		})
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: agent.FieldPassword,
		})
	}
	if value, ok := auo.mutation.GhanaCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldGhanaCard,
		})
	}
	if value, ok := auo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldLastName,
		})
	}
	if value, ok := auo.mutation.OtherName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldOtherName,
		})
	}
	if value, ok := auo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldPhone,
		})
	}
	if value, ok := auo.mutation.OtherPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldOtherPhone,
		})
	}
	if auo.mutation.OtherPhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agent.FieldOtherPhone,
		})
	}
	if value, ok := auo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldAddress,
		})
	}
	if value, ok := auo.mutation.DigitalAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldDigitalAddress,
		})
	}
	if value, ok := auo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldRegion,
		})
	}
	if auo.mutation.RegionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agent.FieldRegion,
		})
	}
	if value, ok := auo.mutation.District(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldDistrict,
		})
	}
	if auo.mutation.DistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agent.FieldDistrict,
		})
	}
	if value, ok := auo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldCity,
		})
	}
	if auo.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agent.FieldCity,
		})
	}
	if value, ok := auo.mutation.DefaultAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: agent.FieldDefaultAccount,
		})
	}
	if auo.mutation.DefaultAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: agent.FieldDefaultAccount,
		})
	}
	if value, ok := auo.mutation.BankAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: agent.FieldBankAccount,
		})
	}
	if auo.mutation.BankAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: agent.FieldBankAccount,
		})
	}
	if value, ok := auo.mutation.MomoAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: agent.FieldMomoAccount,
		})
	}
	if auo.mutation.MomoAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: agent.FieldMomoAccount,
		})
	}
	if value, ok := auo.mutation.Verified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: agent.FieldVerified,
		})
	}
	if value, ok := auo.mutation.Compliance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: agent.FieldCompliance,
		})
	}
	if auo.mutation.ComplianceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: agent.FieldCompliance,
		})
	}
	if auo.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.AddressesTable,
			Columns: []string{agent.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAddressesIDs(); len(nodes) > 0 && !auo.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.AddressesTable,
			Columns: []string{agent.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.AddressesTable,
			Columns: []string{agent.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.OrdersTable,
			Columns: []string{agent.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !auo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.OrdersTable,
			Columns: []string{agent.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.OrdersTable,
			Columns: []string{agent.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.FavouritesTable,
			Columns: []string{agent.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: favourite.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedFavouritesIDs(); len(nodes) > 0 && !auo.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.FavouritesTable,
			Columns: []string{agent.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: favourite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.FavouritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.FavouritesTable,
			Columns: []string{agent.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: favourite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.StoreTable,
			Columns: []string{agent.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchantstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedStoreIDs(); len(nodes) > 0 && !auo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.StoreTable,
			Columns: []string{agent.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchantstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.StoreTable,
			Columns: []string{agent.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchantstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.RequestsTable,
			Columns: []string{agent.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agentrequest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRequestsIDs(); len(nodes) > 0 && !auo.mutation.RequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.RequestsTable,
			Columns: []string{agent.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agentrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.RequestsTable,
			Columns: []string{agent.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agentrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Agent{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
