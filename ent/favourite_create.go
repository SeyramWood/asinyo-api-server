// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/favourite"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/product"
)

// FavouriteCreate is the builder for creating a Favourite entity.
type FavouriteCreate struct {
	config
	mutation *FavouriteMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fc *FavouriteCreate) SetCreatedAt(t time.Time) *FavouriteCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FavouriteCreate) SetNillableCreatedAt(t *time.Time) *FavouriteCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FavouriteCreate) SetUpdatedAt(t time.Time) *FavouriteCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FavouriteCreate) SetNillableUpdatedAt(t *time.Time) *FavouriteCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (fc *FavouriteCreate) SetMerchantID(id int) *FavouriteCreate {
	fc.mutation.SetMerchantID(id)
	return fc
}

// SetNillableMerchantID sets the "merchant" edge to the Merchant entity by ID if the given value is not nil.
func (fc *FavouriteCreate) SetNillableMerchantID(id *int) *FavouriteCreate {
	if id != nil {
		fc = fc.SetMerchantID(*id)
	}
	return fc
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (fc *FavouriteCreate) SetMerchant(m *Merchant) *FavouriteCreate {
	return fc.SetMerchantID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (fc *FavouriteCreate) SetAgentID(id int) *FavouriteCreate {
	fc.mutation.SetAgentID(id)
	return fc
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (fc *FavouriteCreate) SetNillableAgentID(id *int) *FavouriteCreate {
	if id != nil {
		fc = fc.SetAgentID(*id)
	}
	return fc
}

// SetAgent sets the "agent" edge to the Agent entity.
func (fc *FavouriteCreate) SetAgent(a *Agent) *FavouriteCreate {
	return fc.SetAgentID(a.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (fc *FavouriteCreate) SetCustomerID(id int) *FavouriteCreate {
	fc.mutation.SetCustomerID(id)
	return fc
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (fc *FavouriteCreate) SetNillableCustomerID(id *int) *FavouriteCreate {
	if id != nil {
		fc = fc.SetCustomerID(*id)
	}
	return fc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (fc *FavouriteCreate) SetCustomer(c *Customer) *FavouriteCreate {
	return fc.SetCustomerID(c.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (fc *FavouriteCreate) SetProductID(id int) *FavouriteCreate {
	fc.mutation.SetProductID(id)
	return fc
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (fc *FavouriteCreate) SetNillableProductID(id *int) *FavouriteCreate {
	if id != nil {
		fc = fc.SetProductID(*id)
	}
	return fc
}

// SetProduct sets the "product" edge to the Product entity.
func (fc *FavouriteCreate) SetProduct(p *Product) *FavouriteCreate {
	return fc.SetProductID(p.ID)
}

// Mutation returns the FavouriteMutation object of the builder.
func (fc *FavouriteCreate) Mutation() *FavouriteMutation {
	return fc.mutation
}

// Save creates the Favourite in the database.
func (fc *FavouriteCreate) Save(ctx context.Context) (*Favourite, error) {
	var (
		err  error
		node *Favourite
	)
	fc.defaults()
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FavouriteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			if node, err = fc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			if fc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FavouriteCreate) SaveX(ctx context.Context) *Favourite {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FavouriteCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FavouriteCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FavouriteCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := favourite.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := favourite.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FavouriteCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Favourite.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Favourite.updated_at"`)}
	}
	return nil
}

func (fc *FavouriteCreate) sqlSave(ctx context.Context) (*Favourite, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fc *FavouriteCreate) createSpec() (*Favourite, *sqlgraph.CreateSpec) {
	var (
		_node = &Favourite{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: favourite.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: favourite.FieldID,
			},
		}
	)
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: favourite.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: favourite.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := fc.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.MerchantTable,
			Columns: []string{favourite.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: merchant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.merchant_favourites = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.AgentTable,
			Columns: []string{favourite.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agent_favourites = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.CustomerTable,
			Columns: []string{favourite.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_favourites = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.ProductTable,
			Columns: []string{favourite.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_favourites = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FavouriteCreateBulk is the builder for creating many Favourite entities in bulk.
type FavouriteCreateBulk struct {
	config
	builders []*FavouriteCreate
}

// Save creates the Favourite entities in the database.
func (fcb *FavouriteCreateBulk) Save(ctx context.Context) ([]*Favourite, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Favourite, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FavouriteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FavouriteCreateBulk) SaveX(ctx context.Context) []*Favourite {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FavouriteCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FavouriteCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
