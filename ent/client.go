// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/SeyramWood/ent/migrate"

	"github.com/SeyramWood/ent/admin"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/product"
	"github.com/SeyramWood/ent/productcategorymajor"
	"github.com/SeyramWood/ent/productcategoryminor"
	"github.com/SeyramWood/ent/retailmerchant"
	"github.com/SeyramWood/ent/suppliermerchant"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Admin is the client for interacting with the Admin builders.
	Admin *AdminClient
	// Agent is the client for interacting with the Agent builders.
	Agent *AgentClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// Merchant is the client for interacting with the Merchant builders.
	Merchant *MerchantClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductCategoryMajor is the client for interacting with the ProductCategoryMajor builders.
	ProductCategoryMajor *ProductCategoryMajorClient
	// ProductCategoryMinor is the client for interacting with the ProductCategoryMinor builders.
	ProductCategoryMinor *ProductCategoryMinorClient
	// RetailMerchant is the client for interacting with the RetailMerchant builders.
	RetailMerchant *RetailMerchantClient
	// SupplierMerchant is the client for interacting with the SupplierMerchant builders.
	SupplierMerchant *SupplierMerchantClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Admin = NewAdminClient(c.config)
	c.Agent = NewAgentClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.Merchant = NewMerchantClient(c.config)
	c.Product = NewProductClient(c.config)
	c.ProductCategoryMajor = NewProductCategoryMajorClient(c.config)
	c.ProductCategoryMinor = NewProductCategoryMinorClient(c.config)
	c.RetailMerchant = NewRetailMerchantClient(c.config)
	c.SupplierMerchant = NewSupplierMerchantClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Admin:                NewAdminClient(cfg),
		Agent:                NewAgentClient(cfg),
		Customer:             NewCustomerClient(cfg),
		Merchant:             NewMerchantClient(cfg),
		Product:              NewProductClient(cfg),
		ProductCategoryMajor: NewProductCategoryMajorClient(cfg),
		ProductCategoryMinor: NewProductCategoryMinorClient(cfg),
		RetailMerchant:       NewRetailMerchantClient(cfg),
		SupplierMerchant:     NewSupplierMerchantClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Admin:                NewAdminClient(cfg),
		Agent:                NewAgentClient(cfg),
		Customer:             NewCustomerClient(cfg),
		Merchant:             NewMerchantClient(cfg),
		Product:              NewProductClient(cfg),
		ProductCategoryMajor: NewProductCategoryMajorClient(cfg),
		ProductCategoryMinor: NewProductCategoryMinorClient(cfg),
		RetailMerchant:       NewRetailMerchantClient(cfg),
		SupplierMerchant:     NewSupplierMerchantClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Admin.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Admin.Use(hooks...)
	c.Agent.Use(hooks...)
	c.Customer.Use(hooks...)
	c.Merchant.Use(hooks...)
	c.Product.Use(hooks...)
	c.ProductCategoryMajor.Use(hooks...)
	c.ProductCategoryMinor.Use(hooks...)
	c.RetailMerchant.Use(hooks...)
	c.SupplierMerchant.Use(hooks...)
}

// AdminClient is a client for the Admin schema.
type AdminClient struct {
	config
}

// NewAdminClient returns a client for the Admin from the given config.
func NewAdminClient(c config) *AdminClient {
	return &AdminClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `admin.Hooks(f(g(h())))`.
func (c *AdminClient) Use(hooks ...Hook) {
	c.hooks.Admin = append(c.hooks.Admin, hooks...)
}

// Create returns a create builder for Admin.
func (c *AdminClient) Create() *AdminCreate {
	mutation := newAdminMutation(c.config, OpCreate)
	return &AdminCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Admin entities.
func (c *AdminClient) CreateBulk(builders ...*AdminCreate) *AdminCreateBulk {
	return &AdminCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Admin.
func (c *AdminClient) Update() *AdminUpdate {
	mutation := newAdminMutation(c.config, OpUpdate)
	return &AdminUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminClient) UpdateOne(a *Admin) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdmin(a))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminClient) UpdateOneID(id int) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdminID(id))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Admin.
func (c *AdminClient) Delete() *AdminDelete {
	mutation := newAdminMutation(c.config, OpDelete)
	return &AdminDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminClient) DeleteOne(a *Admin) *AdminDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminClient) DeleteOneID(id int) *AdminDeleteOne {
	builder := c.Delete().Where(admin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminDeleteOne{builder}
}

// Query returns a query builder for Admin.
func (c *AdminClient) Query() *AdminQuery {
	return &AdminQuery{
		config: c.config,
	}
}

// Get returns a Admin entity by its id.
func (c *AdminClient) Get(ctx context.Context, id int) (*Admin, error) {
	return c.Query().Where(admin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminClient) GetX(ctx context.Context, id int) *Admin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AdminClient) Hooks() []Hook {
	return c.hooks.Admin
}

// AgentClient is a client for the Agent schema.
type AgentClient struct {
	config
}

// NewAgentClient returns a client for the Agent from the given config.
func NewAgentClient(c config) *AgentClient {
	return &AgentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agent.Hooks(f(g(h())))`.
func (c *AgentClient) Use(hooks ...Hook) {
	c.hooks.Agent = append(c.hooks.Agent, hooks...)
}

// Create returns a create builder for Agent.
func (c *AgentClient) Create() *AgentCreate {
	mutation := newAgentMutation(c.config, OpCreate)
	return &AgentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Agent entities.
func (c *AgentClient) CreateBulk(builders ...*AgentCreate) *AgentCreateBulk {
	return &AgentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Agent.
func (c *AgentClient) Update() *AgentUpdate {
	mutation := newAgentMutation(c.config, OpUpdate)
	return &AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgentClient) UpdateOne(a *Agent) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgent(a))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgentClient) UpdateOneID(id int) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgentID(id))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Agent.
func (c *AgentClient) Delete() *AgentDelete {
	mutation := newAgentMutation(c.config, OpDelete)
	return &AgentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AgentClient) DeleteOne(a *Agent) *AgentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AgentClient) DeleteOneID(id int) *AgentDeleteOne {
	builder := c.Delete().Where(agent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgentDeleteOne{builder}
}

// Query returns a query builder for Agent.
func (c *AgentClient) Query() *AgentQuery {
	return &AgentQuery{
		config: c.config,
	}
}

// Get returns a Agent entity by its id.
func (c *AgentClient) Get(ctx context.Context, id int) (*Agent, error) {
	return c.Query().Where(agent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgentClient) GetX(ctx context.Context, id int) *Agent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AgentClient) Hooks() []Hook {
	return c.hooks.Agent
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Create returns a create builder for Customer.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Customer entities.
func (c *CustomerClient) CreateBulk(builders ...*CustomerCreate) *CustomerCreateBulk {
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id int) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomerClient) DeleteOneID(id int) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Query returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{
		config: c.config,
	}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id int) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id int) *Customer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// MerchantClient is a client for the Merchant schema.
type MerchantClient struct {
	config
}

// NewMerchantClient returns a client for the Merchant from the given config.
func NewMerchantClient(c config) *MerchantClient {
	return &MerchantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `merchant.Hooks(f(g(h())))`.
func (c *MerchantClient) Use(hooks ...Hook) {
	c.hooks.Merchant = append(c.hooks.Merchant, hooks...)
}

// Create returns a create builder for Merchant.
func (c *MerchantClient) Create() *MerchantCreate {
	mutation := newMerchantMutation(c.config, OpCreate)
	return &MerchantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Merchant entities.
func (c *MerchantClient) CreateBulk(builders ...*MerchantCreate) *MerchantCreateBulk {
	return &MerchantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Merchant.
func (c *MerchantClient) Update() *MerchantUpdate {
	mutation := newMerchantMutation(c.config, OpUpdate)
	return &MerchantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MerchantClient) UpdateOne(m *Merchant) *MerchantUpdateOne {
	mutation := newMerchantMutation(c.config, OpUpdateOne, withMerchant(m))
	return &MerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MerchantClient) UpdateOneID(id int) *MerchantUpdateOne {
	mutation := newMerchantMutation(c.config, OpUpdateOne, withMerchantID(id))
	return &MerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Merchant.
func (c *MerchantClient) Delete() *MerchantDelete {
	mutation := newMerchantMutation(c.config, OpDelete)
	return &MerchantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MerchantClient) DeleteOne(m *Merchant) *MerchantDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MerchantClient) DeleteOneID(id int) *MerchantDeleteOne {
	builder := c.Delete().Where(merchant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MerchantDeleteOne{builder}
}

// Query returns a query builder for Merchant.
func (c *MerchantClient) Query() *MerchantQuery {
	return &MerchantQuery{
		config: c.config,
	}
}

// Get returns a Merchant entity by its id.
func (c *MerchantClient) Get(ctx context.Context, id int) (*Merchant, error) {
	return c.Query().Where(merchant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MerchantClient) GetX(ctx context.Context, id int) *Merchant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySupplier queries the supplier edge of a Merchant.
func (c *MerchantClient) QuerySupplier(m *Merchant) *SupplierMerchantQuery {
	query := &SupplierMerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchant.Table, merchant.FieldID, id),
			sqlgraph.To(suppliermerchant.Table, suppliermerchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, merchant.SupplierTable, merchant.SupplierColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRetailer queries the retailer edge of a Merchant.
func (c *MerchantClient) QueryRetailer(m *Merchant) *RetailMerchantQuery {
	query := &RetailMerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchant.Table, merchant.FieldID, id),
			sqlgraph.To(retailmerchant.Table, retailmerchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, merchant.RetailerTable, merchant.RetailerColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a Merchant.
func (c *MerchantClient) QueryProducts(m *Merchant) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchant.Table, merchant.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, merchant.ProductsTable, merchant.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MerchantClient) Hooks() []Hook {
	return c.hooks.Merchant
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Create returns a create builder for Product.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMajor queries the major edge of a Product.
func (c *ProductClient) QueryMajor(pr *Product) *ProductCategoryMajorQuery {
	query := &ProductCategoryMajorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productcategorymajor.Table, productcategorymajor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, product.MajorTable, product.MajorPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMinor queries the minor edge of a Product.
func (c *ProductClient) QueryMinor(pr *Product) *ProductCategoryMinorQuery {
	query := &ProductCategoryMinorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productcategoryminor.Table, productcategoryminor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, product.MinorTable, product.MinorPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMechant queries the mechant edge of a Product.
func (c *ProductClient) QueryMechant(pr *Product) *MerchantQuery {
	query := &MerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, product.MechantTable, product.MechantColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupplier queries the supplier edge of a Product.
func (c *ProductClient) QuerySupplier(pr *Product) *SupplierMerchantQuery {
	query := &SupplierMerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(suppliermerchant.Table, suppliermerchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, product.SupplierTable, product.SupplierColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRetailer queries the retailer edge of a Product.
func (c *ProductClient) QueryRetailer(pr *Product) *RetailMerchantQuery {
	query := &RetailMerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(retailmerchant.Table, retailmerchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, product.RetailerTable, product.RetailerColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// ProductCategoryMajorClient is a client for the ProductCategoryMajor schema.
type ProductCategoryMajorClient struct {
	config
}

// NewProductCategoryMajorClient returns a client for the ProductCategoryMajor from the given config.
func NewProductCategoryMajorClient(c config) *ProductCategoryMajorClient {
	return &ProductCategoryMajorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcategorymajor.Hooks(f(g(h())))`.
func (c *ProductCategoryMajorClient) Use(hooks ...Hook) {
	c.hooks.ProductCategoryMajor = append(c.hooks.ProductCategoryMajor, hooks...)
}

// Create returns a create builder for ProductCategoryMajor.
func (c *ProductCategoryMajorClient) Create() *ProductCategoryMajorCreate {
	mutation := newProductCategoryMajorMutation(c.config, OpCreate)
	return &ProductCategoryMajorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductCategoryMajor entities.
func (c *ProductCategoryMajorClient) CreateBulk(builders ...*ProductCategoryMajorCreate) *ProductCategoryMajorCreateBulk {
	return &ProductCategoryMajorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductCategoryMajor.
func (c *ProductCategoryMajorClient) Update() *ProductCategoryMajorUpdate {
	mutation := newProductCategoryMajorMutation(c.config, OpUpdate)
	return &ProductCategoryMajorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductCategoryMajorClient) UpdateOne(pcm *ProductCategoryMajor) *ProductCategoryMajorUpdateOne {
	mutation := newProductCategoryMajorMutation(c.config, OpUpdateOne, withProductCategoryMajor(pcm))
	return &ProductCategoryMajorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductCategoryMajorClient) UpdateOneID(id int) *ProductCategoryMajorUpdateOne {
	mutation := newProductCategoryMajorMutation(c.config, OpUpdateOne, withProductCategoryMajorID(id))
	return &ProductCategoryMajorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductCategoryMajor.
func (c *ProductCategoryMajorClient) Delete() *ProductCategoryMajorDelete {
	mutation := newProductCategoryMajorMutation(c.config, OpDelete)
	return &ProductCategoryMajorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductCategoryMajorClient) DeleteOne(pcm *ProductCategoryMajor) *ProductCategoryMajorDeleteOne {
	return c.DeleteOneID(pcm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductCategoryMajorClient) DeleteOneID(id int) *ProductCategoryMajorDeleteOne {
	builder := c.Delete().Where(productcategorymajor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductCategoryMajorDeleteOne{builder}
}

// Query returns a query builder for ProductCategoryMajor.
func (c *ProductCategoryMajorClient) Query() *ProductCategoryMajorQuery {
	return &ProductCategoryMajorQuery{
		config: c.config,
	}
}

// Get returns a ProductCategoryMajor entity by its id.
func (c *ProductCategoryMajorClient) Get(ctx context.Context, id int) (*ProductCategoryMajor, error) {
	return c.Query().Where(productcategorymajor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductCategoryMajorClient) GetX(ctx context.Context, id int) *ProductCategoryMajor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMinors queries the minors edge of a ProductCategoryMajor.
func (c *ProductCategoryMajorClient) QueryMinors(pcm *ProductCategoryMajor) *ProductCategoryMinorQuery {
	query := &ProductCategoryMinorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategorymajor.Table, productcategorymajor.FieldID, id),
			sqlgraph.To(productcategoryminor.Table, productcategoryminor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productcategorymajor.MinorsTable, productcategorymajor.MinorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a ProductCategoryMajor.
func (c *ProductCategoryMajorClient) QueryProducts(pcm *ProductCategoryMajor) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategorymajor.Table, productcategorymajor.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productcategorymajor.ProductsTable, productcategorymajor.ProductsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductCategoryMajorClient) Hooks() []Hook {
	return c.hooks.ProductCategoryMajor
}

// ProductCategoryMinorClient is a client for the ProductCategoryMinor schema.
type ProductCategoryMinorClient struct {
	config
}

// NewProductCategoryMinorClient returns a client for the ProductCategoryMinor from the given config.
func NewProductCategoryMinorClient(c config) *ProductCategoryMinorClient {
	return &ProductCategoryMinorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcategoryminor.Hooks(f(g(h())))`.
func (c *ProductCategoryMinorClient) Use(hooks ...Hook) {
	c.hooks.ProductCategoryMinor = append(c.hooks.ProductCategoryMinor, hooks...)
}

// Create returns a create builder for ProductCategoryMinor.
func (c *ProductCategoryMinorClient) Create() *ProductCategoryMinorCreate {
	mutation := newProductCategoryMinorMutation(c.config, OpCreate)
	return &ProductCategoryMinorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductCategoryMinor entities.
func (c *ProductCategoryMinorClient) CreateBulk(builders ...*ProductCategoryMinorCreate) *ProductCategoryMinorCreateBulk {
	return &ProductCategoryMinorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductCategoryMinor.
func (c *ProductCategoryMinorClient) Update() *ProductCategoryMinorUpdate {
	mutation := newProductCategoryMinorMutation(c.config, OpUpdate)
	return &ProductCategoryMinorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductCategoryMinorClient) UpdateOne(pcm *ProductCategoryMinor) *ProductCategoryMinorUpdateOne {
	mutation := newProductCategoryMinorMutation(c.config, OpUpdateOne, withProductCategoryMinor(pcm))
	return &ProductCategoryMinorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductCategoryMinorClient) UpdateOneID(id int) *ProductCategoryMinorUpdateOne {
	mutation := newProductCategoryMinorMutation(c.config, OpUpdateOne, withProductCategoryMinorID(id))
	return &ProductCategoryMinorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductCategoryMinor.
func (c *ProductCategoryMinorClient) Delete() *ProductCategoryMinorDelete {
	mutation := newProductCategoryMinorMutation(c.config, OpDelete)
	return &ProductCategoryMinorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductCategoryMinorClient) DeleteOne(pcm *ProductCategoryMinor) *ProductCategoryMinorDeleteOne {
	return c.DeleteOneID(pcm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductCategoryMinorClient) DeleteOneID(id int) *ProductCategoryMinorDeleteOne {
	builder := c.Delete().Where(productcategoryminor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductCategoryMinorDeleteOne{builder}
}

// Query returns a query builder for ProductCategoryMinor.
func (c *ProductCategoryMinorClient) Query() *ProductCategoryMinorQuery {
	return &ProductCategoryMinorQuery{
		config: c.config,
	}
}

// Get returns a ProductCategoryMinor entity by its id.
func (c *ProductCategoryMinorClient) Get(ctx context.Context, id int) (*ProductCategoryMinor, error) {
	return c.Query().Where(productcategoryminor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductCategoryMinorClient) GetX(ctx context.Context, id int) *ProductCategoryMinor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProducts queries the products edge of a ProductCategoryMinor.
func (c *ProductCategoryMinorClient) QueryProducts(pcm *ProductCategoryMinor) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategoryminor.Table, productcategoryminor.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productcategoryminor.ProductsTable, productcategoryminor.ProductsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMajor queries the major edge of a ProductCategoryMinor.
func (c *ProductCategoryMinorClient) QueryMajor(pcm *ProductCategoryMinor) *ProductCategoryMajorQuery {
	query := &ProductCategoryMajorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategoryminor.Table, productcategoryminor.FieldID, id),
			sqlgraph.To(productcategorymajor.Table, productcategorymajor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, productcategoryminor.MajorTable, productcategoryminor.MajorPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductCategoryMinorClient) Hooks() []Hook {
	return c.hooks.ProductCategoryMinor
}

// RetailMerchantClient is a client for the RetailMerchant schema.
type RetailMerchantClient struct {
	config
}

// NewRetailMerchantClient returns a client for the RetailMerchant from the given config.
func NewRetailMerchantClient(c config) *RetailMerchantClient {
	return &RetailMerchantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `retailmerchant.Hooks(f(g(h())))`.
func (c *RetailMerchantClient) Use(hooks ...Hook) {
	c.hooks.RetailMerchant = append(c.hooks.RetailMerchant, hooks...)
}

// Create returns a create builder for RetailMerchant.
func (c *RetailMerchantClient) Create() *RetailMerchantCreate {
	mutation := newRetailMerchantMutation(c.config, OpCreate)
	return &RetailMerchantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RetailMerchant entities.
func (c *RetailMerchantClient) CreateBulk(builders ...*RetailMerchantCreate) *RetailMerchantCreateBulk {
	return &RetailMerchantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RetailMerchant.
func (c *RetailMerchantClient) Update() *RetailMerchantUpdate {
	mutation := newRetailMerchantMutation(c.config, OpUpdate)
	return &RetailMerchantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RetailMerchantClient) UpdateOne(rm *RetailMerchant) *RetailMerchantUpdateOne {
	mutation := newRetailMerchantMutation(c.config, OpUpdateOne, withRetailMerchant(rm))
	return &RetailMerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RetailMerchantClient) UpdateOneID(id int) *RetailMerchantUpdateOne {
	mutation := newRetailMerchantMutation(c.config, OpUpdateOne, withRetailMerchantID(id))
	return &RetailMerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RetailMerchant.
func (c *RetailMerchantClient) Delete() *RetailMerchantDelete {
	mutation := newRetailMerchantMutation(c.config, OpDelete)
	return &RetailMerchantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RetailMerchantClient) DeleteOne(rm *RetailMerchant) *RetailMerchantDeleteOne {
	return c.DeleteOneID(rm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RetailMerchantClient) DeleteOneID(id int) *RetailMerchantDeleteOne {
	builder := c.Delete().Where(retailmerchant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RetailMerchantDeleteOne{builder}
}

// Query returns a query builder for RetailMerchant.
func (c *RetailMerchantClient) Query() *RetailMerchantQuery {
	return &RetailMerchantQuery{
		config: c.config,
	}
}

// Get returns a RetailMerchant entity by its id.
func (c *RetailMerchantClient) Get(ctx context.Context, id int) (*RetailMerchant, error) {
	return c.Query().Where(retailmerchant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RetailMerchantClient) GetX(ctx context.Context, id int) *RetailMerchant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProducts queries the products edge of a RetailMerchant.
func (c *RetailMerchantClient) QueryProducts(rm *RetailMerchant) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(retailmerchant.Table, retailmerchant.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, retailmerchant.ProductsTable, retailmerchant.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMerchant queries the merchant edge of a RetailMerchant.
func (c *RetailMerchantClient) QueryMerchant(rm *RetailMerchant) *MerchantQuery {
	query := &MerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(retailmerchant.Table, retailmerchant.FieldID, id),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, retailmerchant.MerchantTable, retailmerchant.MerchantColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RetailMerchantClient) Hooks() []Hook {
	return c.hooks.RetailMerchant
}

// SupplierMerchantClient is a client for the SupplierMerchant schema.
type SupplierMerchantClient struct {
	config
}

// NewSupplierMerchantClient returns a client for the SupplierMerchant from the given config.
func NewSupplierMerchantClient(c config) *SupplierMerchantClient {
	return &SupplierMerchantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `suppliermerchant.Hooks(f(g(h())))`.
func (c *SupplierMerchantClient) Use(hooks ...Hook) {
	c.hooks.SupplierMerchant = append(c.hooks.SupplierMerchant, hooks...)
}

// Create returns a create builder for SupplierMerchant.
func (c *SupplierMerchantClient) Create() *SupplierMerchantCreate {
	mutation := newSupplierMerchantMutation(c.config, OpCreate)
	return &SupplierMerchantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SupplierMerchant entities.
func (c *SupplierMerchantClient) CreateBulk(builders ...*SupplierMerchantCreate) *SupplierMerchantCreateBulk {
	return &SupplierMerchantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SupplierMerchant.
func (c *SupplierMerchantClient) Update() *SupplierMerchantUpdate {
	mutation := newSupplierMerchantMutation(c.config, OpUpdate)
	return &SupplierMerchantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SupplierMerchantClient) UpdateOne(sm *SupplierMerchant) *SupplierMerchantUpdateOne {
	mutation := newSupplierMerchantMutation(c.config, OpUpdateOne, withSupplierMerchant(sm))
	return &SupplierMerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SupplierMerchantClient) UpdateOneID(id int) *SupplierMerchantUpdateOne {
	mutation := newSupplierMerchantMutation(c.config, OpUpdateOne, withSupplierMerchantID(id))
	return &SupplierMerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SupplierMerchant.
func (c *SupplierMerchantClient) Delete() *SupplierMerchantDelete {
	mutation := newSupplierMerchantMutation(c.config, OpDelete)
	return &SupplierMerchantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SupplierMerchantClient) DeleteOne(sm *SupplierMerchant) *SupplierMerchantDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SupplierMerchantClient) DeleteOneID(id int) *SupplierMerchantDeleteOne {
	builder := c.Delete().Where(suppliermerchant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SupplierMerchantDeleteOne{builder}
}

// Query returns a query builder for SupplierMerchant.
func (c *SupplierMerchantClient) Query() *SupplierMerchantQuery {
	return &SupplierMerchantQuery{
		config: c.config,
	}
}

// Get returns a SupplierMerchant entity by its id.
func (c *SupplierMerchantClient) Get(ctx context.Context, id int) (*SupplierMerchant, error) {
	return c.Query().Where(suppliermerchant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SupplierMerchantClient) GetX(ctx context.Context, id int) *SupplierMerchant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProducts queries the products edge of a SupplierMerchant.
func (c *SupplierMerchantClient) QueryProducts(sm *SupplierMerchant) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(suppliermerchant.Table, suppliermerchant.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, suppliermerchant.ProductsTable, suppliermerchant.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMerchant queries the merchant edge of a SupplierMerchant.
func (c *SupplierMerchantClient) QueryMerchant(sm *SupplierMerchant) *MerchantQuery {
	query := &MerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(suppliermerchant.Table, suppliermerchant.FieldID, id),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, suppliermerchant.MerchantTable, suppliermerchant.MerchantColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SupplierMerchantClient) Hooks() []Hook {
	return c.hooks.SupplierMerchant
}
