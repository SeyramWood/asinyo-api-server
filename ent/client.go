// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/SeyramWood/ent/migrate"

	"github.com/SeyramWood/ent/address"
	"github.com/SeyramWood/ent/admin"
	"github.com/SeyramWood/ent/agent"
	"github.com/SeyramWood/ent/agentrequest"
	"github.com/SeyramWood/ent/businesscustomer"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/favourite"
	"github.com/SeyramWood/ent/individualcustomer"
	"github.com/SeyramWood/ent/logistic"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/merchantstore"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/orderdetail"
	"github.com/SeyramWood/ent/permission"
	"github.com/SeyramWood/ent/pickupstation"
	"github.com/SeyramWood/ent/product"
	"github.com/SeyramWood/ent/productcategorymajor"
	"github.com/SeyramWood/ent/productcategoryminor"
	"github.com/SeyramWood/ent/retailmerchant"
	"github.com/SeyramWood/ent/role"
	"github.com/SeyramWood/ent/suppliermerchant"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Address is the client for interacting with the Address builders.
	Address *AddressClient
	// Admin is the client for interacting with the Admin builders.
	Admin *AdminClient
	// Agent is the client for interacting with the Agent builders.
	Agent *AgentClient
	// AgentRequest is the client for interacting with the AgentRequest builders.
	AgentRequest *AgentRequestClient
	// BusinessCustomer is the client for interacting with the BusinessCustomer builders.
	BusinessCustomer *BusinessCustomerClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// Favourite is the client for interacting with the Favourite builders.
	Favourite *FavouriteClient
	// IndividualCustomer is the client for interacting with the IndividualCustomer builders.
	IndividualCustomer *IndividualCustomerClient
	// Logistic is the client for interacting with the Logistic builders.
	Logistic *LogisticClient
	// Merchant is the client for interacting with the Merchant builders.
	Merchant *MerchantClient
	// MerchantStore is the client for interacting with the MerchantStore builders.
	MerchantStore *MerchantStoreClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderDetail is the client for interacting with the OrderDetail builders.
	OrderDetail *OrderDetailClient
	// Permission is the client for interacting with the Permission builders.
	Permission *PermissionClient
	// PickupStation is the client for interacting with the PickupStation builders.
	PickupStation *PickupStationClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductCategoryMajor is the client for interacting with the ProductCategoryMajor builders.
	ProductCategoryMajor *ProductCategoryMajorClient
	// ProductCategoryMinor is the client for interacting with the ProductCategoryMinor builders.
	ProductCategoryMinor *ProductCategoryMinorClient
	// RetailMerchant is the client for interacting with the RetailMerchant builders.
	RetailMerchant *RetailMerchantClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// SupplierMerchant is the client for interacting with the SupplierMerchant builders.
	SupplierMerchant *SupplierMerchantClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Address = NewAddressClient(c.config)
	c.Admin = NewAdminClient(c.config)
	c.Agent = NewAgentClient(c.config)
	c.AgentRequest = NewAgentRequestClient(c.config)
	c.BusinessCustomer = NewBusinessCustomerClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.Favourite = NewFavouriteClient(c.config)
	c.IndividualCustomer = NewIndividualCustomerClient(c.config)
	c.Logistic = NewLogisticClient(c.config)
	c.Merchant = NewMerchantClient(c.config)
	c.MerchantStore = NewMerchantStoreClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderDetail = NewOrderDetailClient(c.config)
	c.Permission = NewPermissionClient(c.config)
	c.PickupStation = NewPickupStationClient(c.config)
	c.Product = NewProductClient(c.config)
	c.ProductCategoryMajor = NewProductCategoryMajorClient(c.config)
	c.ProductCategoryMinor = NewProductCategoryMinorClient(c.config)
	c.RetailMerchant = NewRetailMerchantClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.SupplierMerchant = NewSupplierMerchantClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Address:              NewAddressClient(cfg),
		Admin:                NewAdminClient(cfg),
		Agent:                NewAgentClient(cfg),
		AgentRequest:         NewAgentRequestClient(cfg),
		BusinessCustomer:     NewBusinessCustomerClient(cfg),
		Customer:             NewCustomerClient(cfg),
		Favourite:            NewFavouriteClient(cfg),
		IndividualCustomer:   NewIndividualCustomerClient(cfg),
		Logistic:             NewLogisticClient(cfg),
		Merchant:             NewMerchantClient(cfg),
		MerchantStore:        NewMerchantStoreClient(cfg),
		Order:                NewOrderClient(cfg),
		OrderDetail:          NewOrderDetailClient(cfg),
		Permission:           NewPermissionClient(cfg),
		PickupStation:        NewPickupStationClient(cfg),
		Product:              NewProductClient(cfg),
		ProductCategoryMajor: NewProductCategoryMajorClient(cfg),
		ProductCategoryMinor: NewProductCategoryMinorClient(cfg),
		RetailMerchant:       NewRetailMerchantClient(cfg),
		Role:                 NewRoleClient(cfg),
		SupplierMerchant:     NewSupplierMerchantClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Address:              NewAddressClient(cfg),
		Admin:                NewAdminClient(cfg),
		Agent:                NewAgentClient(cfg),
		AgentRequest:         NewAgentRequestClient(cfg),
		BusinessCustomer:     NewBusinessCustomerClient(cfg),
		Customer:             NewCustomerClient(cfg),
		Favourite:            NewFavouriteClient(cfg),
		IndividualCustomer:   NewIndividualCustomerClient(cfg),
		Logistic:             NewLogisticClient(cfg),
		Merchant:             NewMerchantClient(cfg),
		MerchantStore:        NewMerchantStoreClient(cfg),
		Order:                NewOrderClient(cfg),
		OrderDetail:          NewOrderDetailClient(cfg),
		Permission:           NewPermissionClient(cfg),
		PickupStation:        NewPickupStationClient(cfg),
		Product:              NewProductClient(cfg),
		ProductCategoryMajor: NewProductCategoryMajorClient(cfg),
		ProductCategoryMinor: NewProductCategoryMinorClient(cfg),
		RetailMerchant:       NewRetailMerchantClient(cfg),
		Role:                 NewRoleClient(cfg),
		SupplierMerchant:     NewSupplierMerchantClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Address.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Address.Use(hooks...)
	c.Admin.Use(hooks...)
	c.Agent.Use(hooks...)
	c.AgentRequest.Use(hooks...)
	c.BusinessCustomer.Use(hooks...)
	c.Customer.Use(hooks...)
	c.Favourite.Use(hooks...)
	c.IndividualCustomer.Use(hooks...)
	c.Logistic.Use(hooks...)
	c.Merchant.Use(hooks...)
	c.MerchantStore.Use(hooks...)
	c.Order.Use(hooks...)
	c.OrderDetail.Use(hooks...)
	c.Permission.Use(hooks...)
	c.PickupStation.Use(hooks...)
	c.Product.Use(hooks...)
	c.ProductCategoryMajor.Use(hooks...)
	c.ProductCategoryMinor.Use(hooks...)
	c.RetailMerchant.Use(hooks...)
	c.Role.Use(hooks...)
	c.SupplierMerchant.Use(hooks...)
}

// AddressClient is a client for the Address schema.
type AddressClient struct {
	config
}

// NewAddressClient returns a client for the Address from the given config.
func NewAddressClient(c config) *AddressClient {
	return &AddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `address.Hooks(f(g(h())))`.
func (c *AddressClient) Use(hooks ...Hook) {
	c.hooks.Address = append(c.hooks.Address, hooks...)
}

// Create returns a builder for creating a Address entity.
func (c *AddressClient) Create() *AddressCreate {
	mutation := newAddressMutation(c.config, OpCreate)
	return &AddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Address entities.
func (c *AddressClient) CreateBulk(builders ...*AddressCreate) *AddressCreateBulk {
	return &AddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Address.
func (c *AddressClient) Update() *AddressUpdate {
	mutation := newAddressMutation(c.config, OpUpdate)
	return &AddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddressClient) UpdateOne(a *Address) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddress(a))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddressClient) UpdateOneID(id int) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddressID(id))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Address.
func (c *AddressClient) Delete() *AddressDelete {
	mutation := newAddressMutation(c.config, OpDelete)
	return &AddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AddressClient) DeleteOne(a *Address) *AddressDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AddressClient) DeleteOneID(id int) *AddressDeleteOne {
	builder := c.Delete().Where(address.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddressDeleteOne{builder}
}

// Query returns a query builder for Address.
func (c *AddressClient) Query() *AddressQuery {
	return &AddressQuery{
		config: c.config,
	}
}

// Get returns a Address entity by its id.
func (c *AddressClient) Get(ctx context.Context, id int) (*Address, error) {
	return c.Query().Where(address.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddressClient) GetX(ctx context.Context, id int) *Address {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMerchant queries the merchant edge of a Address.
func (c *AddressClient) QueryMerchant(a *Address) *MerchantQuery {
	query := &MerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, address.MerchantTable, address.MerchantColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a Address.
func (c *AddressClient) QueryAgent(a *Address) *AgentQuery {
	query := &AgentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, address.AgentTable, address.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomer queries the customer edge of a Address.
func (c *AddressClient) QueryCustomer(a *Address) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, address.CustomerTable, address.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Address.
func (c *AddressClient) QueryOrders(a *Address) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, address.OrdersTable, address.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AddressClient) Hooks() []Hook {
	return c.hooks.Address
}

// AdminClient is a client for the Admin schema.
type AdminClient struct {
	config
}

// NewAdminClient returns a client for the Admin from the given config.
func NewAdminClient(c config) *AdminClient {
	return &AdminClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `admin.Hooks(f(g(h())))`.
func (c *AdminClient) Use(hooks ...Hook) {
	c.hooks.Admin = append(c.hooks.Admin, hooks...)
}

// Create returns a builder for creating a Admin entity.
func (c *AdminClient) Create() *AdminCreate {
	mutation := newAdminMutation(c.config, OpCreate)
	return &AdminCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Admin entities.
func (c *AdminClient) CreateBulk(builders ...*AdminCreate) *AdminCreateBulk {
	return &AdminCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Admin.
func (c *AdminClient) Update() *AdminUpdate {
	mutation := newAdminMutation(c.config, OpUpdate)
	return &AdminUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminClient) UpdateOne(a *Admin) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdmin(a))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminClient) UpdateOneID(id int) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdminID(id))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Admin.
func (c *AdminClient) Delete() *AdminDelete {
	mutation := newAdminMutation(c.config, OpDelete)
	return &AdminDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminClient) DeleteOne(a *Admin) *AdminDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AdminClient) DeleteOneID(id int) *AdminDeleteOne {
	builder := c.Delete().Where(admin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminDeleteOne{builder}
}

// Query returns a query builder for Admin.
func (c *AdminClient) Query() *AdminQuery {
	return &AdminQuery{
		config: c.config,
	}
}

// Get returns a Admin entity by its id.
func (c *AdminClient) Get(ctx context.Context, id int) (*Admin, error) {
	return c.Query().Where(admin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminClient) GetX(ctx context.Context, id int) *Admin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a Admin.
func (c *AdminClient) QueryRoles(a *Admin) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, admin.RolesTable, admin.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminClient) Hooks() []Hook {
	return c.hooks.Admin
}

// AgentClient is a client for the Agent schema.
type AgentClient struct {
	config
}

// NewAgentClient returns a client for the Agent from the given config.
func NewAgentClient(c config) *AgentClient {
	return &AgentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agent.Hooks(f(g(h())))`.
func (c *AgentClient) Use(hooks ...Hook) {
	c.hooks.Agent = append(c.hooks.Agent, hooks...)
}

// Create returns a builder for creating a Agent entity.
func (c *AgentClient) Create() *AgentCreate {
	mutation := newAgentMutation(c.config, OpCreate)
	return &AgentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Agent entities.
func (c *AgentClient) CreateBulk(builders ...*AgentCreate) *AgentCreateBulk {
	return &AgentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Agent.
func (c *AgentClient) Update() *AgentUpdate {
	mutation := newAgentMutation(c.config, OpUpdate)
	return &AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgentClient) UpdateOne(a *Agent) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgent(a))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgentClient) UpdateOneID(id int) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgentID(id))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Agent.
func (c *AgentClient) Delete() *AgentDelete {
	mutation := newAgentMutation(c.config, OpDelete)
	return &AgentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AgentClient) DeleteOne(a *Agent) *AgentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AgentClient) DeleteOneID(id int) *AgentDeleteOne {
	builder := c.Delete().Where(agent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgentDeleteOne{builder}
}

// Query returns a query builder for Agent.
func (c *AgentClient) Query() *AgentQuery {
	return &AgentQuery{
		config: c.config,
	}
}

// Get returns a Agent entity by its id.
func (c *AgentClient) Get(ctx context.Context, id int) (*Agent, error) {
	return c.Query().Where(agent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgentClient) GetX(ctx context.Context, id int) *Agent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAddresses queries the addresses edge of a Agent.
func (c *AgentClient) QueryAddresses(a *Agent) *AddressQuery {
	query := &AddressQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.AddressesTable, agent.AddressesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Agent.
func (c *AgentClient) QueryOrders(a *Agent) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.OrdersTable, agent.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavourites queries the favourites edge of a Agent.
func (c *AgentClient) QueryFavourites(a *Agent) *FavouriteQuery {
	query := &FavouriteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, id),
			sqlgraph.To(favourite.Table, favourite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.FavouritesTable, agent.FavouritesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Agent.
func (c *AgentClient) QueryStore(a *Agent) *MerchantStoreQuery {
	query := &MerchantStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, id),
			sqlgraph.To(merchantstore.Table, merchantstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.StoreTable, agent.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequests queries the requests edge of a Agent.
func (c *AgentClient) QueryRequests(a *Agent) *AgentRequestQuery {
	query := &AgentRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, id),
			sqlgraph.To(agentrequest.Table, agentrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.RequestsTable, agent.RequestsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AgentClient) Hooks() []Hook {
	return c.hooks.Agent
}

// AgentRequestClient is a client for the AgentRequest schema.
type AgentRequestClient struct {
	config
}

// NewAgentRequestClient returns a client for the AgentRequest from the given config.
func NewAgentRequestClient(c config) *AgentRequestClient {
	return &AgentRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agentrequest.Hooks(f(g(h())))`.
func (c *AgentRequestClient) Use(hooks ...Hook) {
	c.hooks.AgentRequest = append(c.hooks.AgentRequest, hooks...)
}

// Create returns a builder for creating a AgentRequest entity.
func (c *AgentRequestClient) Create() *AgentRequestCreate {
	mutation := newAgentRequestMutation(c.config, OpCreate)
	return &AgentRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AgentRequest entities.
func (c *AgentRequestClient) CreateBulk(builders ...*AgentRequestCreate) *AgentRequestCreateBulk {
	return &AgentRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AgentRequest.
func (c *AgentRequestClient) Update() *AgentRequestUpdate {
	mutation := newAgentRequestMutation(c.config, OpUpdate)
	return &AgentRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgentRequestClient) UpdateOne(ar *AgentRequest) *AgentRequestUpdateOne {
	mutation := newAgentRequestMutation(c.config, OpUpdateOne, withAgentRequest(ar))
	return &AgentRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgentRequestClient) UpdateOneID(id int) *AgentRequestUpdateOne {
	mutation := newAgentRequestMutation(c.config, OpUpdateOne, withAgentRequestID(id))
	return &AgentRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AgentRequest.
func (c *AgentRequestClient) Delete() *AgentRequestDelete {
	mutation := newAgentRequestMutation(c.config, OpDelete)
	return &AgentRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AgentRequestClient) DeleteOne(ar *AgentRequest) *AgentRequestDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AgentRequestClient) DeleteOneID(id int) *AgentRequestDeleteOne {
	builder := c.Delete().Where(agentrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgentRequestDeleteOne{builder}
}

// Query returns a query builder for AgentRequest.
func (c *AgentRequestClient) Query() *AgentRequestQuery {
	return &AgentRequestQuery{
		config: c.config,
	}
}

// Get returns a AgentRequest entity by its id.
func (c *AgentRequestClient) Get(ctx context.Context, id int) (*AgentRequest, error) {
	return c.Query().Where(agentrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgentRequestClient) GetX(ctx context.Context, id int) *AgentRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AgentRequestClient) Hooks() []Hook {
	return c.hooks.AgentRequest
}

// BusinessCustomerClient is a client for the BusinessCustomer schema.
type BusinessCustomerClient struct {
	config
}

// NewBusinessCustomerClient returns a client for the BusinessCustomer from the given config.
func NewBusinessCustomerClient(c config) *BusinessCustomerClient {
	return &BusinessCustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `businesscustomer.Hooks(f(g(h())))`.
func (c *BusinessCustomerClient) Use(hooks ...Hook) {
	c.hooks.BusinessCustomer = append(c.hooks.BusinessCustomer, hooks...)
}

// Create returns a builder for creating a BusinessCustomer entity.
func (c *BusinessCustomerClient) Create() *BusinessCustomerCreate {
	mutation := newBusinessCustomerMutation(c.config, OpCreate)
	return &BusinessCustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BusinessCustomer entities.
func (c *BusinessCustomerClient) CreateBulk(builders ...*BusinessCustomerCreate) *BusinessCustomerCreateBulk {
	return &BusinessCustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BusinessCustomer.
func (c *BusinessCustomerClient) Update() *BusinessCustomerUpdate {
	mutation := newBusinessCustomerMutation(c.config, OpUpdate)
	return &BusinessCustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BusinessCustomerClient) UpdateOne(bc *BusinessCustomer) *BusinessCustomerUpdateOne {
	mutation := newBusinessCustomerMutation(c.config, OpUpdateOne, withBusinessCustomer(bc))
	return &BusinessCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BusinessCustomerClient) UpdateOneID(id int) *BusinessCustomerUpdateOne {
	mutation := newBusinessCustomerMutation(c.config, OpUpdateOne, withBusinessCustomerID(id))
	return &BusinessCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BusinessCustomer.
func (c *BusinessCustomerClient) Delete() *BusinessCustomerDelete {
	mutation := newBusinessCustomerMutation(c.config, OpDelete)
	return &BusinessCustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BusinessCustomerClient) DeleteOne(bc *BusinessCustomer) *BusinessCustomerDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *BusinessCustomerClient) DeleteOneID(id int) *BusinessCustomerDeleteOne {
	builder := c.Delete().Where(businesscustomer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BusinessCustomerDeleteOne{builder}
}

// Query returns a query builder for BusinessCustomer.
func (c *BusinessCustomerClient) Query() *BusinessCustomerQuery {
	return &BusinessCustomerQuery{
		config: c.config,
	}
}

// Get returns a BusinessCustomer entity by its id.
func (c *BusinessCustomerClient) Get(ctx context.Context, id int) (*BusinessCustomer, error) {
	return c.Query().Where(businesscustomer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BusinessCustomerClient) GetX(ctx context.Context, id int) *BusinessCustomer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a BusinessCustomer.
func (c *BusinessCustomerClient) QueryCustomer(bc *BusinessCustomer) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(businesscustomer.Table, businesscustomer.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, businesscustomer.CustomerTable, businesscustomer.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BusinessCustomerClient) Hooks() []Hook {
	return c.hooks.BusinessCustomer
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Create returns a builder for creating a Customer entity.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Customer entities.
func (c *CustomerClient) CreateBulk(builders ...*CustomerCreate) *CustomerCreateBulk {
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id int) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CustomerClient) DeleteOneID(id int) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Query returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{
		config: c.config,
	}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id int) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id int) *Customer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusiness queries the business edge of a Customer.
func (c *CustomerClient) QueryBusiness(cu *Customer) *BusinessCustomerQuery {
	query := &BusinessCustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(businesscustomer.Table, businesscustomer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, customer.BusinessTable, customer.BusinessColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIndividual queries the individual edge of a Customer.
func (c *CustomerClient) QueryIndividual(cu *Customer) *IndividualCustomerQuery {
	query := &IndividualCustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(individualcustomer.Table, individualcustomer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, customer.IndividualTable, customer.IndividualColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddresses queries the addresses edge of a Customer.
func (c *CustomerClient) QueryAddresses(cu *Customer) *AddressQuery {
	query := &AddressQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.AddressesTable, customer.AddressesColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Customer.
func (c *CustomerClient) QueryOrders(cu *Customer) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.OrdersTable, customer.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavourites queries the favourites edge of a Customer.
func (c *CustomerClient) QueryFavourites(cu *Customer) *FavouriteQuery {
	query := &FavouriteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(favourite.Table, favourite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.FavouritesTable, customer.FavouritesColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// FavouriteClient is a client for the Favourite schema.
type FavouriteClient struct {
	config
}

// NewFavouriteClient returns a client for the Favourite from the given config.
func NewFavouriteClient(c config) *FavouriteClient {
	return &FavouriteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `favourite.Hooks(f(g(h())))`.
func (c *FavouriteClient) Use(hooks ...Hook) {
	c.hooks.Favourite = append(c.hooks.Favourite, hooks...)
}

// Create returns a builder for creating a Favourite entity.
func (c *FavouriteClient) Create() *FavouriteCreate {
	mutation := newFavouriteMutation(c.config, OpCreate)
	return &FavouriteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Favourite entities.
func (c *FavouriteClient) CreateBulk(builders ...*FavouriteCreate) *FavouriteCreateBulk {
	return &FavouriteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Favourite.
func (c *FavouriteClient) Update() *FavouriteUpdate {
	mutation := newFavouriteMutation(c.config, OpUpdate)
	return &FavouriteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FavouriteClient) UpdateOne(f *Favourite) *FavouriteUpdateOne {
	mutation := newFavouriteMutation(c.config, OpUpdateOne, withFavourite(f))
	return &FavouriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FavouriteClient) UpdateOneID(id int) *FavouriteUpdateOne {
	mutation := newFavouriteMutation(c.config, OpUpdateOne, withFavouriteID(id))
	return &FavouriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Favourite.
func (c *FavouriteClient) Delete() *FavouriteDelete {
	mutation := newFavouriteMutation(c.config, OpDelete)
	return &FavouriteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FavouriteClient) DeleteOne(f *Favourite) *FavouriteDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *FavouriteClient) DeleteOneID(id int) *FavouriteDeleteOne {
	builder := c.Delete().Where(favourite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FavouriteDeleteOne{builder}
}

// Query returns a query builder for Favourite.
func (c *FavouriteClient) Query() *FavouriteQuery {
	return &FavouriteQuery{
		config: c.config,
	}
}

// Get returns a Favourite entity by its id.
func (c *FavouriteClient) Get(ctx context.Context, id int) (*Favourite, error) {
	return c.Query().Where(favourite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FavouriteClient) GetX(ctx context.Context, id int) *Favourite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMerchant queries the merchant edge of a Favourite.
func (c *FavouriteClient) QueryMerchant(f *Favourite) *MerchantQuery {
	query := &MerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(favourite.Table, favourite.FieldID, id),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, favourite.MerchantTable, favourite.MerchantColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a Favourite.
func (c *FavouriteClient) QueryAgent(f *Favourite) *AgentQuery {
	query := &AgentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(favourite.Table, favourite.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, favourite.AgentTable, favourite.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomer queries the customer edge of a Favourite.
func (c *FavouriteClient) QueryCustomer(f *Favourite) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(favourite.Table, favourite.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, favourite.CustomerTable, favourite.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a Favourite.
func (c *FavouriteClient) QueryProduct(f *Favourite) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(favourite.Table, favourite.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, favourite.ProductTable, favourite.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FavouriteClient) Hooks() []Hook {
	return c.hooks.Favourite
}

// IndividualCustomerClient is a client for the IndividualCustomer schema.
type IndividualCustomerClient struct {
	config
}

// NewIndividualCustomerClient returns a client for the IndividualCustomer from the given config.
func NewIndividualCustomerClient(c config) *IndividualCustomerClient {
	return &IndividualCustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `individualcustomer.Hooks(f(g(h())))`.
func (c *IndividualCustomerClient) Use(hooks ...Hook) {
	c.hooks.IndividualCustomer = append(c.hooks.IndividualCustomer, hooks...)
}

// Create returns a builder for creating a IndividualCustomer entity.
func (c *IndividualCustomerClient) Create() *IndividualCustomerCreate {
	mutation := newIndividualCustomerMutation(c.config, OpCreate)
	return &IndividualCustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IndividualCustomer entities.
func (c *IndividualCustomerClient) CreateBulk(builders ...*IndividualCustomerCreate) *IndividualCustomerCreateBulk {
	return &IndividualCustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IndividualCustomer.
func (c *IndividualCustomerClient) Update() *IndividualCustomerUpdate {
	mutation := newIndividualCustomerMutation(c.config, OpUpdate)
	return &IndividualCustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IndividualCustomerClient) UpdateOne(ic *IndividualCustomer) *IndividualCustomerUpdateOne {
	mutation := newIndividualCustomerMutation(c.config, OpUpdateOne, withIndividualCustomer(ic))
	return &IndividualCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IndividualCustomerClient) UpdateOneID(id int) *IndividualCustomerUpdateOne {
	mutation := newIndividualCustomerMutation(c.config, OpUpdateOne, withIndividualCustomerID(id))
	return &IndividualCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IndividualCustomer.
func (c *IndividualCustomerClient) Delete() *IndividualCustomerDelete {
	mutation := newIndividualCustomerMutation(c.config, OpDelete)
	return &IndividualCustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IndividualCustomerClient) DeleteOne(ic *IndividualCustomer) *IndividualCustomerDeleteOne {
	return c.DeleteOneID(ic.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *IndividualCustomerClient) DeleteOneID(id int) *IndividualCustomerDeleteOne {
	builder := c.Delete().Where(individualcustomer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IndividualCustomerDeleteOne{builder}
}

// Query returns a query builder for IndividualCustomer.
func (c *IndividualCustomerClient) Query() *IndividualCustomerQuery {
	return &IndividualCustomerQuery{
		config: c.config,
	}
}

// Get returns a IndividualCustomer entity by its id.
func (c *IndividualCustomerClient) Get(ctx context.Context, id int) (*IndividualCustomer, error) {
	return c.Query().Where(individualcustomer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IndividualCustomerClient) GetX(ctx context.Context, id int) *IndividualCustomer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a IndividualCustomer.
func (c *IndividualCustomerClient) QueryCustomer(ic *IndividualCustomer) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(individualcustomer.Table, individualcustomer.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, individualcustomer.CustomerTable, individualcustomer.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IndividualCustomerClient) Hooks() []Hook {
	return c.hooks.IndividualCustomer
}

// LogisticClient is a client for the Logistic schema.
type LogisticClient struct {
	config
}

// NewLogisticClient returns a client for the Logistic from the given config.
func NewLogisticClient(c config) *LogisticClient {
	return &LogisticClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `logistic.Hooks(f(g(h())))`.
func (c *LogisticClient) Use(hooks ...Hook) {
	c.hooks.Logistic = append(c.hooks.Logistic, hooks...)
}

// Create returns a builder for creating a Logistic entity.
func (c *LogisticClient) Create() *LogisticCreate {
	mutation := newLogisticMutation(c.config, OpCreate)
	return &LogisticCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Logistic entities.
func (c *LogisticClient) CreateBulk(builders ...*LogisticCreate) *LogisticCreateBulk {
	return &LogisticCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Logistic.
func (c *LogisticClient) Update() *LogisticUpdate {
	mutation := newLogisticMutation(c.config, OpUpdate)
	return &LogisticUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LogisticClient) UpdateOne(l *Logistic) *LogisticUpdateOne {
	mutation := newLogisticMutation(c.config, OpUpdateOne, withLogistic(l))
	return &LogisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LogisticClient) UpdateOneID(id int) *LogisticUpdateOne {
	mutation := newLogisticMutation(c.config, OpUpdateOne, withLogisticID(id))
	return &LogisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Logistic.
func (c *LogisticClient) Delete() *LogisticDelete {
	mutation := newLogisticMutation(c.config, OpDelete)
	return &LogisticDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LogisticClient) DeleteOne(l *Logistic) *LogisticDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *LogisticClient) DeleteOneID(id int) *LogisticDeleteOne {
	builder := c.Delete().Where(logistic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LogisticDeleteOne{builder}
}

// Query returns a query builder for Logistic.
func (c *LogisticClient) Query() *LogisticQuery {
	return &LogisticQuery{
		config: c.config,
	}
}

// Get returns a Logistic entity by its id.
func (c *LogisticClient) Get(ctx context.Context, id int) (*Logistic, error) {
	return c.Query().Where(logistic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LogisticClient) GetX(ctx context.Context, id int) *Logistic {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a Logistic.
func (c *LogisticClient) QueryOrder(l *Logistic) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(logistic.Table, logistic.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, logistic.OrderTable, logistic.OrderPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Logistic.
func (c *LogisticClient) QueryStore(l *Logistic) *MerchantStoreQuery {
	query := &MerchantStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(logistic.Table, logistic.FieldID, id),
			sqlgraph.To(merchantstore.Table, merchantstore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, logistic.StoreTable, logistic.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LogisticClient) Hooks() []Hook {
	return c.hooks.Logistic
}

// MerchantClient is a client for the Merchant schema.
type MerchantClient struct {
	config
}

// NewMerchantClient returns a client for the Merchant from the given config.
func NewMerchantClient(c config) *MerchantClient {
	return &MerchantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `merchant.Hooks(f(g(h())))`.
func (c *MerchantClient) Use(hooks ...Hook) {
	c.hooks.Merchant = append(c.hooks.Merchant, hooks...)
}

// Create returns a builder for creating a Merchant entity.
func (c *MerchantClient) Create() *MerchantCreate {
	mutation := newMerchantMutation(c.config, OpCreate)
	return &MerchantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Merchant entities.
func (c *MerchantClient) CreateBulk(builders ...*MerchantCreate) *MerchantCreateBulk {
	return &MerchantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Merchant.
func (c *MerchantClient) Update() *MerchantUpdate {
	mutation := newMerchantMutation(c.config, OpUpdate)
	return &MerchantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MerchantClient) UpdateOne(m *Merchant) *MerchantUpdateOne {
	mutation := newMerchantMutation(c.config, OpUpdateOne, withMerchant(m))
	return &MerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MerchantClient) UpdateOneID(id int) *MerchantUpdateOne {
	mutation := newMerchantMutation(c.config, OpUpdateOne, withMerchantID(id))
	return &MerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Merchant.
func (c *MerchantClient) Delete() *MerchantDelete {
	mutation := newMerchantMutation(c.config, OpDelete)
	return &MerchantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MerchantClient) DeleteOne(m *Merchant) *MerchantDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *MerchantClient) DeleteOneID(id int) *MerchantDeleteOne {
	builder := c.Delete().Where(merchant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MerchantDeleteOne{builder}
}

// Query returns a query builder for Merchant.
func (c *MerchantClient) Query() *MerchantQuery {
	return &MerchantQuery{
		config: c.config,
	}
}

// Get returns a Merchant entity by its id.
func (c *MerchantClient) Get(ctx context.Context, id int) (*Merchant, error) {
	return c.Query().Where(merchant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MerchantClient) GetX(ctx context.Context, id int) *Merchant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySupplier queries the supplier edge of a Merchant.
func (c *MerchantClient) QuerySupplier(m *Merchant) *SupplierMerchantQuery {
	query := &SupplierMerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchant.Table, merchant.FieldID, id),
			sqlgraph.To(suppliermerchant.Table, suppliermerchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, merchant.SupplierTable, merchant.SupplierColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRetailer queries the retailer edge of a Merchant.
func (c *MerchantClient) QueryRetailer(m *Merchant) *RetailMerchantQuery {
	query := &RetailMerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchant.Table, merchant.FieldID, id),
			sqlgraph.To(retailmerchant.Table, retailmerchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, merchant.RetailerTable, merchant.RetailerColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Merchant.
func (c *MerchantClient) QueryStore(m *Merchant) *MerchantStoreQuery {
	query := &MerchantStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchant.Table, merchant.FieldID, id),
			sqlgraph.To(merchantstore.Table, merchantstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, merchant.StoreTable, merchant.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a Merchant.
func (c *MerchantClient) QueryProducts(m *Merchant) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchant.Table, merchant.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, merchant.ProductsTable, merchant.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddresses queries the addresses edge of a Merchant.
func (c *MerchantClient) QueryAddresses(m *Merchant) *AddressQuery {
	query := &AddressQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchant.Table, merchant.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, merchant.AddressesTable, merchant.AddressesColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Merchant.
func (c *MerchantClient) QueryOrders(m *Merchant) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchant.Table, merchant.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, merchant.OrdersTable, merchant.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavourites queries the favourites edge of a Merchant.
func (c *MerchantClient) QueryFavourites(m *Merchant) *FavouriteQuery {
	query := &FavouriteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchant.Table, merchant.FieldID, id),
			sqlgraph.To(favourite.Table, favourite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, merchant.FavouritesTable, merchant.FavouritesColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MerchantClient) Hooks() []Hook {
	return c.hooks.Merchant
}

// MerchantStoreClient is a client for the MerchantStore schema.
type MerchantStoreClient struct {
	config
}

// NewMerchantStoreClient returns a client for the MerchantStore from the given config.
func NewMerchantStoreClient(c config) *MerchantStoreClient {
	return &MerchantStoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `merchantstore.Hooks(f(g(h())))`.
func (c *MerchantStoreClient) Use(hooks ...Hook) {
	c.hooks.MerchantStore = append(c.hooks.MerchantStore, hooks...)
}

// Create returns a builder for creating a MerchantStore entity.
func (c *MerchantStoreClient) Create() *MerchantStoreCreate {
	mutation := newMerchantStoreMutation(c.config, OpCreate)
	return &MerchantStoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MerchantStore entities.
func (c *MerchantStoreClient) CreateBulk(builders ...*MerchantStoreCreate) *MerchantStoreCreateBulk {
	return &MerchantStoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MerchantStore.
func (c *MerchantStoreClient) Update() *MerchantStoreUpdate {
	mutation := newMerchantStoreMutation(c.config, OpUpdate)
	return &MerchantStoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MerchantStoreClient) UpdateOne(ms *MerchantStore) *MerchantStoreUpdateOne {
	mutation := newMerchantStoreMutation(c.config, OpUpdateOne, withMerchantStore(ms))
	return &MerchantStoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MerchantStoreClient) UpdateOneID(id int) *MerchantStoreUpdateOne {
	mutation := newMerchantStoreMutation(c.config, OpUpdateOne, withMerchantStoreID(id))
	return &MerchantStoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MerchantStore.
func (c *MerchantStoreClient) Delete() *MerchantStoreDelete {
	mutation := newMerchantStoreMutation(c.config, OpDelete)
	return &MerchantStoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MerchantStoreClient) DeleteOne(ms *MerchantStore) *MerchantStoreDeleteOne {
	return c.DeleteOneID(ms.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *MerchantStoreClient) DeleteOneID(id int) *MerchantStoreDeleteOne {
	builder := c.Delete().Where(merchantstore.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MerchantStoreDeleteOne{builder}
}

// Query returns a query builder for MerchantStore.
func (c *MerchantStoreClient) Query() *MerchantStoreQuery {
	return &MerchantStoreQuery{
		config: c.config,
	}
}

// Get returns a MerchantStore entity by its id.
func (c *MerchantStoreClient) Get(ctx context.Context, id int) (*MerchantStore, error) {
	return c.Query().Where(merchantstore.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MerchantStoreClient) GetX(ctx context.Context, id int) *MerchantStore {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMerchant queries the merchant edge of a MerchantStore.
func (c *MerchantStoreClient) QueryMerchant(ms *MerchantStore) *MerchantQuery {
	query := &MerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchantstore.Table, merchantstore.FieldID, id),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, merchantstore.MerchantTable, merchantstore.MerchantColumn),
		)
		fromV = sqlgraph.Neighbors(ms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a MerchantStore.
func (c *MerchantStoreClient) QueryAgent(ms *MerchantStore) *AgentQuery {
	query := &AgentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchantstore.Table, merchantstore.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, merchantstore.AgentTable, merchantstore.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(ms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogistics queries the logistics edge of a MerchantStore.
func (c *MerchantStoreClient) QueryLogistics(ms *MerchantStore) *LogisticQuery {
	query := &LogisticQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchantstore.Table, merchantstore.FieldID, id),
			sqlgraph.To(logistic.Table, logistic.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, merchantstore.LogisticsTable, merchantstore.LogisticsColumn),
		)
		fromV = sqlgraph.Neighbors(ms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequests queries the requests edge of a MerchantStore.
func (c *MerchantStoreClient) QueryRequests(ms *MerchantStore) *AgentRequestQuery {
	query := &AgentRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchantstore.Table, merchantstore.FieldID, id),
			sqlgraph.To(agentrequest.Table, agentrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, merchantstore.RequestsTable, merchantstore.RequestsColumn),
		)
		fromV = sqlgraph.Neighbors(ms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a MerchantStore.
func (c *MerchantStoreClient) QueryOrders(ms *MerchantStore) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchantstore.Table, merchantstore.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, merchantstore.OrdersTable, merchantstore.OrdersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderDetails queries the order_details edge of a MerchantStore.
func (c *MerchantStoreClient) QueryOrderDetails(ms *MerchantStore) *OrderDetailQuery {
	query := &OrderDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ms.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(merchantstore.Table, merchantstore.FieldID, id),
			sqlgraph.To(orderdetail.Table, orderdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, merchantstore.OrderDetailsTable, merchantstore.OrderDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(ms.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MerchantStoreClient) Hooks() []Hook {
	return c.hooks.MerchantStore
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id int) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id int) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id int) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id int) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDetails queries the details edge of a Order.
func (c *OrderClient) QueryDetails(o *Order) *OrderDetailQuery {
	query := &OrderDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderdetail.Table, orderdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.DetailsTable, order.DetailsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMerchant queries the merchant edge of a Order.
func (c *OrderClient) QueryMerchant(o *Order) *MerchantQuery {
	query := &MerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.MerchantTable, order.MerchantColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a Order.
func (c *OrderClient) QueryAgent(o *Order) *AgentQuery {
	query := &AgentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.AgentTable, order.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomer queries the customer edge of a Order.
func (c *OrderClient) QueryCustomer(o *Order) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.CustomerTable, order.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddress queries the address edge of a Order.
func (c *OrderClient) QueryAddress(o *Order) *AddressQuery {
	query := &AddressQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.AddressTable, order.AddressColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPickup queries the pickup edge of a Order.
func (c *OrderClient) QueryPickup(o *Order) *PickupStationQuery {
	query := &PickupStationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(pickupstation.Table, pickupstation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.PickupTable, order.PickupColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStores queries the stores edge of a Order.
func (c *OrderClient) QueryStores(o *Order) *MerchantStoreQuery {
	query := &MerchantStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(merchantstore.Table, merchantstore.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, order.StoresTable, order.StoresPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogistic queries the logistic edge of a Order.
func (c *OrderClient) QueryLogistic(o *Order) *LogisticQuery {
	query := &LogisticQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(logistic.Table, logistic.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, order.LogisticTable, order.LogisticPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// OrderDetailClient is a client for the OrderDetail schema.
type OrderDetailClient struct {
	config
}

// NewOrderDetailClient returns a client for the OrderDetail from the given config.
func NewOrderDetailClient(c config) *OrderDetailClient {
	return &OrderDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderdetail.Hooks(f(g(h())))`.
func (c *OrderDetailClient) Use(hooks ...Hook) {
	c.hooks.OrderDetail = append(c.hooks.OrderDetail, hooks...)
}

// Create returns a builder for creating a OrderDetail entity.
func (c *OrderDetailClient) Create() *OrderDetailCreate {
	mutation := newOrderDetailMutation(c.config, OpCreate)
	return &OrderDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderDetail entities.
func (c *OrderDetailClient) CreateBulk(builders ...*OrderDetailCreate) *OrderDetailCreateBulk {
	return &OrderDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderDetail.
func (c *OrderDetailClient) Update() *OrderDetailUpdate {
	mutation := newOrderDetailMutation(c.config, OpUpdate)
	return &OrderDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderDetailClient) UpdateOne(od *OrderDetail) *OrderDetailUpdateOne {
	mutation := newOrderDetailMutation(c.config, OpUpdateOne, withOrderDetail(od))
	return &OrderDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderDetailClient) UpdateOneID(id int) *OrderDetailUpdateOne {
	mutation := newOrderDetailMutation(c.config, OpUpdateOne, withOrderDetailID(id))
	return &OrderDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderDetail.
func (c *OrderDetailClient) Delete() *OrderDetailDelete {
	mutation := newOrderDetailMutation(c.config, OpDelete)
	return &OrderDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderDetailClient) DeleteOne(od *OrderDetail) *OrderDetailDeleteOne {
	return c.DeleteOneID(od.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderDetailClient) DeleteOneID(id int) *OrderDetailDeleteOne {
	builder := c.Delete().Where(orderdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDetailDeleteOne{builder}
}

// Query returns a query builder for OrderDetail.
func (c *OrderDetailClient) Query() *OrderDetailQuery {
	return &OrderDetailQuery{
		config: c.config,
	}
}

// Get returns a OrderDetail entity by its id.
func (c *OrderDetailClient) Get(ctx context.Context, id int) (*OrderDetail, error) {
	return c.Query().Where(orderdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderDetailClient) GetX(ctx context.Context, id int) *OrderDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the Order edge of a OrderDetail.
func (c *OrderDetailClient) QueryOrder(od *OrderDetail) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := od.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderdetail.Table, orderdetail.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderdetail.OrderTable, orderdetail.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(od.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a OrderDetail.
func (c *OrderDetailClient) QueryProduct(od *OrderDetail) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := od.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderdetail.Table, orderdetail.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderdetail.ProductTable, orderdetail.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(od.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a OrderDetail.
func (c *OrderDetailClient) QueryStore(od *OrderDetail) *MerchantStoreQuery {
	query := &MerchantStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := od.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderdetail.Table, orderdetail.FieldID, id),
			sqlgraph.To(merchantstore.Table, merchantstore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderdetail.StoreTable, orderdetail.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(od.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderDetailClient) Hooks() []Hook {
	return c.hooks.OrderDetail
}

// PermissionClient is a client for the Permission schema.
type PermissionClient struct {
	config
}

// NewPermissionClient returns a client for the Permission from the given config.
func NewPermissionClient(c config) *PermissionClient {
	return &PermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permission.Hooks(f(g(h())))`.
func (c *PermissionClient) Use(hooks ...Hook) {
	c.hooks.Permission = append(c.hooks.Permission, hooks...)
}

// Create returns a builder for creating a Permission entity.
func (c *PermissionClient) Create() *PermissionCreate {
	mutation := newPermissionMutation(c.config, OpCreate)
	return &PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Permission entities.
func (c *PermissionClient) CreateBulk(builders ...*PermissionCreate) *PermissionCreateBulk {
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Permission.
func (c *PermissionClient) Update() *PermissionUpdate {
	mutation := newPermissionMutation(c.config, OpUpdate)
	return &PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionClient) UpdateOne(pe *Permission) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermission(pe))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionClient) UpdateOneID(id int) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermissionID(id))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Permission.
func (c *PermissionClient) Delete() *PermissionDelete {
	mutation := newPermissionMutation(c.config, OpDelete)
	return &PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PermissionClient) DeleteOne(pe *Permission) *PermissionDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PermissionClient) DeleteOneID(id int) *PermissionDeleteOne {
	builder := c.Delete().Where(permission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionDeleteOne{builder}
}

// Query returns a query builder for Permission.
func (c *PermissionClient) Query() *PermissionQuery {
	return &PermissionQuery{
		config: c.config,
	}
}

// Get returns a Permission entity by its id.
func (c *PermissionClient) Get(ctx context.Context, id int) (*Permission, error) {
	return c.Query().Where(permission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionClient) GetX(ctx context.Context, id int) *Permission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a Permission.
func (c *PermissionClient) QueryRole(pe *Permission) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, permission.RoleTable, permission.RolePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PermissionClient) Hooks() []Hook {
	return c.hooks.Permission
}

// PickupStationClient is a client for the PickupStation schema.
type PickupStationClient struct {
	config
}

// NewPickupStationClient returns a client for the PickupStation from the given config.
func NewPickupStationClient(c config) *PickupStationClient {
	return &PickupStationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pickupstation.Hooks(f(g(h())))`.
func (c *PickupStationClient) Use(hooks ...Hook) {
	c.hooks.PickupStation = append(c.hooks.PickupStation, hooks...)
}

// Create returns a builder for creating a PickupStation entity.
func (c *PickupStationClient) Create() *PickupStationCreate {
	mutation := newPickupStationMutation(c.config, OpCreate)
	return &PickupStationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PickupStation entities.
func (c *PickupStationClient) CreateBulk(builders ...*PickupStationCreate) *PickupStationCreateBulk {
	return &PickupStationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PickupStation.
func (c *PickupStationClient) Update() *PickupStationUpdate {
	mutation := newPickupStationMutation(c.config, OpUpdate)
	return &PickupStationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PickupStationClient) UpdateOne(ps *PickupStation) *PickupStationUpdateOne {
	mutation := newPickupStationMutation(c.config, OpUpdateOne, withPickupStation(ps))
	return &PickupStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PickupStationClient) UpdateOneID(id int) *PickupStationUpdateOne {
	mutation := newPickupStationMutation(c.config, OpUpdateOne, withPickupStationID(id))
	return &PickupStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PickupStation.
func (c *PickupStationClient) Delete() *PickupStationDelete {
	mutation := newPickupStationMutation(c.config, OpDelete)
	return &PickupStationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PickupStationClient) DeleteOne(ps *PickupStation) *PickupStationDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PickupStationClient) DeleteOneID(id int) *PickupStationDeleteOne {
	builder := c.Delete().Where(pickupstation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PickupStationDeleteOne{builder}
}

// Query returns a query builder for PickupStation.
func (c *PickupStationClient) Query() *PickupStationQuery {
	return &PickupStationQuery{
		config: c.config,
	}
}

// Get returns a PickupStation entity by its id.
func (c *PickupStationClient) Get(ctx context.Context, id int) (*PickupStation, error) {
	return c.Query().Where(pickupstation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PickupStationClient) GetX(ctx context.Context, id int) *PickupStation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrders queries the orders edge of a PickupStation.
func (c *PickupStationClient) QueryOrders(ps *PickupStation) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pickupstation.Table, pickupstation.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pickupstation.OrdersTable, pickupstation.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PickupStationClient) Hooks() []Hook {
	return c.hooks.PickupStation
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderDetails queries the order_details edge of a Product.
func (c *ProductClient) QueryOrderDetails(pr *Product) *OrderDetailQuery {
	query := &OrderDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(orderdetail.Table, orderdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.OrderDetailsTable, product.OrderDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavourites queries the favourites edge of a Product.
func (c *ProductClient) QueryFavourites(pr *Product) *FavouriteQuery {
	query := &FavouriteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(favourite.Table, favourite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.FavouritesTable, product.FavouritesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMerchant queries the merchant edge of a Product.
func (c *ProductClient) QueryMerchant(pr *Product) *MerchantQuery {
	query := &MerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.MerchantTable, product.MerchantColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMajor queries the major edge of a Product.
func (c *ProductClient) QueryMajor(pr *Product) *ProductCategoryMajorQuery {
	query := &ProductCategoryMajorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productcategorymajor.Table, productcategorymajor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.MajorTable, product.MajorColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMinor queries the minor edge of a Product.
func (c *ProductClient) QueryMinor(pr *Product) *ProductCategoryMinorQuery {
	query := &ProductCategoryMinorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productcategoryminor.Table, productcategoryminor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.MinorTable, product.MinorColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// ProductCategoryMajorClient is a client for the ProductCategoryMajor schema.
type ProductCategoryMajorClient struct {
	config
}

// NewProductCategoryMajorClient returns a client for the ProductCategoryMajor from the given config.
func NewProductCategoryMajorClient(c config) *ProductCategoryMajorClient {
	return &ProductCategoryMajorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcategorymajor.Hooks(f(g(h())))`.
func (c *ProductCategoryMajorClient) Use(hooks ...Hook) {
	c.hooks.ProductCategoryMajor = append(c.hooks.ProductCategoryMajor, hooks...)
}

// Create returns a builder for creating a ProductCategoryMajor entity.
func (c *ProductCategoryMajorClient) Create() *ProductCategoryMajorCreate {
	mutation := newProductCategoryMajorMutation(c.config, OpCreate)
	return &ProductCategoryMajorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductCategoryMajor entities.
func (c *ProductCategoryMajorClient) CreateBulk(builders ...*ProductCategoryMajorCreate) *ProductCategoryMajorCreateBulk {
	return &ProductCategoryMajorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductCategoryMajor.
func (c *ProductCategoryMajorClient) Update() *ProductCategoryMajorUpdate {
	mutation := newProductCategoryMajorMutation(c.config, OpUpdate)
	return &ProductCategoryMajorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductCategoryMajorClient) UpdateOne(pcm *ProductCategoryMajor) *ProductCategoryMajorUpdateOne {
	mutation := newProductCategoryMajorMutation(c.config, OpUpdateOne, withProductCategoryMajor(pcm))
	return &ProductCategoryMajorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductCategoryMajorClient) UpdateOneID(id int) *ProductCategoryMajorUpdateOne {
	mutation := newProductCategoryMajorMutation(c.config, OpUpdateOne, withProductCategoryMajorID(id))
	return &ProductCategoryMajorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductCategoryMajor.
func (c *ProductCategoryMajorClient) Delete() *ProductCategoryMajorDelete {
	mutation := newProductCategoryMajorMutation(c.config, OpDelete)
	return &ProductCategoryMajorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductCategoryMajorClient) DeleteOne(pcm *ProductCategoryMajor) *ProductCategoryMajorDeleteOne {
	return c.DeleteOneID(pcm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ProductCategoryMajorClient) DeleteOneID(id int) *ProductCategoryMajorDeleteOne {
	builder := c.Delete().Where(productcategorymajor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductCategoryMajorDeleteOne{builder}
}

// Query returns a query builder for ProductCategoryMajor.
func (c *ProductCategoryMajorClient) Query() *ProductCategoryMajorQuery {
	return &ProductCategoryMajorQuery{
		config: c.config,
	}
}

// Get returns a ProductCategoryMajor entity by its id.
func (c *ProductCategoryMajorClient) Get(ctx context.Context, id int) (*ProductCategoryMajor, error) {
	return c.Query().Where(productcategorymajor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductCategoryMajorClient) GetX(ctx context.Context, id int) *ProductCategoryMajor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMinors queries the minors edge of a ProductCategoryMajor.
func (c *ProductCategoryMajorClient) QueryMinors(pcm *ProductCategoryMajor) *ProductCategoryMinorQuery {
	query := &ProductCategoryMinorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategorymajor.Table, productcategorymajor.FieldID, id),
			sqlgraph.To(productcategoryminor.Table, productcategoryminor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategorymajor.MinorsTable, productcategorymajor.MinorsColumn),
		)
		fromV = sqlgraph.Neighbors(pcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a ProductCategoryMajor.
func (c *ProductCategoryMajorClient) QueryProducts(pcm *ProductCategoryMajor) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategorymajor.Table, productcategorymajor.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategorymajor.ProductsTable, productcategorymajor.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(pcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductCategoryMajorClient) Hooks() []Hook {
	return c.hooks.ProductCategoryMajor
}

// ProductCategoryMinorClient is a client for the ProductCategoryMinor schema.
type ProductCategoryMinorClient struct {
	config
}

// NewProductCategoryMinorClient returns a client for the ProductCategoryMinor from the given config.
func NewProductCategoryMinorClient(c config) *ProductCategoryMinorClient {
	return &ProductCategoryMinorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcategoryminor.Hooks(f(g(h())))`.
func (c *ProductCategoryMinorClient) Use(hooks ...Hook) {
	c.hooks.ProductCategoryMinor = append(c.hooks.ProductCategoryMinor, hooks...)
}

// Create returns a builder for creating a ProductCategoryMinor entity.
func (c *ProductCategoryMinorClient) Create() *ProductCategoryMinorCreate {
	mutation := newProductCategoryMinorMutation(c.config, OpCreate)
	return &ProductCategoryMinorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductCategoryMinor entities.
func (c *ProductCategoryMinorClient) CreateBulk(builders ...*ProductCategoryMinorCreate) *ProductCategoryMinorCreateBulk {
	return &ProductCategoryMinorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductCategoryMinor.
func (c *ProductCategoryMinorClient) Update() *ProductCategoryMinorUpdate {
	mutation := newProductCategoryMinorMutation(c.config, OpUpdate)
	return &ProductCategoryMinorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductCategoryMinorClient) UpdateOne(pcm *ProductCategoryMinor) *ProductCategoryMinorUpdateOne {
	mutation := newProductCategoryMinorMutation(c.config, OpUpdateOne, withProductCategoryMinor(pcm))
	return &ProductCategoryMinorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductCategoryMinorClient) UpdateOneID(id int) *ProductCategoryMinorUpdateOne {
	mutation := newProductCategoryMinorMutation(c.config, OpUpdateOne, withProductCategoryMinorID(id))
	return &ProductCategoryMinorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductCategoryMinor.
func (c *ProductCategoryMinorClient) Delete() *ProductCategoryMinorDelete {
	mutation := newProductCategoryMinorMutation(c.config, OpDelete)
	return &ProductCategoryMinorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductCategoryMinorClient) DeleteOne(pcm *ProductCategoryMinor) *ProductCategoryMinorDeleteOne {
	return c.DeleteOneID(pcm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ProductCategoryMinorClient) DeleteOneID(id int) *ProductCategoryMinorDeleteOne {
	builder := c.Delete().Where(productcategoryminor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductCategoryMinorDeleteOne{builder}
}

// Query returns a query builder for ProductCategoryMinor.
func (c *ProductCategoryMinorClient) Query() *ProductCategoryMinorQuery {
	return &ProductCategoryMinorQuery{
		config: c.config,
	}
}

// Get returns a ProductCategoryMinor entity by its id.
func (c *ProductCategoryMinorClient) Get(ctx context.Context, id int) (*ProductCategoryMinor, error) {
	return c.Query().Where(productcategoryminor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductCategoryMinorClient) GetX(ctx context.Context, id int) *ProductCategoryMinor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMajor queries the major edge of a ProductCategoryMinor.
func (c *ProductCategoryMinorClient) QueryMajor(pcm *ProductCategoryMinor) *ProductCategoryMajorQuery {
	query := &ProductCategoryMajorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategoryminor.Table, productcategoryminor.FieldID, id),
			sqlgraph.To(productcategorymajor.Table, productcategorymajor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productcategoryminor.MajorTable, productcategoryminor.MajorColumn),
		)
		fromV = sqlgraph.Neighbors(pcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a ProductCategoryMinor.
func (c *ProductCategoryMinorClient) QueryProducts(pcm *ProductCategoryMinor) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategoryminor.Table, productcategoryminor.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategoryminor.ProductsTable, productcategoryminor.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(pcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductCategoryMinorClient) Hooks() []Hook {
	return c.hooks.ProductCategoryMinor
}

// RetailMerchantClient is a client for the RetailMerchant schema.
type RetailMerchantClient struct {
	config
}

// NewRetailMerchantClient returns a client for the RetailMerchant from the given config.
func NewRetailMerchantClient(c config) *RetailMerchantClient {
	return &RetailMerchantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `retailmerchant.Hooks(f(g(h())))`.
func (c *RetailMerchantClient) Use(hooks ...Hook) {
	c.hooks.RetailMerchant = append(c.hooks.RetailMerchant, hooks...)
}

// Create returns a builder for creating a RetailMerchant entity.
func (c *RetailMerchantClient) Create() *RetailMerchantCreate {
	mutation := newRetailMerchantMutation(c.config, OpCreate)
	return &RetailMerchantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RetailMerchant entities.
func (c *RetailMerchantClient) CreateBulk(builders ...*RetailMerchantCreate) *RetailMerchantCreateBulk {
	return &RetailMerchantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RetailMerchant.
func (c *RetailMerchantClient) Update() *RetailMerchantUpdate {
	mutation := newRetailMerchantMutation(c.config, OpUpdate)
	return &RetailMerchantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RetailMerchantClient) UpdateOne(rm *RetailMerchant) *RetailMerchantUpdateOne {
	mutation := newRetailMerchantMutation(c.config, OpUpdateOne, withRetailMerchant(rm))
	return &RetailMerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RetailMerchantClient) UpdateOneID(id int) *RetailMerchantUpdateOne {
	mutation := newRetailMerchantMutation(c.config, OpUpdateOne, withRetailMerchantID(id))
	return &RetailMerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RetailMerchant.
func (c *RetailMerchantClient) Delete() *RetailMerchantDelete {
	mutation := newRetailMerchantMutation(c.config, OpDelete)
	return &RetailMerchantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RetailMerchantClient) DeleteOne(rm *RetailMerchant) *RetailMerchantDeleteOne {
	return c.DeleteOneID(rm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RetailMerchantClient) DeleteOneID(id int) *RetailMerchantDeleteOne {
	builder := c.Delete().Where(retailmerchant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RetailMerchantDeleteOne{builder}
}

// Query returns a query builder for RetailMerchant.
func (c *RetailMerchantClient) Query() *RetailMerchantQuery {
	return &RetailMerchantQuery{
		config: c.config,
	}
}

// Get returns a RetailMerchant entity by its id.
func (c *RetailMerchantClient) Get(ctx context.Context, id int) (*RetailMerchant, error) {
	return c.Query().Where(retailmerchant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RetailMerchantClient) GetX(ctx context.Context, id int) *RetailMerchant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMerchant queries the merchant edge of a RetailMerchant.
func (c *RetailMerchantClient) QueryMerchant(rm *RetailMerchant) *MerchantQuery {
	query := &MerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(retailmerchant.Table, retailmerchant.FieldID, id),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, retailmerchant.MerchantTable, retailmerchant.MerchantColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RetailMerchantClient) Hooks() []Hook {
	return c.hooks.RetailMerchant
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id int) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id int) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id int) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id int) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPermissions queries the permissions edge of a Role.
func (c *RoleClient) QueryPermissions(r *Role) *PermissionQuery {
	query := &PermissionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, role.PermissionsTable, role.PermissionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmin queries the admin edge of a Role.
func (c *RoleClient) QueryAdmin(r *Role) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, role.AdminTable, role.AdminPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// SupplierMerchantClient is a client for the SupplierMerchant schema.
type SupplierMerchantClient struct {
	config
}

// NewSupplierMerchantClient returns a client for the SupplierMerchant from the given config.
func NewSupplierMerchantClient(c config) *SupplierMerchantClient {
	return &SupplierMerchantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `suppliermerchant.Hooks(f(g(h())))`.
func (c *SupplierMerchantClient) Use(hooks ...Hook) {
	c.hooks.SupplierMerchant = append(c.hooks.SupplierMerchant, hooks...)
}

// Create returns a builder for creating a SupplierMerchant entity.
func (c *SupplierMerchantClient) Create() *SupplierMerchantCreate {
	mutation := newSupplierMerchantMutation(c.config, OpCreate)
	return &SupplierMerchantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SupplierMerchant entities.
func (c *SupplierMerchantClient) CreateBulk(builders ...*SupplierMerchantCreate) *SupplierMerchantCreateBulk {
	return &SupplierMerchantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SupplierMerchant.
func (c *SupplierMerchantClient) Update() *SupplierMerchantUpdate {
	mutation := newSupplierMerchantMutation(c.config, OpUpdate)
	return &SupplierMerchantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SupplierMerchantClient) UpdateOne(sm *SupplierMerchant) *SupplierMerchantUpdateOne {
	mutation := newSupplierMerchantMutation(c.config, OpUpdateOne, withSupplierMerchant(sm))
	return &SupplierMerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SupplierMerchantClient) UpdateOneID(id int) *SupplierMerchantUpdateOne {
	mutation := newSupplierMerchantMutation(c.config, OpUpdateOne, withSupplierMerchantID(id))
	return &SupplierMerchantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SupplierMerchant.
func (c *SupplierMerchantClient) Delete() *SupplierMerchantDelete {
	mutation := newSupplierMerchantMutation(c.config, OpDelete)
	return &SupplierMerchantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SupplierMerchantClient) DeleteOne(sm *SupplierMerchant) *SupplierMerchantDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SupplierMerchantClient) DeleteOneID(id int) *SupplierMerchantDeleteOne {
	builder := c.Delete().Where(suppliermerchant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SupplierMerchantDeleteOne{builder}
}

// Query returns a query builder for SupplierMerchant.
func (c *SupplierMerchantClient) Query() *SupplierMerchantQuery {
	return &SupplierMerchantQuery{
		config: c.config,
	}
}

// Get returns a SupplierMerchant entity by its id.
func (c *SupplierMerchantClient) Get(ctx context.Context, id int) (*SupplierMerchant, error) {
	return c.Query().Where(suppliermerchant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SupplierMerchantClient) GetX(ctx context.Context, id int) *SupplierMerchant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMerchant queries the merchant edge of a SupplierMerchant.
func (c *SupplierMerchantClient) QueryMerchant(sm *SupplierMerchant) *MerchantQuery {
	query := &MerchantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(suppliermerchant.Table, suppliermerchant.FieldID, id),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, suppliermerchant.MerchantTable, suppliermerchant.MerchantColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SupplierMerchantClient) Hooks() []Hook {
	return c.hooks.SupplierMerchant
}
