// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AddressesColumns holds the columns for the "addresses" table.
	AddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "last_name", Type: field.TypeString},
		{Name: "other_name", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "other_phone", Type: field.TypeString, Nullable: true},
		{Name: "digital_address", Type: field.TypeString, Nullable: true},
		{Name: "street_name", Type: field.TypeString, Nullable: true},
		{Name: "street_number", Type: field.TypeString, Nullable: true},
		{Name: "city", Type: field.TypeString},
		{Name: "district", Type: field.TypeString, Nullable: true},
		{Name: "region", Type: field.TypeString},
		{Name: "country", Type: field.TypeString, Default: "Ghana"},
		{Name: "default", Type: field.TypeBool, Default: false},
		{Name: "coordinate", Type: field.TypeJSON, Nullable: true},
		{Name: "agent_addresses", Type: field.TypeInt, Nullable: true},
		{Name: "customer_addresses", Type: field.TypeInt, Nullable: true},
		{Name: "merchant_addresses", Type: field.TypeInt, Nullable: true},
	}
	// AddressesTable holds the schema information for the "addresses" table.
	AddressesTable = &schema.Table{
		Name:       "addresses",
		Columns:    AddressesColumns,
		PrimaryKey: []*schema.Column{AddressesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "addresses_agents_addresses",
				Columns:    []*schema.Column{AddressesColumns[16]},
				RefColumns: []*schema.Column{AgentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "addresses_customers_addresses",
				Columns:    []*schema.Column{AddressesColumns[17]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "addresses_merchants_addresses",
				Columns:    []*schema.Column{AddressesColumns[18]},
				RefColumns: []*schema.Column{MerchantsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AdminsColumns holds the columns for the "admins" table.
	AdminsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeBytes},
	}
	// AdminsTable holds the schema information for the "admins" table.
	AdminsTable = &schema.Table{
		Name:       "admins",
		Columns:    AdminsColumns,
		PrimaryKey: []*schema.Column{AdminsColumns[0]},
	}
	// AgentsColumns holds the columns for the "agents" table.
	AgentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeBytes},
		{Name: "ghana_card", Type: field.TypeString, Unique: true},
		{Name: "last_name", Type: field.TypeString},
		{Name: "other_name", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString, Unique: true},
		{Name: "other_phone", Type: field.TypeString, Nullable: true},
		{Name: "address", Type: field.TypeString},
		{Name: "digital_address", Type: field.TypeString},
		{Name: "region", Type: field.TypeString, Nullable: true},
		{Name: "district", Type: field.TypeString, Nullable: true},
		{Name: "city", Type: field.TypeString, Nullable: true},
		{Name: "default_account", Type: field.TypeEnum, Nullable: true, Enums: []string{"bank", "momo"}},
		{Name: "bank_account", Type: field.TypeJSON, Nullable: true},
		{Name: "momo_account", Type: field.TypeJSON, Nullable: true},
		{Name: "verified", Type: field.TypeBool, Default: false},
		{Name: "compliance", Type: field.TypeJSON, Nullable: true},
	}
	// AgentsTable holds the schema information for the "agents" table.
	AgentsTable = &schema.Table{
		Name:       "agents",
		Columns:    AgentsColumns,
		PrimaryKey: []*schema.Column{AgentsColumns[0]},
	}
	// AgentRequestsColumns holds the columns for the "agent_requests" table.
	AgentRequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "agent_requests", Type: field.TypeInt, Nullable: true},
		{Name: "merchant_store_requests", Type: field.TypeInt, Nullable: true},
	}
	// AgentRequestsTable holds the schema information for the "agent_requests" table.
	AgentRequestsTable = &schema.Table{
		Name:       "agent_requests",
		Columns:    AgentRequestsColumns,
		PrimaryKey: []*schema.Column{AgentRequestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "agent_requests_agents_requests",
				Columns:    []*schema.Column{AgentRequestsColumns[3]},
				RefColumns: []*schema.Column{AgentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "agent_requests_merchant_stores_requests",
				Columns:    []*schema.Column{AgentRequestsColumns[4]},
				RefColumns: []*schema.Column{MerchantStoresColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BusinessCustomersColumns holds the columns for the "business_customers" table.
	BusinessCustomersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "other_phone", Type: field.TypeString, Nullable: true},
		{Name: "logo", Type: field.TypeString, Nullable: true},
		{Name: "contact", Type: field.TypeJSON, Nullable: true},
		{Name: "customer_business", Type: field.TypeInt, Unique: true},
	}
	// BusinessCustomersTable holds the schema information for the "business_customers" table.
	BusinessCustomersTable = &schema.Table{
		Name:       "business_customers",
		Columns:    BusinessCustomersColumns,
		PrimaryKey: []*schema.Column{BusinessCustomersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "business_customers_customers_business",
				Columns:    []*schema.Column{BusinessCustomersColumns[8]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CustomersColumns holds the columns for the "customers" table.
	CustomersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeBytes},
		{Name: "type", Type: field.TypeString},
	}
	// CustomersTable holds the schema information for the "customers" table.
	CustomersTable = &schema.Table{
		Name:       "customers",
		Columns:    CustomersColumns,
		PrimaryKey: []*schema.Column{CustomersColumns[0]},
	}
	// FavouritesColumns holds the columns for the "favourites" table.
	FavouritesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "agent_favourites", Type: field.TypeInt, Nullable: true},
		{Name: "customer_favourites", Type: field.TypeInt, Nullable: true},
		{Name: "merchant_favourites", Type: field.TypeInt, Nullable: true},
		{Name: "product_favourites", Type: field.TypeInt, Nullable: true},
	}
	// FavouritesTable holds the schema information for the "favourites" table.
	FavouritesTable = &schema.Table{
		Name:       "favourites",
		Columns:    FavouritesColumns,
		PrimaryKey: []*schema.Column{FavouritesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "favourites_agents_favourites",
				Columns:    []*schema.Column{FavouritesColumns[3]},
				RefColumns: []*schema.Column{AgentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "favourites_customers_favourites",
				Columns:    []*schema.Column{FavouritesColumns[4]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "favourites_merchants_favourites",
				Columns:    []*schema.Column{FavouritesColumns[5]},
				RefColumns: []*schema.Column{MerchantsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "favourites_products_favourites",
				Columns:    []*schema.Column{FavouritesColumns[6]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// IndividualCustomersColumns holds the columns for the "individual_customers" table.
	IndividualCustomersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "last_name", Type: field.TypeString},
		{Name: "other_name", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "other_phone", Type: field.TypeString, Nullable: true},
		{Name: "customer_individual", Type: field.TypeInt, Unique: true},
	}
	// IndividualCustomersTable holds the schema information for the "individual_customers" table.
	IndividualCustomersTable = &schema.Table{
		Name:       "individual_customers",
		Columns:    IndividualCustomersColumns,
		PrimaryKey: []*schema.Column{IndividualCustomersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "individual_customers_customers_individual",
				Columns:    []*schema.Column{IndividualCustomersColumns[7]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// LogisticsColumns holds the columns for the "logistics" table.
	LogisticsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "task", Type: field.TypeJSON, Nullable: true},
		{Name: "merchant_store_logistics", Type: field.TypeInt, Nullable: true},
	}
	// LogisticsTable holds the schema information for the "logistics" table.
	LogisticsTable = &schema.Table{
		Name:       "logistics",
		Columns:    LogisticsColumns,
		PrimaryKey: []*schema.Column{LogisticsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "logistics_merchant_stores_logistics",
				Columns:    []*schema.Column{LogisticsColumns[4]},
				RefColumns: []*schema.Column{MerchantStoresColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MerchantsColumns holds the columns for the "merchants" table.
	MerchantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeBytes},
		{Name: "type", Type: field.TypeString},
		{Name: "otp", Type: field.TypeBool, Nullable: true},
	}
	// MerchantsTable holds the schema information for the "merchants" table.
	MerchantsTable = &schema.Table{
		Name:       "merchants",
		Columns:    MerchantsColumns,
		PrimaryKey: []*schema.Column{MerchantsColumns[0]},
	}
	// MerchantStoresColumns holds the columns for the "merchant_stores" table.
	MerchantStoresColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "about", Type: field.TypeString, Size: 2147483647},
		{Name: "slogan", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "logo", Type: field.TypeString},
		{Name: "images", Type: field.TypeJSON, Nullable: true},
		{Name: "default_account", Type: field.TypeEnum, Nullable: true, Enums: []string{"bank", "momo"}},
		{Name: "bank_account", Type: field.TypeJSON, Nullable: true},
		{Name: "momo_account", Type: field.TypeJSON, Nullable: true},
		{Name: "address", Type: field.TypeJSON, Nullable: true},
		{Name: "coordinate", Type: field.TypeJSON, Nullable: true},
		{Name: "merchant_type", Type: field.TypeString},
		{Name: "permit_agent", Type: field.TypeBool, Default: true},
		{Name: "agent_store", Type: field.TypeInt, Nullable: true},
		{Name: "merchant_store", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// MerchantStoresTable holds the schema information for the "merchant_stores" table.
	MerchantStoresTable = &schema.Table{
		Name:       "merchant_stores",
		Columns:    MerchantStoresColumns,
		PrimaryKey: []*schema.Column{MerchantStoresColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "merchant_stores_agents_store",
				Columns:    []*schema.Column{MerchantStoresColumns[16]},
				RefColumns: []*schema.Column{AgentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "merchant_stores_merchants_store",
				Columns:    []*schema.Column{MerchantStoresColumns[17]},
				RefColumns: []*schema.Column{MerchantsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "order_number", Type: field.TypeString},
		{Name: "currency", Type: field.TypeString},
		{Name: "amount", Type: field.TypeFloat64, Default: 0},
		{Name: "delivery_fee", Type: field.TypeFloat64, Default: 0},
		{Name: "reference", Type: field.TypeString, Nullable: true},
		{Name: "channel", Type: field.TypeString, Nullable: true},
		{Name: "paid_at", Type: field.TypeString, Nullable: true},
		{Name: "delivery_method", Type: field.TypeEnum, Enums: []string{"HOD", "PSD"}},
		{Name: "payment_method", Type: field.TypeEnum, Enums: []string{"ONLINE", "POD"}, Default: "ONLINE"},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "in_progress", "fulfilled", "canceled"}, Default: "pending"},
		{Name: "store_tasks_created", Type: field.TypeJSON, Nullable: true},
		{Name: "delivered_at", Type: field.TypeTime, Nullable: true},
		{Name: "address_orders", Type: field.TypeInt, Nullable: true},
		{Name: "agent_orders", Type: field.TypeInt, Nullable: true},
		{Name: "customer_orders", Type: field.TypeInt, Nullable: true},
		{Name: "merchant_orders", Type: field.TypeInt, Nullable: true},
		{Name: "pickup_station_orders", Type: field.TypeInt, Nullable: true},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "orders_addresses_orders",
				Columns:    []*schema.Column{OrdersColumns[15]},
				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "orders_agents_orders",
				Columns:    []*schema.Column{OrdersColumns[16]},
				RefColumns: []*schema.Column{AgentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "orders_customers_orders",
				Columns:    []*schema.Column{OrdersColumns[17]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "orders_merchants_orders",
				Columns:    []*schema.Column{OrdersColumns[18]},
				RefColumns: []*schema.Column{MerchantsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "orders_pickup_stations_orders",
				Columns:    []*schema.Column{OrdersColumns[19]},
				RefColumns: []*schema.Column{PickupStationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrderDetailsColumns holds the columns for the "order_details" table.
	OrderDetailsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "price", Type: field.TypeFloat64, Default: 0},
		{Name: "promo_price", Type: field.TypeFloat64, Default: 0},
		{Name: "amount", Type: field.TypeFloat64, Default: 0},
		{Name: "quantity", Type: field.TypeInt, Default: 0},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "processing", "dispatched", "delivered", "canceled"}, Default: "pending"},
		{Name: "merchant_store_order_details", Type: field.TypeInt},
		{Name: "order_details", Type: field.TypeInt},
		{Name: "product_order_details", Type: field.TypeInt},
	}
	// OrderDetailsTable holds the schema information for the "order_details" table.
	OrderDetailsTable = &schema.Table{
		Name:       "order_details",
		Columns:    OrderDetailsColumns,
		PrimaryKey: []*schema.Column{OrderDetailsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "order_details_merchant_stores_order_details",
				Columns:    []*schema.Column{OrderDetailsColumns[8]},
				RefColumns: []*schema.Column{MerchantStoresColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "order_details_orders_details",
				Columns:    []*schema.Column{OrderDetailsColumns[9]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "order_details_products_order_details",
				Columns:    []*schema.Column{OrderDetailsColumns[10]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PickupStationsColumns holds the columns for the "pickup_stations" table.
	PickupStationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "region", Type: field.TypeString},
		{Name: "city", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "address", Type: field.TypeString},
	}
	// PickupStationsTable holds the schema information for the "pickup_stations" table.
	PickupStationsTable = &schema.Table{
		Name:       "pickup_stations",
		Columns:    PickupStationsColumns,
		PrimaryKey: []*schema.Column{PickupStationsColumns[0]},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "price", Type: field.TypeFloat64, Default: 0},
		{Name: "promo_price", Type: field.TypeFloat64, Default: 0},
		{Name: "weight", Type: field.TypeUint32, Default: 1},
		{Name: "quantity", Type: field.TypeUint32, Default: 1},
		{Name: "unit", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "image", Type: field.TypeString},
		{Name: "best_deal", Type: field.TypeUint64, Default: 0},
		{Name: "merchant_products", Type: field.TypeInt},
		{Name: "product_category_major_products", Type: field.TypeInt},
		{Name: "product_category_minor_products", Type: field.TypeInt},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:       "products",
		Columns:    ProductsColumns,
		PrimaryKey: []*schema.Column{ProductsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "products_merchants_products",
				Columns:    []*schema.Column{ProductsColumns[12]},
				RefColumns: []*schema.Column{MerchantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "products_product_category_majors_products",
				Columns:    []*schema.Column{ProductsColumns[13]},
				RefColumns: []*schema.Column{ProductCategoryMajorsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "products_product_category_minors_products",
				Columns:    []*schema.Column{ProductsColumns[14]},
				RefColumns: []*schema.Column{ProductCategoryMinorsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ProductCategoryMajorsColumns holds the columns for the "product_category_majors" table.
	ProductCategoryMajorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "category", Type: field.TypeString, Unique: true},
		{Name: "slug", Type: field.TypeString},
	}
	// ProductCategoryMajorsTable holds the schema information for the "product_category_majors" table.
	ProductCategoryMajorsTable = &schema.Table{
		Name:       "product_category_majors",
		Columns:    ProductCategoryMajorsColumns,
		PrimaryKey: []*schema.Column{ProductCategoryMajorsColumns[0]},
	}
	// ProductCategoryMinorsColumns holds the columns for the "product_category_minors" table.
	ProductCategoryMinorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "category", Type: field.TypeString, Unique: true},
		{Name: "image", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString},
		{Name: "product_category_major_minors", Type: field.TypeInt},
	}
	// ProductCategoryMinorsTable holds the schema information for the "product_category_minors" table.
	ProductCategoryMinorsTable = &schema.Table{
		Name:       "product_category_minors",
		Columns:    ProductCategoryMinorsColumns,
		PrimaryKey: []*schema.Column{ProductCategoryMinorsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "product_category_minors_product_category_majors_minors",
				Columns:    []*schema.Column{ProductCategoryMinorsColumns[6]},
				RefColumns: []*schema.Column{ProductCategoryMajorsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RetailMerchantsColumns holds the columns for the "retail_merchants" table.
	RetailMerchantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "ghana_card", Type: field.TypeString, Unique: true},
		{Name: "last_name", Type: field.TypeString},
		{Name: "other_name", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString, Unique: true},
		{Name: "other_phone", Type: field.TypeString, Nullable: true},
		{Name: "merchant_retailer", Type: field.TypeInt, Unique: true},
	}
	// RetailMerchantsTable holds the schema information for the "retail_merchants" table.
	RetailMerchantsTable = &schema.Table{
		Name:       "retail_merchants",
		Columns:    RetailMerchantsColumns,
		PrimaryKey: []*schema.Column{RetailMerchantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "retail_merchants_merchants_retailer",
				Columns:    []*schema.Column{RetailMerchantsColumns[8]},
				RefColumns: []*schema.Column{MerchantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SupplierMerchantsColumns holds the columns for the "supplier_merchants" table.
	SupplierMerchantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "ghana_card", Type: field.TypeString, Unique: true},
		{Name: "last_name", Type: field.TypeString},
		{Name: "other_name", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString, Unique: true},
		{Name: "other_phone", Type: field.TypeString, Nullable: true},
		{Name: "merchant_supplier", Type: field.TypeInt, Unique: true},
	}
	// SupplierMerchantsTable holds the schema information for the "supplier_merchants" table.
	SupplierMerchantsTable = &schema.Table{
		Name:       "supplier_merchants",
		Columns:    SupplierMerchantsColumns,
		PrimaryKey: []*schema.Column{SupplierMerchantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "supplier_merchants_merchants_supplier",
				Columns:    []*schema.Column{SupplierMerchantsColumns[8]},
				RefColumns: []*schema.Column{MerchantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// LogisticOrderColumns holds the columns for the "logistic_order" table.
	LogisticOrderColumns = []*schema.Column{
		{Name: "logistic_id", Type: field.TypeInt},
		{Name: "order_id", Type: field.TypeInt},
	}
	// LogisticOrderTable holds the schema information for the "logistic_order" table.
	LogisticOrderTable = &schema.Table{
		Name:       "logistic_order",
		Columns:    LogisticOrderColumns,
		PrimaryKey: []*schema.Column{LogisticOrderColumns[0], LogisticOrderColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "logistic_order_logistic_id",
				Columns:    []*schema.Column{LogisticOrderColumns[0]},
				RefColumns: []*schema.Column{LogisticsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "logistic_order_order_id",
				Columns:    []*schema.Column{LogisticOrderColumns[1]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MerchantStoreOrdersColumns holds the columns for the "merchant_store_orders" table.
	MerchantStoreOrdersColumns = []*schema.Column{
		{Name: "merchant_store_id", Type: field.TypeInt},
		{Name: "order_id", Type: field.TypeInt},
	}
	// MerchantStoreOrdersTable holds the schema information for the "merchant_store_orders" table.
	MerchantStoreOrdersTable = &schema.Table{
		Name:       "merchant_store_orders",
		Columns:    MerchantStoreOrdersColumns,
		PrimaryKey: []*schema.Column{MerchantStoreOrdersColumns[0], MerchantStoreOrdersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "merchant_store_orders_merchant_store_id",
				Columns:    []*schema.Column{MerchantStoreOrdersColumns[0]},
				RefColumns: []*schema.Column{MerchantStoresColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "merchant_store_orders_order_id",
				Columns:    []*schema.Column{MerchantStoreOrdersColumns[1]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AddressesTable,
		AdminsTable,
		AgentsTable,
		AgentRequestsTable,
		BusinessCustomersTable,
		CustomersTable,
		FavouritesTable,
		IndividualCustomersTable,
		LogisticsTable,
		MerchantsTable,
		MerchantStoresTable,
		OrdersTable,
		OrderDetailsTable,
		PickupStationsTable,
		ProductsTable,
		ProductCategoryMajorsTable,
		ProductCategoryMinorsTable,
		RetailMerchantsTable,
		SupplierMerchantsTable,
		LogisticOrderTable,
		MerchantStoreOrdersTable,
	}
)

func init() {
	AddressesTable.ForeignKeys[0].RefTable = AgentsTable
	AddressesTable.ForeignKeys[1].RefTable = CustomersTable
	AddressesTable.ForeignKeys[2].RefTable = MerchantsTable
	AgentRequestsTable.ForeignKeys[0].RefTable = AgentsTable
	AgentRequestsTable.ForeignKeys[1].RefTable = MerchantStoresTable
	BusinessCustomersTable.ForeignKeys[0].RefTable = CustomersTable
	FavouritesTable.ForeignKeys[0].RefTable = AgentsTable
	FavouritesTable.ForeignKeys[1].RefTable = CustomersTable
	FavouritesTable.ForeignKeys[2].RefTable = MerchantsTable
	FavouritesTable.ForeignKeys[3].RefTable = ProductsTable
	IndividualCustomersTable.ForeignKeys[0].RefTable = CustomersTable
	LogisticsTable.ForeignKeys[0].RefTable = MerchantStoresTable
	MerchantStoresTable.ForeignKeys[0].RefTable = AgentsTable
	MerchantStoresTable.ForeignKeys[1].RefTable = MerchantsTable
	OrdersTable.ForeignKeys[0].RefTable = AddressesTable
	OrdersTable.ForeignKeys[1].RefTable = AgentsTable
	OrdersTable.ForeignKeys[2].RefTable = CustomersTable
	OrdersTable.ForeignKeys[3].RefTable = MerchantsTable
	OrdersTable.ForeignKeys[4].RefTable = PickupStationsTable
	OrderDetailsTable.ForeignKeys[0].RefTable = MerchantStoresTable
	OrderDetailsTable.ForeignKeys[1].RefTable = OrdersTable
	OrderDetailsTable.ForeignKeys[2].RefTable = ProductsTable
	ProductsTable.ForeignKeys[0].RefTable = MerchantsTable
	ProductsTable.ForeignKeys[1].RefTable = ProductCategoryMajorsTable
	ProductsTable.ForeignKeys[2].RefTable = ProductCategoryMinorsTable
	ProductCategoryMinorsTable.ForeignKeys[0].RefTable = ProductCategoryMajorsTable
	RetailMerchantsTable.ForeignKeys[0].RefTable = MerchantsTable
	SupplierMerchantsTable.ForeignKeys[0].RefTable = MerchantsTable
	LogisticOrderTable.ForeignKeys[0].RefTable = LogisticsTable
	LogisticOrderTable.ForeignKeys[1].RefTable = OrdersTable
	MerchantStoreOrdersTable.ForeignKeys[0].RefTable = MerchantStoresTable
	MerchantStoreOrdersTable.ForeignKeys[1].RefTable = OrdersTable
}
