// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/customer"
	"github.com/SeyramWood/ent/purchaserequest"
)

// PurchaseRequest is the model entity for the PurchaseRequest schema.
type PurchaseRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Signed holds the value of the "signed" field.
	Signed string `json:"signed,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// File holds the value of the "file" field.
	File string `json:"file,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PurchaseRequestQuery when eager-loading is set.
	Edges                     PurchaseRequestEdges `json:"edges"`
	customer_purchase_request *int
	selectValues              sql.SelectValues
}

// PurchaseRequestEdges holds the relations/edges for other nodes in the graph.
type PurchaseRequestEdges struct {
	// Order holds the value of the order edge.
	Order []*Order `json:"order,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading.
func (e PurchaseRequestEdges) OrderOrErr() ([]*Order, error) {
	if e.loadedTypes[0] {
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PurchaseRequestEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[1] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PurchaseRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case purchaserequest.FieldID:
			values[i] = new(sql.NullInt64)
		case purchaserequest.FieldName, purchaserequest.FieldSigned, purchaserequest.FieldDescription, purchaserequest.FieldFile:
			values[i] = new(sql.NullString)
		case purchaserequest.FieldCreatedAt, purchaserequest.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case purchaserequest.ForeignKeys[0]: // customer_purchase_request
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PurchaseRequest fields.
func (pr *PurchaseRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case purchaserequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case purchaserequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case purchaserequest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case purchaserequest.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case purchaserequest.FieldSigned:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signed", values[i])
			} else if value.Valid {
				pr.Signed = value.String
			}
		case purchaserequest.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case purchaserequest.FieldFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file", values[i])
			} else if value.Valid {
				pr.File = value.String
			}
		case purchaserequest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_purchase_request", value)
			} else if value.Valid {
				pr.customer_purchase_request = new(int)
				*pr.customer_purchase_request = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PurchaseRequest.
// This includes values selected through modifiers, order, etc.
func (pr *PurchaseRequest) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the PurchaseRequest entity.
func (pr *PurchaseRequest) QueryOrder() *OrderQuery {
	return NewPurchaseRequestClient(pr.config).QueryOrder(pr)
}

// QueryCustomer queries the "customer" edge of the PurchaseRequest entity.
func (pr *PurchaseRequest) QueryCustomer() *CustomerQuery {
	return NewPurchaseRequestClient(pr.config).QueryCustomer(pr)
}

// Update returns a builder for updating this PurchaseRequest.
// Note that you need to call PurchaseRequest.Unwrap() before calling this method if this PurchaseRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *PurchaseRequest) Update() *PurchaseRequestUpdateOne {
	return NewPurchaseRequestClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the PurchaseRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *PurchaseRequest) Unwrap() *PurchaseRequest {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PurchaseRequest is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *PurchaseRequest) String() string {
	var builder strings.Builder
	builder.WriteString("PurchaseRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("signed=")
	builder.WriteString(pr.Signed)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", ")
	builder.WriteString("file=")
	builder.WriteString(pr.File)
	builder.WriteByte(')')
	return builder.String()
}

// PurchaseRequests is a parsable slice of PurchaseRequest.
type PurchaseRequests []*PurchaseRequest
