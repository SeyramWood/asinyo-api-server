// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/merchantstore"
	"github.com/SeyramWood/ent/order"
	"github.com/SeyramWood/ent/orderdetail"
	"github.com/SeyramWood/ent/predicate"
)

// MerchantStoreQuery is the builder for querying MerchantStore entities.
type MerchantStoreQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.MerchantStore
	// eager-loading edges.
	withMerchant     *MerchantQuery
	withOrders       *OrderQuery
	withOrderDetails *OrderDetailQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MerchantStoreQuery builder.
func (msq *MerchantStoreQuery) Where(ps ...predicate.MerchantStore) *MerchantStoreQuery {
	msq.predicates = append(msq.predicates, ps...)
	return msq
}

// Limit adds a limit step to the query.
func (msq *MerchantStoreQuery) Limit(limit int) *MerchantStoreQuery {
	msq.limit = &limit
	return msq
}

// Offset adds an offset step to the query.
func (msq *MerchantStoreQuery) Offset(offset int) *MerchantStoreQuery {
	msq.offset = &offset
	return msq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (msq *MerchantStoreQuery) Unique(unique bool) *MerchantStoreQuery {
	msq.unique = &unique
	return msq
}

// Order adds an order step to the query.
func (msq *MerchantStoreQuery) Order(o ...OrderFunc) *MerchantStoreQuery {
	msq.order = append(msq.order, o...)
	return msq
}

// QueryMerchant chains the current query on the "merchant" edge.
func (msq *MerchantStoreQuery) QueryMerchant() *MerchantQuery {
	query := &MerchantQuery{config: msq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := msq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := msq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(merchantstore.Table, merchantstore.FieldID, selector),
			sqlgraph.To(merchant.Table, merchant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, merchantstore.MerchantTable, merchantstore.MerchantColumn),
		)
		fromU = sqlgraph.SetNeighbors(msq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrders chains the current query on the "orders" edge.
func (msq *MerchantStoreQuery) QueryOrders() *OrderQuery {
	query := &OrderQuery{config: msq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := msq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := msq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(merchantstore.Table, merchantstore.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, merchantstore.OrdersTable, merchantstore.OrdersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(msq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderDetails chains the current query on the "order_details" edge.
func (msq *MerchantStoreQuery) QueryOrderDetails() *OrderDetailQuery {
	query := &OrderDetailQuery{config: msq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := msq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := msq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(merchantstore.Table, merchantstore.FieldID, selector),
			sqlgraph.To(orderdetail.Table, orderdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, merchantstore.OrderDetailsTable, merchantstore.OrderDetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(msq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MerchantStore entity from the query.
// Returns a *NotFoundError when no MerchantStore was found.
func (msq *MerchantStoreQuery) First(ctx context.Context) (*MerchantStore, error) {
	nodes, err := msq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{merchantstore.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (msq *MerchantStoreQuery) FirstX(ctx context.Context) *MerchantStore {
	node, err := msq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MerchantStore ID from the query.
// Returns a *NotFoundError when no MerchantStore ID was found.
func (msq *MerchantStoreQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = msq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{merchantstore.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (msq *MerchantStoreQuery) FirstIDX(ctx context.Context) int {
	id, err := msq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MerchantStore entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MerchantStore entity is found.
// Returns a *NotFoundError when no MerchantStore entities are found.
func (msq *MerchantStoreQuery) Only(ctx context.Context) (*MerchantStore, error) {
	nodes, err := msq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{merchantstore.Label}
	default:
		return nil, &NotSingularError{merchantstore.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (msq *MerchantStoreQuery) OnlyX(ctx context.Context) *MerchantStore {
	node, err := msq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MerchantStore ID in the query.
// Returns a *NotSingularError when more than one MerchantStore ID is found.
// Returns a *NotFoundError when no entities are found.
func (msq *MerchantStoreQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = msq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{merchantstore.Label}
	default:
		err = &NotSingularError{merchantstore.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (msq *MerchantStoreQuery) OnlyIDX(ctx context.Context) int {
	id, err := msq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MerchantStores.
func (msq *MerchantStoreQuery) All(ctx context.Context) ([]*MerchantStore, error) {
	if err := msq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return msq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (msq *MerchantStoreQuery) AllX(ctx context.Context) []*MerchantStore {
	nodes, err := msq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MerchantStore IDs.
func (msq *MerchantStoreQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := msq.Select(merchantstore.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (msq *MerchantStoreQuery) IDsX(ctx context.Context) []int {
	ids, err := msq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (msq *MerchantStoreQuery) Count(ctx context.Context) (int, error) {
	if err := msq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return msq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (msq *MerchantStoreQuery) CountX(ctx context.Context) int {
	count, err := msq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (msq *MerchantStoreQuery) Exist(ctx context.Context) (bool, error) {
	if err := msq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return msq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (msq *MerchantStoreQuery) ExistX(ctx context.Context) bool {
	exist, err := msq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MerchantStoreQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (msq *MerchantStoreQuery) Clone() *MerchantStoreQuery {
	if msq == nil {
		return nil
	}
	return &MerchantStoreQuery{
		config:           msq.config,
		limit:            msq.limit,
		offset:           msq.offset,
		order:            append([]OrderFunc{}, msq.order...),
		predicates:       append([]predicate.MerchantStore{}, msq.predicates...),
		withMerchant:     msq.withMerchant.Clone(),
		withOrders:       msq.withOrders.Clone(),
		withOrderDetails: msq.withOrderDetails.Clone(),
		// clone intermediate query.
		sql:    msq.sql.Clone(),
		path:   msq.path,
		unique: msq.unique,
	}
}

// WithMerchant tells the query-builder to eager-load the nodes that are connected to
// the "merchant" edge. The optional arguments are used to configure the query builder of the edge.
func (msq *MerchantStoreQuery) WithMerchant(opts ...func(*MerchantQuery)) *MerchantStoreQuery {
	query := &MerchantQuery{config: msq.config}
	for _, opt := range opts {
		opt(query)
	}
	msq.withMerchant = query
	return msq
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (msq *MerchantStoreQuery) WithOrders(opts ...func(*OrderQuery)) *MerchantStoreQuery {
	query := &OrderQuery{config: msq.config}
	for _, opt := range opts {
		opt(query)
	}
	msq.withOrders = query
	return msq
}

// WithOrderDetails tells the query-builder to eager-load the nodes that are connected to
// the "order_details" edge. The optional arguments are used to configure the query builder of the edge.
func (msq *MerchantStoreQuery) WithOrderDetails(opts ...func(*OrderDetailQuery)) *MerchantStoreQuery {
	query := &OrderDetailQuery{config: msq.config}
	for _, opt := range opts {
		opt(query)
	}
	msq.withOrderDetails = query
	return msq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MerchantStore.Query().
//		GroupBy(merchantstore.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (msq *MerchantStoreQuery) GroupBy(field string, fields ...string) *MerchantStoreGroupBy {
	group := &MerchantStoreGroupBy{config: msq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := msq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return msq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.MerchantStore.Query().
//		Select(merchantstore.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (msq *MerchantStoreQuery) Select(fields ...string) *MerchantStoreSelect {
	msq.fields = append(msq.fields, fields...)
	return &MerchantStoreSelect{MerchantStoreQuery: msq}
}

func (msq *MerchantStoreQuery) prepareQuery(ctx context.Context) error {
	for _, f := range msq.fields {
		if !merchantstore.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if msq.path != nil {
		prev, err := msq.path(ctx)
		if err != nil {
			return err
		}
		msq.sql = prev
	}
	return nil
}

func (msq *MerchantStoreQuery) sqlAll(ctx context.Context) ([]*MerchantStore, error) {
	var (
		nodes       = []*MerchantStore{}
		withFKs     = msq.withFKs
		_spec       = msq.querySpec()
		loadedTypes = [3]bool{
			msq.withMerchant != nil,
			msq.withOrders != nil,
			msq.withOrderDetails != nil,
		}
	)
	if msq.withMerchant != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, merchantstore.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &MerchantStore{config: msq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, msq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := msq.withMerchant; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*MerchantStore)
		for i := range nodes {
			if nodes[i].merchant_store == nil {
				continue
			}
			fk := *nodes[i].merchant_store
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(merchant.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "merchant_store" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Merchant = n
			}
		}
	}

	if query := msq.withOrders; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*MerchantStore, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Orders = []*Order{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*MerchantStore)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   merchantstore.OrdersTable,
				Columns: merchantstore.OrdersPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(merchantstore.OrdersPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, msq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "orders": %w`, err)
		}
		query.Where(order.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "orders" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Orders = append(nodes[i].Edges.Orders, n)
			}
		}
	}

	if query := msq.withOrderDetails; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*MerchantStore)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderDetails = []*OrderDetail{}
		}
		query.withFKs = true
		query.Where(predicate.OrderDetail(func(s *sql.Selector) {
			s.Where(sql.InValues(merchantstore.OrderDetailsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.merchant_store_order_details
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "merchant_store_order_details" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "merchant_store_order_details" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderDetails = append(node.Edges.OrderDetails, n)
		}
	}

	return nodes, nil
}

func (msq *MerchantStoreQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := msq.querySpec()
	_spec.Node.Columns = msq.fields
	if len(msq.fields) > 0 {
		_spec.Unique = msq.unique != nil && *msq.unique
	}
	return sqlgraph.CountNodes(ctx, msq.driver, _spec)
}

func (msq *MerchantStoreQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := msq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (msq *MerchantStoreQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   merchantstore.Table,
			Columns: merchantstore.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: merchantstore.FieldID,
			},
		},
		From:   msq.sql,
		Unique: true,
	}
	if unique := msq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := msq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, merchantstore.FieldID)
		for i := range fields {
			if fields[i] != merchantstore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := msq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := msq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := msq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := msq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (msq *MerchantStoreQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(msq.driver.Dialect())
	t1 := builder.Table(merchantstore.Table)
	columns := msq.fields
	if len(columns) == 0 {
		columns = merchantstore.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if msq.sql != nil {
		selector = msq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if msq.unique != nil && *msq.unique {
		selector.Distinct()
	}
	for _, p := range msq.predicates {
		p(selector)
	}
	for _, p := range msq.order {
		p(selector)
	}
	if offset := msq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := msq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MerchantStoreGroupBy is the group-by builder for MerchantStore entities.
type MerchantStoreGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (msgb *MerchantStoreGroupBy) Aggregate(fns ...AggregateFunc) *MerchantStoreGroupBy {
	msgb.fns = append(msgb.fns, fns...)
	return msgb
}

// Scan applies the group-by query and scans the result into the given value.
func (msgb *MerchantStoreGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := msgb.path(ctx)
	if err != nil {
		return err
	}
	msgb.sql = query
	return msgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (msgb *MerchantStoreGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := msgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (msgb *MerchantStoreGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(msgb.fields) > 1 {
		return nil, errors.New("ent: MerchantStoreGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := msgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (msgb *MerchantStoreGroupBy) StringsX(ctx context.Context) []string {
	v, err := msgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (msgb *MerchantStoreGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = msgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{merchantstore.Label}
	default:
		err = fmt.Errorf("ent: MerchantStoreGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (msgb *MerchantStoreGroupBy) StringX(ctx context.Context) string {
	v, err := msgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (msgb *MerchantStoreGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(msgb.fields) > 1 {
		return nil, errors.New("ent: MerchantStoreGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := msgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (msgb *MerchantStoreGroupBy) IntsX(ctx context.Context) []int {
	v, err := msgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (msgb *MerchantStoreGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = msgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{merchantstore.Label}
	default:
		err = fmt.Errorf("ent: MerchantStoreGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (msgb *MerchantStoreGroupBy) IntX(ctx context.Context) int {
	v, err := msgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (msgb *MerchantStoreGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(msgb.fields) > 1 {
		return nil, errors.New("ent: MerchantStoreGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := msgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (msgb *MerchantStoreGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := msgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (msgb *MerchantStoreGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = msgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{merchantstore.Label}
	default:
		err = fmt.Errorf("ent: MerchantStoreGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (msgb *MerchantStoreGroupBy) Float64X(ctx context.Context) float64 {
	v, err := msgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (msgb *MerchantStoreGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(msgb.fields) > 1 {
		return nil, errors.New("ent: MerchantStoreGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := msgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (msgb *MerchantStoreGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := msgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (msgb *MerchantStoreGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = msgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{merchantstore.Label}
	default:
		err = fmt.Errorf("ent: MerchantStoreGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (msgb *MerchantStoreGroupBy) BoolX(ctx context.Context) bool {
	v, err := msgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (msgb *MerchantStoreGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range msgb.fields {
		if !merchantstore.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := msgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := msgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (msgb *MerchantStoreGroupBy) sqlQuery() *sql.Selector {
	selector := msgb.sql.Select()
	aggregation := make([]string, 0, len(msgb.fns))
	for _, fn := range msgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(msgb.fields)+len(msgb.fns))
		for _, f := range msgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(msgb.fields...)...)
}

// MerchantStoreSelect is the builder for selecting fields of MerchantStore entities.
type MerchantStoreSelect struct {
	*MerchantStoreQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (mss *MerchantStoreSelect) Scan(ctx context.Context, v interface{}) error {
	if err := mss.prepareQuery(ctx); err != nil {
		return err
	}
	mss.sql = mss.MerchantStoreQuery.sqlQuery(ctx)
	return mss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mss *MerchantStoreSelect) ScanX(ctx context.Context, v interface{}) {
	if err := mss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (mss *MerchantStoreSelect) Strings(ctx context.Context) ([]string, error) {
	if len(mss.fields) > 1 {
		return nil, errors.New("ent: MerchantStoreSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mss *MerchantStoreSelect) StringsX(ctx context.Context) []string {
	v, err := mss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (mss *MerchantStoreSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{merchantstore.Label}
	default:
		err = fmt.Errorf("ent: MerchantStoreSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mss *MerchantStoreSelect) StringX(ctx context.Context) string {
	v, err := mss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (mss *MerchantStoreSelect) Ints(ctx context.Context) ([]int, error) {
	if len(mss.fields) > 1 {
		return nil, errors.New("ent: MerchantStoreSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mss *MerchantStoreSelect) IntsX(ctx context.Context) []int {
	v, err := mss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (mss *MerchantStoreSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{merchantstore.Label}
	default:
		err = fmt.Errorf("ent: MerchantStoreSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mss *MerchantStoreSelect) IntX(ctx context.Context) int {
	v, err := mss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (mss *MerchantStoreSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mss.fields) > 1 {
		return nil, errors.New("ent: MerchantStoreSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mss *MerchantStoreSelect) Float64sX(ctx context.Context) []float64 {
	v, err := mss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (mss *MerchantStoreSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{merchantstore.Label}
	default:
		err = fmt.Errorf("ent: MerchantStoreSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mss *MerchantStoreSelect) Float64X(ctx context.Context) float64 {
	v, err := mss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (mss *MerchantStoreSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mss.fields) > 1 {
		return nil, errors.New("ent: MerchantStoreSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mss *MerchantStoreSelect) BoolsX(ctx context.Context) []bool {
	v, err := mss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (mss *MerchantStoreSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{merchantstore.Label}
	default:
		err = fmt.Errorf("ent: MerchantStoreSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mss *MerchantStoreSelect) BoolX(ctx context.Context) bool {
	v, err := mss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mss *MerchantStoreSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mss.sql.Query()
	if err := mss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
