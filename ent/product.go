// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/merchant"
	"github.com/SeyramWood/ent/product"
	"github.com/SeyramWood/ent/productcategorymajor"
	"github.com/SeyramWood/ent/productcategoryminor"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// PromoPrice holds the value of the "promo_price" field.
	PromoPrice *float64 `json:"promo_price,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity uint32 `json:"quantity,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges                           ProductEdges `json:"edges"`
	merchant_products               *int
	product_category_major_products *int
	product_category_minor_products *int
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Orders holds the value of the orders edge.
	Orders []*OrderDetail `json:"orders,omitempty"`
	// Favourites holds the value of the favourites edge.
	Favourites []*Favourite `json:"favourites,omitempty"`
	// Merchant holds the value of the merchant edge.
	Merchant *Merchant `json:"merchant,omitempty"`
	// Major holds the value of the major edge.
	Major *ProductCategoryMajor `json:"major,omitempty"`
	// Minor holds the value of the minor edge.
	Minor *ProductCategoryMinor `json:"minor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) OrdersOrErr() ([]*OrderDetail, error) {
	if e.loadedTypes[0] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// FavouritesOrErr returns the Favourites value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) FavouritesOrErr() ([]*Favourite, error) {
	if e.loadedTypes[1] {
		return e.Favourites, nil
	}
	return nil, &NotLoadedError{edge: "favourites"}
}

// MerchantOrErr returns the Merchant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) MerchantOrErr() (*Merchant, error) {
	if e.loadedTypes[2] {
		if e.Merchant == nil {
			// The edge merchant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: merchant.Label}
		}
		return e.Merchant, nil
	}
	return nil, &NotLoadedError{edge: "merchant"}
}

// MajorOrErr returns the Major value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) MajorOrErr() (*ProductCategoryMajor, error) {
	if e.loadedTypes[3] {
		if e.Major == nil {
			// The edge major was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productcategorymajor.Label}
		}
		return e.Major, nil
	}
	return nil, &NotLoadedError{edge: "major"}
}

// MinorOrErr returns the Minor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) MinorOrErr() (*ProductCategoryMinor, error) {
	if e.loadedTypes[4] {
		if e.Minor == nil {
			// The edge minor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productcategoryminor.Label}
		}
		return e.Minor, nil
	}
	return nil, &NotLoadedError{edge: "minor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldPrice, product.FieldPromoPrice:
			values[i] = new(sql.NullFloat64)
		case product.FieldID, product.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case product.FieldName, product.FieldUnit, product.FieldDescription, product.FieldImage:
			values[i] = new(sql.NullString)
		case product.FieldCreatedAt, product.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case product.ForeignKeys[0]: // merchant_products
			values[i] = new(sql.NullInt64)
		case product.ForeignKeys[1]: // product_category_major_products
			values[i] = new(sql.NullInt64)
		case product.ForeignKeys[2]: // product_category_minor_products
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case product.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case product.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case product.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pr.Price = value.Float64
			}
		case product.FieldPromoPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field promo_price", values[i])
			} else if value.Valid {
				pr.PromoPrice = new(float64)
				*pr.PromoPrice = value.Float64
			}
		case product.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				pr.Quantity = uint32(value.Int64)
			}
		case product.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				pr.Unit = value.String
			}
		case product.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case product.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				pr.Image = value.String
			}
		case product.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field merchant_products", value)
			} else if value.Valid {
				pr.merchant_products = new(int)
				*pr.merchant_products = int(value.Int64)
			}
		case product.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_category_major_products", value)
			} else if value.Valid {
				pr.product_category_major_products = new(int)
				*pr.product_category_major_products = int(value.Int64)
			}
		case product.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_category_minor_products", value)
			} else if value.Valid {
				pr.product_category_minor_products = new(int)
				*pr.product_category_minor_products = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrders queries the "orders" edge of the Product entity.
func (pr *Product) QueryOrders() *OrderDetailQuery {
	return (&ProductClient{config: pr.config}).QueryOrders(pr)
}

// QueryFavourites queries the "favourites" edge of the Product entity.
func (pr *Product) QueryFavourites() *FavouriteQuery {
	return (&ProductClient{config: pr.config}).QueryFavourites(pr)
}

// QueryMerchant queries the "merchant" edge of the Product entity.
func (pr *Product) QueryMerchant() *MerchantQuery {
	return (&ProductClient{config: pr.config}).QueryMerchant(pr)
}

// QueryMajor queries the "major" edge of the Product entity.
func (pr *Product) QueryMajor() *ProductCategoryMajorQuery {
	return (&ProductClient{config: pr.config}).QueryMajor(pr)
}

// QueryMinor queries the "minor" edge of the Product entity.
func (pr *Product) QueryMinor() *ProductCategoryMinorQuery {
	return (&ProductClient{config: pr.config}).QueryMinor(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", pr.Price))
	if v := pr.PromoPrice; v != nil {
		builder.WriteString(", promo_price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", quantity=")
	builder.WriteString(fmt.Sprintf("%v", pr.Quantity))
	builder.WriteString(", unit=")
	builder.WriteString(pr.Unit)
	builder.WriteString(", description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", image=")
	builder.WriteString(pr.Image)
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
