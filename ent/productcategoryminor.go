// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/SeyramWood/ent/productcategorymajor"
	"github.com/SeyramWood/ent/productcategoryminor"
)

// ProductCategoryMinor is the model entity for the ProductCategoryMinor schema.
type ProductCategoryMinor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductCategoryMinorQuery when eager-loading is set.
	Edges                         ProductCategoryMinorEdges `json:"edges"`
	product_category_major_minors *int
}

// ProductCategoryMinorEdges holds the relations/edges for other nodes in the graph.
type ProductCategoryMinorEdges struct {
	// Major holds the value of the major edge.
	Major *ProductCategoryMajor `json:"major,omitempty"`
	// Products holds the value of the products edge.
	Products []*Product `json:"products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MajorOrErr returns the Major value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductCategoryMinorEdges) MajorOrErr() (*ProductCategoryMajor, error) {
	if e.loadedTypes[0] {
		if e.Major == nil {
			// The edge major was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productcategorymajor.Label}
		}
		return e.Major, nil
	}
	return nil, &NotLoadedError{edge: "major"}
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e ProductCategoryMinorEdges) ProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[1] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductCategoryMinor) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productcategoryminor.FieldID:
			values[i] = new(sql.NullInt64)
		case productcategoryminor.FieldCategory, productcategoryminor.FieldImage, productcategoryminor.FieldSlug:
			values[i] = new(sql.NullString)
		case productcategoryminor.FieldCreatedAt, productcategoryminor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case productcategoryminor.ForeignKeys[0]: // product_category_major_minors
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductCategoryMinor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductCategoryMinor fields.
func (pcm *ProductCategoryMinor) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productcategoryminor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pcm.ID = int(value.Int64)
		case productcategoryminor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pcm.CreatedAt = value.Time
			}
		case productcategoryminor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pcm.UpdatedAt = value.Time
			}
		case productcategoryminor.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pcm.Category = value.String
			}
		case productcategoryminor.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				pcm.Image = value.String
			}
		case productcategoryminor.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				pcm.Slug = value.String
			}
		case productcategoryminor.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_category_major_minors", value)
			} else if value.Valid {
				pcm.product_category_major_minors = new(int)
				*pcm.product_category_major_minors = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMajor queries the "major" edge of the ProductCategoryMinor entity.
func (pcm *ProductCategoryMinor) QueryMajor() *ProductCategoryMajorQuery {
	return (&ProductCategoryMinorClient{config: pcm.config}).QueryMajor(pcm)
}

// QueryProducts queries the "products" edge of the ProductCategoryMinor entity.
func (pcm *ProductCategoryMinor) QueryProducts() *ProductQuery {
	return (&ProductCategoryMinorClient{config: pcm.config}).QueryProducts(pcm)
}

// Update returns a builder for updating this ProductCategoryMinor.
// Note that you need to call ProductCategoryMinor.Unwrap() before calling this method if this ProductCategoryMinor
// was returned from a transaction, and the transaction was committed or rolled back.
func (pcm *ProductCategoryMinor) Update() *ProductCategoryMinorUpdateOne {
	return (&ProductCategoryMinorClient{config: pcm.config}).UpdateOne(pcm)
}

// Unwrap unwraps the ProductCategoryMinor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pcm *ProductCategoryMinor) Unwrap() *ProductCategoryMinor {
	tx, ok := pcm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductCategoryMinor is not a transactional entity")
	}
	pcm.config.driver = tx.drv
	return pcm
}

// String implements the fmt.Stringer.
func (pcm *ProductCategoryMinor) String() string {
	var builder strings.Builder
	builder.WriteString("ProductCategoryMinor(")
	builder.WriteString(fmt.Sprintf("id=%v", pcm.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pcm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pcm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", category=")
	builder.WriteString(pcm.Category)
	builder.WriteString(", image=")
	builder.WriteString(pcm.Image)
	builder.WriteString(", slug=")
	builder.WriteString(pcm.Slug)
	builder.WriteByte(')')
	return builder.String()
}

// ProductCategoryMinors is a parsable slice of ProductCategoryMinor.
type ProductCategoryMinors []*ProductCategoryMinor

func (pcm ProductCategoryMinors) config(cfg config) {
	for _i := range pcm {
		pcm[_i].config = cfg
	}
}
